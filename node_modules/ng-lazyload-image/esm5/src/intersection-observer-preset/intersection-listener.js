import { empty, Observable, Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { isWindowDefined } from '../util';
var observers = new WeakMap();
var intersectionSubject = new Subject();
function loadingCallback(entrys) {
    entrys.forEach(function (entry) { return intersectionSubject.next(entry); });
}
export var getIntersectionObserver = function (attributes) {
    if (!attributes.scrollContainer && !isWindowDefined()) {
        return empty();
    }
    var options = {
        root: attributes.scrollContainer
    };
    if (attributes.offset) {
        options.rootMargin = attributes.offset + "px";
    }
    var scrollContainer = attributes.scrollContainer || window;
    var observer = observers.get(scrollContainer);
    if (!observer) {
        observer = new IntersectionObserver(loadingCallback, options);
        observers.set(scrollContainer, observer);
    }
    observer.observe(attributes.element);
    return Observable.create(function (obs) {
        var subscription = intersectionSubject.pipe(filter(function (entry) { return entry.target === attributes.element; })).subscribe(obs);
        return function () {
            subscription.unsubscribe();
            observer.unobserve(attributes.element);
        };
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLXByZXNldC9pbnRlcnNlY3Rpb24tbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBTzFDLElBQU0sU0FBUyxHQUFHLElBQUksT0FBTyxFQUFzQyxDQUFDO0FBRXBFLElBQU0sbUJBQW1CLEdBQUcsSUFBSSxPQUFPLEVBQTZCLENBQUM7QUFFckUsU0FBUyxlQUFlLENBQUMsTUFBbUM7SUFDMUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBL0IsQ0FBK0IsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyxVQUFDLFVBQXNCO0lBQzVELElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUU7UUFDckQsT0FBTyxLQUFLLEVBQUUsQ0FBQztLQUNoQjtJQUVELElBQU0sT0FBTyxHQUFvQjtRQUMvQixJQUFJLEVBQUUsVUFBVSxDQUFDLGVBQWU7S0FDakMsQ0FBQztJQUNGLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtRQUNyQixPQUFPLENBQUMsVUFBVSxHQUFNLFVBQVUsQ0FBQyxNQUFNLE9BQUksQ0FBQztLQUMvQztJQUVELElBQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDO0lBRTdELElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFFOUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5RCxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUMxQztJQUVELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXJDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQXVDO1FBQy9ELElBQU0sWUFBWSxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxPQUFPLEVBQW5DLENBQW1DLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuSCxPQUFPO1lBQ0wsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzNCLFFBQVMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW1wdHksIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEF0dHJpYnV0ZXMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBpc1dpbmRvd0RlZmluZWQgfSBmcm9tICcuLi91dGlsJztcblxudHlwZSBPYnNlcnZlck9wdGlvbnMgPSB7XG4gIHJvb3Q/OiBFbGVtZW50O1xuICByb290TWFyZ2luPzogc3RyaW5nO1xufTtcblxuY29uc3Qgb2JzZXJ2ZXJzID0gbmV3IFdlYWtNYXA8RWxlbWVudCB8IHt9LCBJbnRlcnNlY3Rpb25PYnNlcnZlcj4oKTtcblxuY29uc3QgaW50ZXJzZWN0aW9uU3ViamVjdCA9IG5ldyBTdWJqZWN0PEludGVyc2VjdGlvbk9ic2VydmVyRW50cnk+KCk7XG5cbmZ1bmN0aW9uIGxvYWRpbmdDYWxsYmFjayhlbnRyeXM6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXSkge1xuICBlbnRyeXMuZm9yRWFjaChlbnRyeSA9PiBpbnRlcnNlY3Rpb25TdWJqZWN0Lm5leHQoZW50cnkpKTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldEludGVyc2VjdGlvbk9ic2VydmVyID0gKGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXMpOiBPYnNlcnZhYmxlPEludGVyc2VjdGlvbk9ic2VydmVyRW50cnk+ID0+IHtcbiAgaWYgKCFhdHRyaWJ1dGVzLnNjcm9sbENvbnRhaW5lciAmJiAhaXNXaW5kb3dEZWZpbmVkKCkpIHtcbiAgICByZXR1cm4gZW1wdHkoKTtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnM6IE9ic2VydmVyT3B0aW9ucyA9IHtcbiAgICByb290OiBhdHRyaWJ1dGVzLnNjcm9sbENvbnRhaW5lclxuICB9O1xuICBpZiAoYXR0cmlidXRlcy5vZmZzZXQpIHtcbiAgICBvcHRpb25zLnJvb3RNYXJnaW4gPSBgJHthdHRyaWJ1dGVzLm9mZnNldH1weGA7XG4gIH1cblxuICBjb25zdCBzY3JvbGxDb250YWluZXIgPSBhdHRyaWJ1dGVzLnNjcm9sbENvbnRhaW5lciB8fCB3aW5kb3c7XG5cbiAgbGV0IG9ic2VydmVyID0gb2JzZXJ2ZXJzLmdldChzY3JvbGxDb250YWluZXIpO1xuXG4gIGlmICghb2JzZXJ2ZXIpIHtcbiAgICBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihsb2FkaW5nQ2FsbGJhY2ssIG9wdGlvbnMpO1xuICAgIG9ic2VydmVycy5zZXQoc2Nyb2xsQ29udGFpbmVyLCBvYnNlcnZlcik7XG4gIH1cblxuICBvYnNlcnZlci5vYnNlcnZlKGF0dHJpYnV0ZXMuZWxlbWVudCk7XG5cbiAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnM6IFN1YmplY3Q8SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeT4pID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBpbnRlcnNlY3Rpb25TdWJqZWN0LnBpcGUoZmlsdGVyKGVudHJ5ID0+IGVudHJ5LnRhcmdldCA9PT0gYXR0cmlidXRlcy5lbGVtZW50KSkuc3Vic2NyaWJlKG9icyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgb2JzZXJ2ZXIhLnVub2JzZXJ2ZShhdHRyaWJ1dGVzLmVsZW1lbnQpO1xuICAgIH07XG4gIH0pO1xufTtcbiJdfQ==