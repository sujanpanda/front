import { empty, Observable } from 'rxjs';
import { sampleTime, share, startWith } from 'rxjs/operators';
import { isWindowDefined } from '../util';
const scrollListeners = new WeakMap();
export function sampleObservable(obs, scheduler) {
    return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));
}
// Only create one scroll listener per target and share the observable.
// Typical, there will only be one observable per application
export const getScrollListener = (scrollTarget) => {
    if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
        if (isWindowDefined()) {
            console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
        }
        return empty();
    }
    const scrollListener = scrollListeners.get(scrollTarget);
    if (scrollListener) {
        return scrollListener;
    }
    const srollEvent = Observable.create((observer) => {
        const eventName = 'scroll';
        const handler = (event) => observer.next(event);
        const options = { passive: true, capture: false };
        scrollTarget.addEventListener(eventName, handler, options);
        return () => scrollTarget.removeEventListener(eventName, handler, options);
    });
    const listener = sampleObservable(srollEvent);
    scrollListeners.set(scrollTarget, listener);
    return listener;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWxpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2Nyb2xsLXByZXNldC9zY3JvbGwtbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQVcsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUxQyxNQUFNLGVBQWUsR0FBRyxJQUFJLE9BQU8sRUFBd0IsQ0FBQztBQUU1RCxNQUFNLFVBQVUsZ0JBQWdCLENBQUksR0FBa0IsRUFBRSxTQUFlO0lBQ3JFLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FDYixVQUFVLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxFQUMxQixLQUFLLEVBQUUsRUFDUCxTQUFTLENBQUMsRUFBRSxDQUFDLENBQ2QsQ0FBQztBQUNKLENBQUM7QUFFRCx1RUFBdUU7QUFDdkUsNkRBQTZEO0FBQzdELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsWUFBbUMsRUFBMEIsRUFBRTtJQUMvRixJQUFJLENBQUMsWUFBWSxJQUFJLE9BQU8sWUFBWSxDQUFDLGdCQUFnQixLQUFLLFVBQVUsRUFBRTtRQUN4RSxJQUFJLGVBQWUsRUFBRSxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsWUFBWSxHQUFHLHlEQUF5RCxDQUFDLENBQUM7U0FDbkg7UUFDRCxPQUFPLEtBQUssRUFBRSxDQUFDO0tBQ2hCO0lBQ0QsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6RCxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUVELE1BQU0sVUFBVSxHQUFzQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBd0IsRUFBRSxFQUFFO1FBQ25GLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMzQixNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RCxNQUFNLE9BQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ2xELFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNELE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QyxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM1QyxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbXB0eSwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2FtcGxlVGltZSwgc2hhcmUsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGlzV2luZG93RGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBzY3JvbGxMaXN0ZW5lcnMgPSBuZXcgV2Vha01hcDxhbnksIE9ic2VydmFibGU8YW55Pj4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNhbXBsZU9ic2VydmFibGU8VD4ob2JzOiBPYnNlcnZhYmxlPFQ+LCBzY2hlZHVsZXI/OiBhbnkpOiBPYnNlcnZhYmxlPFQgfCAnJz4ge1xuICByZXR1cm4gb2JzLnBpcGUoXG4gICAgc2FtcGxlVGltZSgxMDAsIHNjaGVkdWxlciksXG4gICAgc2hhcmUoKSxcbiAgICBzdGFydFdpdGgoJycpXG4gICk7XG59XG5cbi8vIE9ubHkgY3JlYXRlIG9uZSBzY3JvbGwgbGlzdGVuZXIgcGVyIHRhcmdldCBhbmQgc2hhcmUgdGhlIG9ic2VydmFibGUuXG4vLyBUeXBpY2FsLCB0aGVyZSB3aWxsIG9ubHkgYmUgb25lIG9ic2VydmFibGUgcGVyIGFwcGxpY2F0aW9uXG5leHBvcnQgY29uc3QgZ2V0U2Nyb2xsTGlzdGVuZXIgPSAoc2Nyb2xsVGFyZ2V0PzogSFRNTEVsZW1lbnQgfCBXaW5kb3cpOiBPYnNlcnZhYmxlPEV2ZW50IHwgJyc+ID0+IHtcbiAgaWYgKCFzY3JvbGxUYXJnZXQgfHwgdHlwZW9mIHNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGlzV2luZG93RGVmaW5lZCgpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2BhZGRFdmVudExpc3RlbmVyYCBvbiAnICsgc2Nyb2xsVGFyZ2V0ICsgJyAoc2Nyb2xsVGFyZ2V0KSBpcyBub3QgYSBmdW5jdGlvbi4gU2tpcHBpbmcgdGhpcyB0YXJnZXQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGVtcHR5KCk7XG4gIH1cbiAgY29uc3Qgc2Nyb2xsTGlzdGVuZXIgPSBzY3JvbGxMaXN0ZW5lcnMuZ2V0KHNjcm9sbFRhcmdldCk7XG4gIGlmIChzY3JvbGxMaXN0ZW5lcikge1xuICAgIHJldHVybiBzY3JvbGxMaXN0ZW5lcjtcbiAgfVxuXG4gIGNvbnN0IHNyb2xsRXZlbnQ6IE9ic2VydmFibGU8RXZlbnQ+ID0gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyOiBTdWJqZWN0PEV2ZW50PikgPT4ge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9ICdzY3JvbGwnO1xuICAgIGNvbnN0IGhhbmRsZXIgPSAoZXZlbnQ6IEV2ZW50KSA9PiBvYnNlcnZlci5uZXh0KGV2ZW50KTtcbiAgICBjb25zdCBvcHRpb25zID0geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9O1xuICAgIHNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHNjcm9sbFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gIH0pO1xuXG4gIGNvbnN0IGxpc3RlbmVyID0gc2FtcGxlT2JzZXJ2YWJsZShzcm9sbEV2ZW50KTtcbiAgc2Nyb2xsTGlzdGVuZXJzLnNldChzY3JvbGxUYXJnZXQsIGxpc3RlbmVyKTtcbiAgcmV0dXJuIGxpc3RlbmVyO1xufTtcbiJdfQ==