export function isWindowDefined() {
    return typeof window !== 'undefined';
}
export function isChildOfPicture(element) {
    return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');
}
export function isImageElement(element) {
    return element.nodeName.toLowerCase() === 'img';
}
export function setImage(element, imagePath, useSrcset) {
    if (isImageElement(element)) {
        if (useSrcset) {
            element.srcset = imagePath;
        }
        else {
            element.src = imagePath;
        }
    }
    else {
        element.style.backgroundImage = `url('${imagePath}')`;
    }
    return element;
}
function setSources(attrName) {
    return (image) => {
        const sources = image.parentElement.getElementsByTagName('source');
        for (let i = 0; i < sources.length; i++) {
            const attrValue = sources[i].getAttribute(attrName);
            if (attrValue) {
                sources[i].srcset = attrValue;
            }
        }
    };
}
const setSourcesToDefault = setSources('defaultImage');
export const setSourcesToLazy = setSources('lazyLoad');
const setSourcesToError = setSources('errorImage');
function setImageAndSources(setSourcesFn) {
    return (element, imagePath, useSrcset) => {
        if (isImageElement(element) && isChildOfPicture(element)) {
            setSourcesFn(element);
        }
        if (imagePath) {
            setImage(element, imagePath, useSrcset);
        }
    };
}
export const setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);
export const setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);
export const setImageAndSourcesToError = setImageAndSources(setSourcesToError);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxhenlsb2FkLWltYWdlLyIsInNvdXJjZXMiOlsic3JjL3V0aWwvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsZUFBZTtJQUM3QixPQUFPLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUN2QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLE9BQTBDO0lBQ3pFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUM7QUFDdEcsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsT0FBMEM7SUFDdkUsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssQ0FBQztBQUNsRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxPQUEwQyxFQUFFLFNBQWlCLEVBQUUsU0FBbUI7SUFDekcsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDM0IsSUFBSSxTQUFTLEVBQUU7WUFDYixPQUFPLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztTQUM1QjthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7U0FDekI7S0FDRjtTQUFNO1FBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsUUFBUSxTQUFTLElBQUksQ0FBQztLQUN2RDtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxRQUFnQjtJQUNsQyxPQUFPLENBQUMsS0FBdUIsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxhQUFjLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwRCxJQUFJLFNBQVMsRUFBRTtnQkFDYixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQzthQUMvQjtTQUNGO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN2RCxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUVuRCxTQUFTLGtCQUFrQixDQUFDLFlBQStDO0lBQ3pFLE9BQU8sQ0FBQyxPQUEwQyxFQUFFLFNBQWtCLEVBQUUsU0FBbUIsRUFBRSxFQUFFO1FBQzdGLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3hELFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2QjtRQUNELElBQUksU0FBUyxFQUFFO1lBQ2IsUUFBUSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNuRixNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzdFLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNXaW5kb3dEZWZpbmVkKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NoaWxkT2ZQaWN0dXJlKGVsZW1lbnQ6IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MRGl2RWxlbWVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gQm9vbGVhbihlbGVtZW50LnBhcmVudEVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnRFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdwaWN0dXJlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ltYWdlRWxlbWVudChlbGVtZW50OiBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTERpdkVsZW1lbnQpOiBlbGVtZW50IGlzIEhUTUxJbWFnZUVsZW1lbnQge1xuICByZXR1cm4gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW1nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEltYWdlKGVsZW1lbnQ6IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MRGl2RWxlbWVudCwgaW1hZ2VQYXRoOiBzdHJpbmcsIHVzZVNyY3NldD86IGJvb2xlYW4pIHtcbiAgaWYgKGlzSW1hZ2VFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgaWYgKHVzZVNyY3NldCkge1xuICAgICAgZWxlbWVudC5zcmNzZXQgPSBpbWFnZVBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc3JjID0gaW1hZ2VQYXRoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJyR7aW1hZ2VQYXRofScpYDtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gc2V0U291cmNlcyhhdHRyTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiAoaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBzb3VyY2VzID0gaW1hZ2UucGFyZW50RWxlbWVudCEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYXR0clZhbHVlID0gc291cmNlc1tpXS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgaWYgKGF0dHJWYWx1ZSkge1xuICAgICAgICBzb3VyY2VzW2ldLnNyY3NldCA9IGF0dHJWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IHNldFNvdXJjZXNUb0RlZmF1bHQgPSBzZXRTb3VyY2VzKCdkZWZhdWx0SW1hZ2UnKTtcbmV4cG9ydCBjb25zdCBzZXRTb3VyY2VzVG9MYXp5ID0gc2V0U291cmNlcygnbGF6eUxvYWQnKTtcbmNvbnN0IHNldFNvdXJjZXNUb0Vycm9yID0gc2V0U291cmNlcygnZXJyb3JJbWFnZScpO1xuXG5mdW5jdGlvbiBzZXRJbWFnZUFuZFNvdXJjZXMoc2V0U291cmNlc0ZuOiAoaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQpID0+IHZvaWQpIHtcbiAgcmV0dXJuIChlbGVtZW50OiBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTERpdkVsZW1lbnQsIGltYWdlUGF0aD86IHN0cmluZywgdXNlU3Jjc2V0PzogYm9vbGVhbikgPT4ge1xuICAgIGlmIChpc0ltYWdlRWxlbWVudChlbGVtZW50KSAmJiBpc0NoaWxkT2ZQaWN0dXJlKGVsZW1lbnQpKSB7XG4gICAgICBzZXRTb3VyY2VzRm4oZWxlbWVudCk7XG4gICAgfVxuICAgIGlmIChpbWFnZVBhdGgpIHtcbiAgICAgIHNldEltYWdlKGVsZW1lbnQsIGltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHQgPSBzZXRJbWFnZUFuZFNvdXJjZXMoc2V0U291cmNlc1RvRGVmYXVsdCk7XG5leHBvcnQgY29uc3Qgc2V0SW1hZ2VBbmRTb3VyY2VzVG9MYXp5ID0gc2V0SW1hZ2VBbmRTb3VyY2VzKHNldFNvdXJjZXNUb0xhenkpO1xuZXhwb3J0IGNvbnN0IHNldEltYWdlQW5kU291cmNlc1RvRXJyb3IgPSBzZXRJbWFnZUFuZFNvdXJjZXMoc2V0U291cmNlc1RvRXJyb3IpO1xuIl19