import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { ReplaySubject, Observable } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { cretateHooks } from './hooks-factory';
import { lazyLoadImage } from './lazyload-image';
let LazyLoadImageDirective = class LazyLoadImageDirective {
    constructor(el, ngZone, platformId, options) {
        this.onLoad = new EventEmitter(); // Callback when an image is loaded
        this.elementRef = el;
        this.ngZone = ngZone;
        this.propertyChanges$ = new ReplaySubject();
        this.platformId = platformId;
        this.hooks = cretateHooks(options);
    }
    ngOnChanges() {
        this.propertyChanges$.next({
            element: this.elementRef.nativeElement,
            imagePath: this.lazyImage,
            defaultImagePath: this.defaultImage,
            errorImagePath: this.errorImage,
            useSrcset: this.useSrcset,
            offset: this.offset ? this.offset | 0 : 0,
            scrollContainer: this.scrollTarget,
            scrollObservable: this.scrollObservable
        });
    }
    ngAfterContentInit() {
        // Disable lazy load image in server side
        if (isPlatformServer(this.platformId)) {
            return null;
        }
        this.ngZone.runOutsideAngular(() => {
            this.scrollSubscription = this.propertyChanges$
                .pipe(tap(attributes => this.hooks.setup(attributes)), switchMap(attributes => this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes))))
                .subscribe(success => this.onLoad.emit(success));
        });
    }
    ngOnDestroy() {
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
    }
};
tslib_1.__decorate([
    Input('lazyLoad'),
    tslib_1.__metadata("design:type", String)
], LazyLoadImageDirective.prototype, "lazyImage", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LazyLoadImageDirective.prototype, "defaultImage", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LazyLoadImageDirective.prototype, "errorImage", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LazyLoadImageDirective.prototype, "scrollTarget", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Observable)
], LazyLoadImageDirective.prototype, "scrollObservable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LazyLoadImageDirective.prototype, "offset", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LazyLoadImageDirective.prototype, "useSrcset", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LazyLoadImageDirective.prototype, "onLoad", void 0);
LazyLoadImageDirective = tslib_1.__decorate([
    Directive({
        selector: '[lazyLoad]'
    }),
    tslib_1.__param(2, Inject(PLATFORM_ID)), tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject('options')),
    tslib_1.__metadata("design:paramtypes", [ElementRef, NgZone, Object, Object])
], LazyLoadImageDirective);
export { LazyLoadImageDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eWxvYWQtaW1hZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvbGF6eWxvYWQtaW1hZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQW9CLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUF3QixRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsSyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDL0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTWpELElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBZ0JqQyxZQUFZLEVBQWMsRUFBRSxNQUFjLEVBQXVCLFVBQWtCLEVBQWlDLE9BQXVCO1FBUmpJLFdBQU0sR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFDLG1DQUFtQztRQVMvRixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7WUFDekIsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYTtZQUN0QyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDbkMsY0FBYyxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQy9CLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekMsZUFBZSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ2xDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDeEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtCQUFrQjtRQUNoQix5Q0FBeUM7UUFDekMsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCO2lCQUM1QyxJQUFJLENBQ0gsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDL0MsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FDMUc7aUJBQ0EsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQztDQUNGLENBQUE7QUF6RG9CO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7O3lEQUFvQjtBQUM3QjtJQUFSLEtBQUssRUFBRTs7NERBQXVCO0FBQ3RCO0lBQVIsS0FBSyxFQUFFOzswREFBcUI7QUFDcEI7SUFBUixLQUFLLEVBQUU7OzREQUFvQjtBQUNuQjtJQUFSLEtBQUssRUFBRTtzQ0FBb0IsVUFBVTtnRUFBTTtBQUNuQztJQUFSLEtBQUssRUFBRTs7c0RBQWlCO0FBQ2hCO0lBQVIsS0FBSyxFQUFFOzt5REFBcUI7QUFDbkI7SUFBVCxNQUFNLEVBQUU7c0NBQVMsWUFBWTtzREFBK0I7QUFSbEQsc0JBQXNCO0lBSGxDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxZQUFZO0tBQ3ZCLENBQUM7SUFpQjZDLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQSxFQUFzQixtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTs2Q0FBbkcsVUFBVSxFQUFVLE1BQU0sRUFBbUMsTUFBTTtHQWhCeEUsc0JBQXNCLENBMERsQztTQTFEWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbnB1dCwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT3B0aW9uYWwsIE91dHB1dCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGNyZXRhdGVIb29rcyB9IGZyb20gJy4vaG9va3MtZmFjdG9yeSc7XG5pbXBvcnQgeyBsYXp5TG9hZEltYWdlIH0gZnJvbSAnLi9sYXp5bG9hZC1pbWFnZSc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVzLCBIb29rU2V0LCBNb2R1bGVPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tsYXp5TG9hZF0nXG59KVxuZXhwb3J0IGNsYXNzIExhenlMb2FkSW1hZ2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgnbGF6eUxvYWQnKSBsYXp5SW1hZ2UhOiBzdHJpbmc7IC8vIFRoZSBpbWFnZSB0byBiZSBsYXp5IGxvYWRlZFxuICBASW5wdXQoKSBkZWZhdWx0SW1hZ2U/OiBzdHJpbmc7IC8vIFRoZSBpbWFnZSB0byBiZSBkaXNwbGF5ZWQgYmVmb3JlIGxhenlJbWFnZSBpcyBsb2FkZWRcbiAgQElucHV0KCkgZXJyb3JJbWFnZT86IHN0cmluZzsgLy8gVGhlIGltYWdlIHRvIGJlIGRpc3BsYXllZCBpZiBsYXp5SW1hZ2UgbG9hZCBmYWlsc1xuICBASW5wdXQoKSBzY3JvbGxUYXJnZXQ/OiBhbnk7IC8vIFNjcm9sbCBjb250YWluZXIgdGhhdCBjb250YWlucyB0aGUgaW1hZ2UgYW5kIGVtaXRzIHNjb2xsIGV2ZW50c1xuICBASW5wdXQoKSBzY3JvbGxPYnNlcnZhYmxlPzogT2JzZXJ2YWJsZTxhbnk+OyAvLyBQYXNzIHlvdXIgb3duIHNjcm9sbCBlbWl0dGVyXG4gIEBJbnB1dCgpIG9mZnNldD86IG51bWJlcjsgLy8gVGhlIG51bWJlciBvZiBweCBhIGltYWdlIHNob3VsZCBiZSBsb2FkZWQgYmVmb3JlIGl0IGlzIGluIHZpZXcgcG9ydFxuICBASW5wdXQoKSB1c2VTcmNzZXQ/OiBib29sZWFuOyAvLyBXaGV0aGVyIHNyY3NldCBhdHRyaWJ1dGUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBvZiBzcmNcbiAgQE91dHB1dCgpIG9uTG9hZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpOyAvLyBDYWxsYmFjayB3aGVuIGFuIGltYWdlIGlzIGxvYWRlZFxuICBwcml2YXRlIHByb3BlcnR5Q2hhbmdlcyQ6IFJlcGxheVN1YmplY3Q8QXR0cmlidXRlcz47XG4gIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZTtcbiAgcHJpdmF0ZSBzY3JvbGxTdWJzY3JpcHRpb24/OiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgaG9va3M6IEhvb2tTZXQ8YW55PjtcbiAgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QsIEBPcHRpb25hbCgpIEBJbmplY3QoJ29wdGlvbnMnKSBvcHRpb25zPzogTW9kdWxlT3B0aW9ucykge1xuICAgIHRoaXMuZWxlbWVudFJlZiA9IGVsO1xuICAgIHRoaXMubmdab25lID0gbmdab25lO1xuICAgIHRoaXMucHJvcGVydHlDaGFuZ2VzJCA9IG5ldyBSZXBsYXlTdWJqZWN0KCk7XG4gICAgdGhpcy5wbGF0Zm9ybUlkID0gcGxhdGZvcm1JZDtcbiAgICB0aGlzLmhvb2tzID0gY3JldGF0ZUhvb2tzKG9wdGlvbnMpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5wcm9wZXJ0eUNoYW5nZXMkLm5leHQoe1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICBpbWFnZVBhdGg6IHRoaXMubGF6eUltYWdlLFxuICAgICAgZGVmYXVsdEltYWdlUGF0aDogdGhpcy5kZWZhdWx0SW1hZ2UsXG4gICAgICBlcnJvckltYWdlUGF0aDogdGhpcy5lcnJvckltYWdlLFxuICAgICAgdXNlU3Jjc2V0OiB0aGlzLnVzZVNyY3NldCxcbiAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQgPyB0aGlzLm9mZnNldCB8IDAgOiAwLFxuICAgICAgc2Nyb2xsQ29udGFpbmVyOiB0aGlzLnNjcm9sbFRhcmdldCxcbiAgICAgIHNjcm9sbE9ic2VydmFibGU6IHRoaXMuc2Nyb2xsT2JzZXJ2YWJsZVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8vIERpc2FibGUgbGF6eSBsb2FkIGltYWdlIGluIHNlcnZlciBzaWRlXG4gICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5zY3JvbGxTdWJzY3JpcHRpb24gPSB0aGlzLnByb3BlcnR5Q2hhbmdlcyRcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgdGFwKGF0dHJpYnV0ZXMgPT4gdGhpcy5ob29rcy5zZXR1cChhdHRyaWJ1dGVzKSksXG4gICAgICAgICAgc3dpdGNoTWFwKGF0dHJpYnV0ZXMgPT4gdGhpcy5ob29rcy5nZXRPYnNlcnZhYmxlKGF0dHJpYnV0ZXMpLnBpcGUobGF6eUxvYWRJbWFnZSh0aGlzLmhvb2tzLCBhdHRyaWJ1dGVzKSkpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZShzdWNjZXNzID0+IHRoaXMub25Mb2FkLmVtaXQoc3VjY2VzcykpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc2Nyb2xsU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnNjcm9sbFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19