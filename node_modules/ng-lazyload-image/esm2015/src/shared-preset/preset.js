import { cssClassNames, hasCssClassName, removeCssClassName, addCssClassName, isImageElement, isChildOfPicture, setSourcesToLazy, setImage, setImageAndSourcesToError, setImageAndSourcesToLazy, setImageAndSourcesToDefault } from '../util';
const end = ({ element }) => addCssClassName(element, cssClassNames.loaded);
const ɵ0 = end;
export const loadImage = ({ element, useSrcset, imagePath }) => {
    let img;
    if (isImageElement(element) && isChildOfPicture(element)) {
        const parentClone = element.parentNode.cloneNode(true);
        img = parentClone.getElementsByTagName('img')[0];
        setSourcesToLazy(img);
        setImage(img, imagePath, useSrcset);
    }
    else {
        img = new Image();
        if (isImageElement(element) && element.sizes) {
            img.sizes = element.sizes;
        }
        if (useSrcset) {
            img.srcset = imagePath;
        }
        else {
            img.src = imagePath;
        }
    }
    if (img.decode) {
        return img.decode().then(() => imagePath);
    }
    return new Promise((resolve, reject) => {
        img.onload = () => resolve(imagePath);
        img.onerror = () => reject(null);
    });
};
const setErrorImage = ({ element, errorImagePath, useSrcset }) => {
    setImageAndSourcesToError(element, errorImagePath, useSrcset);
    addCssClassName(element, cssClassNames.failed);
};
const ɵ1 = setErrorImage;
const setLoadedImage = ({ element, imagePath, useSrcset }) => {
    setImageAndSourcesToLazy(element, imagePath, useSrcset);
};
const ɵ2 = setLoadedImage;
const setup = ({ element, defaultImagePath, useSrcset }) => {
    setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);
    if (hasCssClassName(element, cssClassNames.loaded)) {
        removeCssClassName(element, cssClassNames.loaded);
    }
};
const ɵ3 = setup;
export const sharedPreset = {
    finally: end,
    loadImage,
    setErrorImage,
    setLoadedImage,
    setup
};
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2hhcmVkLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLGFBQWEsRUFDYixlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLGVBQWUsRUFDZixjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4QiwyQkFBMkIsRUFDNUIsTUFBTSxTQUFTLENBQUM7QUFHakIsTUFBTSxHQUFHLEdBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdkYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO0lBQzFFLElBQUksR0FBcUIsQ0FBQztJQUMxQixJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN4RCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsVUFBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQXVCLENBQUM7UUFDOUUsR0FBRyxHQUFHLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixRQUFRLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztLQUNyQztTQUFNO1FBQ0wsR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDbEIsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUM1QyxHQUFHLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7U0FDM0I7UUFDRCxJQUFJLFNBQVMsRUFBRTtZQUNiLEdBQUcsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQ3hCO2FBQU07WUFDTCxHQUFHLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQztTQUNyQjtLQUNGO0lBRUQsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO1FBQ2QsT0FBTyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzNDO0lBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFvQixDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO0lBQ2hGLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDOztBQUVGLE1BQU0sY0FBYyxHQUFxQixDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFO0lBQzdFLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDOztBQUVGLE1BQU0sS0FBSyxHQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtJQUNsRSwyQkFBMkIsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFbEUsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNsRCxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ25EO0FBQ0gsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRztJQUMxQixPQUFPLEVBQUUsR0FBRztJQUNaLFNBQVM7SUFDVCxhQUFhO0lBQ2IsY0FBYztJQUNkLEtBQUs7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgY3NzQ2xhc3NOYW1lcyxcbiAgaGFzQ3NzQ2xhc3NOYW1lLFxuICByZW1vdmVDc3NDbGFzc05hbWUsXG4gIGFkZENzc0NsYXNzTmFtZSxcbiAgaXNJbWFnZUVsZW1lbnQsXG4gIGlzQ2hpbGRPZlBpY3R1cmUsXG4gIHNldFNvdXJjZXNUb0xhenksXG4gIHNldEltYWdlLFxuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0Vycm9yLFxuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0xhenksXG4gIHNldEltYWdlQW5kU291cmNlc1RvRGVmYXVsdFxufSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IEZpbmFsbHlGbiwgTG9hZEltYWdlRm4sIFNldEVycm9ySW1hZ2VGbiwgU2V0TG9hZGVkSW1hZ2VGbiwgU2V0dXBGbiB9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgZW5kOiBGaW5hbGx5Rm4gPSAoeyBlbGVtZW50IH0pID0+IGFkZENzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCk7XG5cbmV4cG9ydCBjb25zdCBsb2FkSW1hZ2U6IExvYWRJbWFnZUZuID0gKHsgZWxlbWVudCwgdXNlU3Jjc2V0LCBpbWFnZVBhdGggfSkgPT4ge1xuICBsZXQgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xuICBpZiAoaXNJbWFnZUVsZW1lbnQoZWxlbWVudCkgJiYgaXNDaGlsZE9mUGljdHVyZShlbGVtZW50KSkge1xuICAgIGNvbnN0IHBhcmVudENsb25lID0gZWxlbWVudC5wYXJlbnROb2RlIS5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTFBpY3R1cmVFbGVtZW50O1xuICAgIGltZyA9IHBhcmVudENsb25lLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKVswXTtcbiAgICBzZXRTb3VyY2VzVG9MYXp5KGltZyk7XG4gICAgc2V0SW1hZ2UoaW1nLCBpbWFnZVBhdGgsIHVzZVNyY3NldCk7XG4gIH0gZWxzZSB7XG4gICAgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaWYgKGlzSW1hZ2VFbGVtZW50KGVsZW1lbnQpICYmIGVsZW1lbnQuc2l6ZXMpIHtcbiAgICAgIGltZy5zaXplcyA9IGVsZW1lbnQuc2l6ZXM7XG4gICAgfVxuICAgIGlmICh1c2VTcmNzZXQpIHtcbiAgICAgIGltZy5zcmNzZXQgPSBpbWFnZVBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGltZy5zcmMgPSBpbWFnZVBhdGg7XG4gICAgfVxuICB9XG5cbiAgaWYgKGltZy5kZWNvZGUpIHtcbiAgICByZXR1cm4gaW1nLmRlY29kZSgpLnRoZW4oKCkgPT4gaW1hZ2VQYXRoKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoaW1hZ2VQYXRoKTtcbiAgICBpbWcub25lcnJvciA9ICgpID0+IHJlamVjdChudWxsKTtcbiAgfSk7XG59O1xuXG5jb25zdCBzZXRFcnJvckltYWdlOiBTZXRFcnJvckltYWdlRm4gPSAoeyBlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0IH0pID0+IHtcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9FcnJvcihlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcbiAgYWRkQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMuZmFpbGVkKTtcbn07XG5cbmNvbnN0IHNldExvYWRlZEltYWdlOiBTZXRMb2FkZWRJbWFnZUZuID0gKHsgZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0xhenkoZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xufTtcblxuY29uc3Qgc2V0dXA6IFNldHVwRm4gPSAoeyBlbGVtZW50LCBkZWZhdWx0SW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHQoZWxlbWVudCwgZGVmYXVsdEltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcblxuICBpZiAoaGFzQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGVkKSkge1xuICAgIHJlbW92ZUNzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzaGFyZWRQcmVzZXQgPSB7XG4gIGZpbmFsbHk6IGVuZCxcbiAgbG9hZEltYWdlLFxuICBzZXRFcnJvckltYWdlLFxuICBzZXRMb2FkZWRJbWFnZSxcbiAgc2V0dXBcbn07XG4iXX0=