/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { mixinDisableRipple } from '@angular/material';
import { MatTimeUnitSelectComponent } from './time-unit-select.component';
var MatTimeUnitOptionBase = /** @class */ (function () {
    function MatTimeUnitOptionBase() {
    }
    return MatTimeUnitOptionBase;
}());
export { MatTimeUnitOptionBase };
/** @type {?} */
export var _MatTimeUnitOptionMixinBase = mixinDisableRipple(MatTimeUnitOptionBase);
/**
 * Single time option inside a `<mat-time-unit-select>` element
 * @template D
 */
var MatTimeUnitOptionComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MatTimeUnitOptionComponent, _super);
    function MatTimeUnitOptionComponent(_elementRef, _changeDetectorRef, timeUnitSelect) {
        var _this = _super.call(this) || this;
        _this._elementRef = _elementRef;
        _this._changeDetectorRef = _changeDetectorRef;
        _this.timeUnitSelect = timeUnitSelect;
        _this._disabled = false;
        _this._selected = false;
        /**
         * \@docs-private
         */
        _this.class = 'mat-time-unit-option';
        /**
         * \@docs-private
         */
        _this.role = 'option';
        /**
         * \@docs-private
         */
        _this.tabindex = -1;
        return _this;
    }
    Object.defineProperty(MatTimeUnitOptionComponent.prototype, "selected", {
        /** Whether or not the option is currently selected. */
        get: /**
         * Whether or not the option is currently selected.
         * @return {?}
         */
        function () { return this._selected; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var selected = coerceBooleanProperty(value);
            if (this._selected !== selected) {
                this._selected = selected;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeUnitOptionComponent.prototype, "disabled", {
        /** Whether the option is disabled. */
        get: /**
         * Whether the option is disabled.
         * @return {?}
         */
        function () { return this._disabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var disabled = coerceBooleanProperty(value);
            if (this._disabled !== disabled) {
                this._disabled = disabled;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeUnitOptionComponent.prototype, "ariaDisabled", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.disabled.toString(); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatTimeUnitOptionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.timeUnitSelect.valueChange.subscribe(function (value) { return _this.selected = _this.value === value; });
    };
    /** Gets the label to be used when determining whether the option should be focused. */
    /**
     * Gets the label to be used when determining whether the option should be focused.
     * @return {?}
     */
    MatTimeUnitOptionComponent.prototype.getLabel = /**
     * Gets the label to be used when determining whether the option should be focused.
     * @return {?}
     */
    function () {
        return this._text ? (this._text.nativeElement.textContent || '').trim() : '';
    };
    /** Gets the host DOM element. */
    /**
     * Gets the host DOM element.
     * @return {?}
     */
    MatTimeUnitOptionComponent.prototype._getHostElement = /**
     * Gets the host DOM element.
     * @return {?}
     */
    function () {
        return this._elementRef.nativeElement;
    };
    /** Whether ripples for the option are disabled. */
    /**
     * Whether ripples for the option are disabled.
     * @return {?}
     */
    MatTimeUnitOptionComponent.prototype._isRippleDisabled = /**
     * Whether ripples for the option are disabled.
     * @return {?}
     */
    function () {
        return this.disabled || this.disableRipple;
    };
    /** Handle click on the option. */
    /**
     * Handle click on the option.
     * @return {?}
     */
    MatTimeUnitOptionComponent.prototype._onClick = /**
     * Handle click on the option.
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.timeUnitSelect.move(this.value - this.timeUnitSelect.value);
        }
    };
    MatTimeUnitOptionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-time-unit-option',
                    template: "<div class=\"mat-time-unit-option-content\">\r\n  <div mat-ripple\r\n       class=\"mat-time-unit-option-ripple\"\r\n       [matRippleTrigger]=\"_getHostElement()\"\r\n       [matRippleDisabled]=\"_isRippleDisabled()\"></div>\r\n  <div #text class=\"mat-time-unit-option-text\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".mat-time-unit-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;-webkit-transform:scale(1,1);transform:scale(1,1);transition:transform .5s;transition:transform .5s,-webkit-transform .5s}.mat-time-unit-option .mat-time-unit-option-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-time-unit-option .mat-time-unit-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-time-unit-option .mat-time-unit-option-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0;text-align:center}.mat-time-unit-option .mat-time-unit-option-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-time-unit-option .mat-time-unit-option-text:empty{display:none}.mat-time-unit-option:not(.mat-time-unit-option-disabled){cursor:pointer;outline:0}.mat-time-unit-option.mat-time-unit-option-selected:not(.mat-time-unit-option-disabled),.mat-time-unit-separator{-webkit-transform:scale(1.5,1.5);transform:scale(1.5,1.5)}"]
                }] }
    ];
    /** @nocollapse */
    MatTimeUnitOptionComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: MatTimeUnitSelectComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return MatTimeUnitSelectComponent; }),] }] }
    ]; };
    MatTimeUnitOptionComponent.propDecorators = {
        value: [{ type: Input }],
        disableRipple: [{ type: Input }],
        _text: [{ type: ViewChild, args: ['text',] }],
        class: [{ type: HostBinding, args: ['class',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        selected: [{ type: Input }, { type: HostBinding, args: ['class.mat-time-unit-option-selected',] }],
        disabled: [{ type: Input }, { type: HostBinding, args: ['class.mat-time-unit-option-disabled',] }],
        ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],
        _onClick: [{ type: HostListener, args: ['click',] }]
    };
    return MatTimeUnitOptionComponent;
}(_MatTimeUnitOptionMixinBase));
export { MatTimeUnitOptionComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatTimeUnitOptionComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    MatTimeUnitOptionComponent.prototype._selected;
    /**
     * The value of the option.
     * @type {?}
     */
    MatTimeUnitOptionComponent.prototype.value;
    /**
     * Whether ripples for the option are disabled.
     * @type {?}
     */
    MatTimeUnitOptionComponent.prototype.disableRipple;
    /**
     * The element containing the display text of the option.
     * @type {?}
     */
    MatTimeUnitOptionComponent.prototype._text;
    /**
     * \@docs-private
     * @type {?}
     */
    MatTimeUnitOptionComponent.prototype.class;
    /**
     * \@docs-private
     * @type {?}
     */
    MatTimeUnitOptionComponent.prototype.role;
    /**
     * \@docs-private
     * @type {?}
     */
    MatTimeUnitOptionComponent.prototype.tabindex;
    /**
     * @type {?}
     * @private
     */
    MatTimeUnitOptionComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    MatTimeUnitOptionComponent.prototype._changeDetectorRef;
    /** @type {?} */
    MatTimeUnitOptionComponent.prototype.timeUnitSelect;
}
//# sourceMappingURL=data:application/json;base64,