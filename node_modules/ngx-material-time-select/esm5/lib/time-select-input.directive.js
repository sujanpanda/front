/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, Optional, Output } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW } from '@angular/cdk/keycodes';
import { MAT_INPUT_VALUE_ACCESSOR, MatFormField } from '@angular/material';
import { Subject, Subscription } from 'rxjs';
import { TimeAdapter } from './time-adapter.service';
import { MAT_TIME_FORMATS } from './time-formats';
import { MatTimeSelectComponent } from './time-select.component';
/**
 * An event used for time select input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use MatTimeSelectInputEvent instead.
 * @template D
 */
var /**
 * An event used for time select input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use MatTimeSelectInputEvent instead.
 * @template D
 */
MatTimeSelectInputEvent = /** @class */ (function () {
    function MatTimeSelectInputEvent(target, targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
    return MatTimeSelectInputEvent;
}());
/**
 * An event used for time select input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use MatTimeSelectInputEvent instead.
 * @template D
 */
export { MatTimeSelectInputEvent };
if (false) {
    /**
     * The new value for the target time select input.
     * @type {?}
     */
    MatTimeSelectInputEvent.prototype.value;
    /**
     * Reference to the time select input component that emitted the event.
     * @type {?}
     */
    MatTimeSelectInputEvent.prototype.target;
    /**
     * Reference to the native input element associated with the time select input.
     * @type {?}
     */
    MatTimeSelectInputEvent.prototype.targetElement;
}
/**
 * Directive used to connect an input to a MatTimeSelectComponent.
 * @template D
 */
var MatTimeSelectInputDirective = /** @class */ (function () {
    function MatTimeSelectInputDirective(_elementRef, _timeAdapter, _timeFormats, _formField) {
        var _this = this;
        this._elementRef = _elementRef;
        this._timeAdapter = _timeAdapter;
        this._timeFormats = _timeFormats;
        this._formField = _formField;
        this._timeSelectSubscription = Subscription.EMPTY;
        this._localeSubscription = Subscription.EMPTY;
        this._valueChange = new Subject();
        this._disabledChange = new Subject();
        /**
         * Emits when a `change` event is fired on this `<input>`.
         */
        this.timeChange = new EventEmitter();
        /**
         * Emits when an `input` event is fired on this `<input>`.
         */
        this.timeInput = new EventEmitter();
        /**
         * Emits when the value changes (either due to user input or programmatic change).
         */
        this.valueChange = this._valueChange.asObservable();
        /**
         * Emits when the disabled state has changed.
         */
        this.disabledChange = this._disabledChange.asObservable();
        this._onChange = function () { };
        this._onTouched = function () { };
        this._onValidatorChange = function () { };
        this._parseValidator = function () {
            return _this._lastValueValid ? null : { 'matTimeSelectParse': { 'text': _this._elementRef.nativeElement.value } };
        };
        this._minValidator = function (control) {
            /** @type {?} */
            var value = _this._getValidDateOrNull(_this._timeAdapter.deserialize(control.value));
            return !_this.min || !value || _this._timeAdapter.compareTime(_this.min, value) <= 0 ?
                null : { 'matTimeSelectMin': { 'min': _this.min, 'actual': value } };
        };
        this._maxValidator = function (control) {
            /** @type {?} */
            var value = _this._getValidDateOrNull(_this._timeAdapter.deserialize(control.value));
            return !_this.max || !value || _this._timeAdapter.compareTime(_this.max, value) >= 0 ?
                null : { 'matTimeSelectMax': { 'max': _this.max, 'actual': value } };
        };
        this._validator = Validators.compose([
            this._parseValidator,
            this._minValidator,
            this._maxValidator
        ]);
        this._localeSubscription = this._timeAdapter.localeChanges.subscribe(function () { return _this.value = _this.value; });
    }
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "matTimeSelect", {
        /** The time select that this input is associated with. */
        set: /**
         * The time select that this input is associated with.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (!value) {
                return;
            }
            this._timeSelect = value;
            this._timeSelect.registerInput(this);
            this._timeSelectSubscription.unsubscribe();
            this._timeSelectSubscription = this._timeSelect.selectedChange.subscribe(function (selected) {
                _this.value = selected;
                _this._onChange(selected);
                _this._onTouched();
                _this.timeInput.emit(new MatTimeSelectInputEvent(_this, _this._elementRef.nativeElement));
                _this.timeChange.emit(new MatTimeSelectInputEvent(_this, _this._elementRef.nativeElement));
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "value", {
        /** The value of the input. */
        get: /**
         * The value of the input.
         * @return {?}
         */
        function () { return this._value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = this._timeAdapter.deserialize(value);
            this._lastValueValid = !value || this._timeAdapter.isValid(value);
            value = this._getValidDateOrNull(value);
            /** @type {?} */
            var oldValue = this._value;
            this._value = value;
            this._formatValue(value);
            if (!this._timeAdapter.sameTime(oldValue, value)) {
                this._valueChange.next(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "min", {
        /** The minimum valid date time. */
        get: /**
         * The minimum valid date time.
         * @return {?}
         */
        function () { return this._min; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = this._getValidDateOrNull(this._timeAdapter.deserialize(value));
            this._onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "max", {
        /** The maximum valid date time. */
        get: /**
         * The maximum valid date time.
         * @return {?}
         */
        function () { return this._max; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = this._getValidDateOrNull(this._timeAdapter.deserialize(value));
            this._onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "disabled", {
        /** Whether the time select input is disabled. */
        get: /**
         * Whether the time select input is disabled.
         * @return {?}
         */
        function () { return this._disabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var disabled = coerceBooleanProperty(value);
            /** @type {?} */
            var element = this._elementRef.nativeElement;
            if (this.disabled !== disabled) {
                this._disabled = disabled;
                this._disabledChange.next(disabled);
            }
            if (disabled && element.blur) {
                element.blur();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "_ariaHasPopup", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return true; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "_ariaOwns", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return (this._timeSelect && this._timeSelect.opened && !!this._timeSelect.id) || null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "_minTime", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.min ? this._timeAdapter.toIso8601(this.min) : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectInputDirective.prototype, "_maxTime", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.max ? this._timeAdapter.toIso8601(this.max) : null; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._timeSelectSubscription.unsubscribe();
        this._localeSubscription.unsubscribe();
        this._valueChange.complete();
        this._disabledChange.complete();
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.writeValue = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.registerOnChange = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.registerOnTouched = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.setDisabledState = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} control
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.validate = /**
     * \@docs-private
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return this._validator ? this._validator(control) : null;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} fn
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.registerOnValidatorChange = /**
     * \@docs-private
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onValidatorChange = fn;
    };
    /**
     * Handle keydown event.
     * @param event The event object.
     */
    /**
     * Handle keydown event.
     * @param {?} event The event object.
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.onKeydown = /**
     * Handle keydown event.
     * @param {?} event The event object.
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;
        if (this._timeSelect && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {
            this._timeSelect.open();
            event.preventDefault();
        }
    };
    /**
     * Handle input event.
     * @param value The current value of the input.
     */
    /**
     * Handle input event.
     * @param {?} value The current value of the input.
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.onInput = /**
     * Handle input event.
     * @param {?} value The current value of the input.
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var time = this._timeAdapter.parse(value, this._timeFormats.parse.timeInput);
        this._lastValueValid = !time || this._timeAdapter.isValid(time);
        time = this._getValidDateOrNull(time);
        if (!this._timeAdapter.sameTime(this._value, time)) {
            this._value = time;
            this._onChange(time);
            this._valueChange.next(time);
            this.timeInput.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));
        }
    };
    /**
     * Handle change event.
     */
    /**
     * Handle change event.
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.onChange = /**
     * Handle change event.
     * @return {?}
     */
    function () {
        this.timeChange.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));
    };
    /**
     * Handle blur event.
     */
    /**
     * Handle blur event.
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.onBlur = /**
     * Handle blur event.
     * @return {?}
     */
    function () {
        if (this.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    };
    /** Returns the palette used by the input's form field, if any. */
    /**
     * Returns the palette used by the input's form field, if any.
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype.getThemePalette = /**
     * Returns the palette used by the input's form field, if any.
     * @return {?}
     */
    function () {
        return this._formField ? this._formField.color : undefined;
    };
    /**
     * Gets the element that the time select popup should be connected to.
     * @return The element to connect the popup to.
     */
    /**
     * Gets the element that the time select popup should be connected to.
     * @return {?} The element to connect the popup to.
     */
    MatTimeSelectInputDirective.prototype.getConnectedOverlayOrigin = /**
     * Gets the element that the time select popup should be connected to.
     * @return {?} The element to connect the popup to.
     */
    function () {
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
    };
    /** Formats a value and sets it on the input element. */
    /**
     * Formats a value and sets it on the input element.
     * @private
     * @param {?} value
     * @return {?}
     */
    MatTimeSelectInputDirective.prototype._formatValue = /**
     * Formats a value and sets it on the input element.
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._elementRef.nativeElement.value = value ? this._timeAdapter.format(value, this._timeFormats.display.timeInput) : '';
    };
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    MatTimeSelectInputDirective.prototype._getValidDateOrNull = /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    function (obj) {
        return this._timeAdapter.isDateInstance(obj) && this._timeAdapter.isValid(obj) ? obj : null;
    };
    MatTimeSelectInputDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[matTimeSelect]',
                    providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return MatTimeSelectInputDirective; }), multi: true },
                        { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return MatTimeSelectInputDirective; }), multi: true },
                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatTimeSelectInputDirective }
                    ],
                    exportAs: 'matTimeSelectInput'
                },] }
    ];
    /** @nocollapse */
    MatTimeSelectInputDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: TimeAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TIME_FORMATS,] }] },
        { type: MatFormField, decorators: [{ type: Optional }] }
    ]; };
    MatTimeSelectInputDirective.propDecorators = {
        timeChange: [{ type: Output }],
        timeInput: [{ type: Output }],
        matTimeSelect: [{ type: Input }],
        value: [{ type: Input }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        disabled: [{ type: HostBinding }, { type: Input }],
        _ariaHasPopup: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
        _ariaOwns: [{ type: HostBinding, args: ['attr.aria-owns',] }],
        _minTime: [{ type: HostBinding, args: ['attr.min',] }],
        _maxTime: [{ type: HostBinding, args: ['attr.max',] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        onInput: [{ type: HostListener, args: ['input', ['$event.target.value'],] }],
        onChange: [{ type: HostListener, args: ['change',] }],
        onBlur: [{ type: HostListener, args: ['blur',] }]
    };
    return MatTimeSelectInputDirective;
}());
export { MatTimeSelectInputDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._timeSelectSubscription;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._localeSubscription;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._timeSelect;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._value;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._min;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._max;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._valueChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._disabledChange;
    /**
     * The form control validator for whether the input parses.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._parseValidator;
    /**
     * The form control validator for the min date time.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._minValidator;
    /**
     * The form control validator for the max date time.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._maxValidator;
    /**
     * The combined form control validator for this input.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._validator;
    /**
     * Whether the last value set on the input was valid.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._lastValueValid;
    /**
     * Emits when a `change` event is fired on this `<input>`.
     * @type {?}
     */
    MatTimeSelectInputDirective.prototype.timeChange;
    /**
     * Emits when an `input` event is fired on this `<input>`.
     * @type {?}
     */
    MatTimeSelectInputDirective.prototype.timeInput;
    /**
     * Emits when the value changes (either due to user input or programmatic change).
     * @type {?}
     */
    MatTimeSelectInputDirective.prototype.valueChange;
    /**
     * Emits when the disabled state has changed.
     * @type {?}
     */
    MatTimeSelectInputDirective.prototype.disabledChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._onValidatorChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._timeAdapter;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._timeFormats;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._formField;
}
//# sourceMappingURL=data:application/json;base64,