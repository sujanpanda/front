/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, Inject, InjectionToken, Injector, Input, NgZone, Optional, Output, QueryList, ViewChildren, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Directionality } from '@angular/cdk/bidi';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { mixinColor } from '@angular/material';
import { merge, Subject, Subscription } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { TimeAdapter } from './time-adapter.service';
import { createMissingTimeImplError } from './time-select-errors';
import { MatTimeSelectIntl } from './time-select-intl.service';
import { MatTimeUnitSelectComponent } from './time-unit-select.component';
/**
 * Used to generate a unique ID for each time select instance.
 * @type {?}
 */
var timeSelectUid = 0;
/**
 * Injection token used to initialize the time select data.
 * @type {?}
 */
export var MAT_TIME_SELECT_DATA = new InjectionToken('mat-time-select-data');
/**
 * Injection token that determines the scroll handling while the time select is opened.
 * @type {?}
 */
export var MAT_TIME_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-time-select-scroll-strategy');
/**
 * \@docs-private
 * @param {?} overlay
 * @return {?}
 */
export function MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY(overlay) {
    return function () { return overlay.scrollStrategies.reposition(); };
}
/**
 * \@docs-private
 * @type {?}
 */
export var MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: MAT_TIME_SELECT_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY
};
/**
 * @record
 * @template D
 */
export function MatTimeSelectData() { }
if (false) {
    /** @type {?|undefined} */
    MatTimeSelectData.prototype.units;
    /** @type {?|undefined} */
    MatTimeSelectData.prototype.value;
    /** @type {?|undefined} */
    MatTimeSelectData.prototype.minTime;
    /** @type {?|undefined} */
    MatTimeSelectData.prototype.maxTime;
}
/**
 * \@docs-private
 */
var /**
 * \@docs-private
 */
MatTimeSelectContentBase = /** @class */ (function () {
    function MatTimeSelectContentBase(_elementRef) {
        this._elementRef = _elementRef;
    }
    return MatTimeSelectContentBase;
}());
/**
 * \@docs-private
 */
export { MatTimeSelectContentBase };
if (false) {
    /** @type {?} */
    MatTimeSelectContentBase.prototype._elementRef;
}
/** @type {?} */
export var _MatTimeSelectContentMixinBase = mixinColor(MatTimeSelectContentBase);
/**
 * Component used as the content for the time select popup.
 * \@docs-private
 * @template D
 */
var MatTimeSelectContentComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MatTimeSelectContentComponent, _super);
    function MatTimeSelectContentComponent(elementRef, _intl, _timeAdapter, data) {
        var _this = _super.call(this, elementRef) || this;
        _this._intl = _intl;
        _this._timeAdapter = _timeAdapter;
        /**
         * Emits when the time select content selected time has been changed.
         */
        _this.valueChange = new EventEmitter();
        /**
         * \@docs-private
         */
        _this.class = 'mat-time-select-content';
        if (!_this._timeAdapter) {
            throw createMissingTimeImplError('TimeAdapter');
        }
        /** @type {?} */
        var time = _this._timeAdapter.isDateInstance(data.value) && _this._timeAdapter.isValid(data.value) ?
            _this._timeAdapter.clone(data.value) : _this._timeAdapter.now();
        /** @type {?} */
        var value = _this._timeAdapter.toMoment(_this._timeAdapter.clampTime(time, data.minTime, data.maxTime));
        /** @type {?} */
        var localeData = value.localeData();
        /** @type {?} */
        var displayFormat = localeData.longDateFormat('LTS');
        _this.hourClock = /hh?/g.test(displayFormat) ? 12 : 24;
        _this.value = value;
        _this.units = data.units || ['hour', 'minute'];
        _this.minTime = data.minTime ? _this._timeAdapter.toMoment(data.minTime) : null;
        _this.maxTime = data.maxTime ? _this._timeAdapter.toMoment(data.maxTime) : null;
        return _this;
    }
    Object.defineProperty(MatTimeSelectContentComponent.prototype, "amPm", {
        /**
         * The time period of the currently selected time of the time select content. Possible values: `am` when selected time hour is less
         * than 12; `pm` when selected time hour is greater than or equal to 12.
         */
        get: /**
         * The time period of the currently selected time of the time select content. Possible values: `am` when selected time hour is less
         * than 12; `pm` when selected time hour is greater than or equal to 12.
         * @return {?}
         */
        function () { return this.value ? (this.value.hour() < 12 ? 'am' : 'pm') : null; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.timeUnitSelectComponents) {
                this.timeUnitSelectComponents.toArray()
                    .filter(function (timeSelect) { return timeSelect.unit === 'hour'; })
                    .forEach(function (timeSelect) { return timeSelect.move(value === 'am' ? -12 : 12); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the value of the given unit of time.
     * @param unit The unit of time to query.
     * @returns The retrieved value.
     */
    /**
     * Gets the value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The retrieved value.
     */
    MatTimeSelectContentComponent.prototype.get = /**
     * Gets the value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The retrieved value.
     */
    function (unit) {
        return this.value.get(unit);
    };
    /**
     * Sets the value of the given unit of time.
     * @param unit The unit of time to update.
     * @param value The value to set.
     */
    /**
     * Sets the value of the given unit of time.
     * @param {?} unit The unit of time to update.
     * @param {?} value The value to set.
     * @return {?}
     */
    MatTimeSelectContentComponent.prototype.set = /**
     * Sets the value of the given unit of time.
     * @param {?} unit The unit of time to update.
     * @param {?} value The value to set.
     * @return {?}
     */
    function (unit, value) {
        this.value.set(unit, value);
        this.valueChange.emit(this.value);
    };
    /**
     * Gets the minimum allowed value of the given unit of time.
     * @param unit The unit of time to query.
     * @returns The minimum value.
     */
    /**
     * Gets the minimum allowed value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The minimum value.
     */
    MatTimeSelectContentComponent.prototype.getMin = /**
     * Gets the minimum allowed value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The minimum value.
     */
    function (unit) {
        /** @type {?} */
        var min = null;
        if (this.minTime && this.value.isSame(this.minTime, 'day')) {
            if (this.getPrev(unit).isBefore(this.minTime)) {
                min = this.value.get(unit);
            }
            if (this.getNext(unit).isBefore(this.minTime)) {
                min = this.minTime.get(unit);
            }
        }
        return min;
    };
    /**
     * Gets the maximum allowed value of the given unit of time.
     * @param unit The unit of time to query.
     * @returns The maximum value.
     */
    /**
     * Gets the maximum allowed value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The maximum value.
     */
    MatTimeSelectContentComponent.prototype.getMax = /**
     * Gets the maximum allowed value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The maximum value.
     */
    function (unit) {
        /** @type {?} */
        var max = null;
        if (this.maxTime && this.value.isSame(this.maxTime, 'day')) {
            if (this.getNext(unit).isAfter(this.maxTime)) {
                max = this.value.get(unit);
            }
            if (this.getPrev(unit).isAfter(this.maxTime)) {
                max = this.maxTime.get(unit);
            }
        }
        return max;
    };
    /**
     * Gets the value after moving up the given unit of time.
     * @param unit The unit of time to move.
     * @returns The new value.
     */
    /**
     * Gets the value after moving up the given unit of time.
     * @param {?} unit The unit of time to move.
     * @return {?} The new value.
     */
    MatTimeSelectContentComponent.prototype.getPrev = /**
     * Gets the value after moving up the given unit of time.
     * @param {?} unit The unit of time to move.
     * @return {?} The new value.
     */
    function (unit) {
        /** @type {?} */
        var prev = this.value.clone().subtract((/** @type {?} */ (1)), (/** @type {?} */ (unit)));
        return this.value.clone().set(unit, prev.get(unit));
    };
    /**
     * Gets the value after moving down the given unit of time.
     * @param unit The unit of time to move.
     * @returns The new value.
     */
    /**
     * Gets the value after moving down the given unit of time.
     * @param {?} unit The unit of time to move.
     * @return {?} The new value.
     */
    MatTimeSelectContentComponent.prototype.getNext = /**
     * Gets the value after moving down the given unit of time.
     * @param {?} unit The unit of time to move.
     * @return {?} The new value.
     */
    function (unit) {
        /** @type {?} */
        var next = this.value.clone().add((/** @type {?} */ (1)), (/** @type {?} */ (unit)));
        return this.value.clone().set(unit, next.get(unit));
    };
    /**
     * Gets the value before midday.
     */
    /**
     * Gets the value before midday.
     * @return {?}
     */
    MatTimeSelectContentComponent.prototype.getAM = /**
     * Gets the value before midday.
     * @return {?}
     */
    function () {
        if (this.value.hour() >= 12) {
            return this.value.clone().subtract(12, 'hour');
        }
        return this.value;
    };
    /**
     * Gets the value after midday.
     */
    /**
     * Gets the value after midday.
     * @return {?}
     */
    MatTimeSelectContentComponent.prototype.getPM = /**
     * Gets the value after midday.
     * @return {?}
     */
    function () {
        if (this.value.hour() < 12) {
            return this.value.clone().add(12, 'hour');
        }
        return this.value;
    };
    /**
     * Whether the given value is selectable.
     * @param value The value to check.
     * @returns `true` if the value is valid. Otherwise `false`.
     */
    /**
     * Whether the given value is selectable.
     * @param {?} value The value to check.
     * @return {?} `true` if the value is valid. Otherwise `false`.
     */
    MatTimeSelectContentComponent.prototype.isValid = /**
     * Whether the given value is selectable.
     * @param {?} value The value to check.
     * @return {?} `true` if the value is valid. Otherwise `false`.
     */
    function (value) {
        /** @type {?} */
        var beforeMin = this.minTime && value.isBefore(this.minTime);
        /** @type {?} */
        var afterMax = this.maxTime && value.isAfter(this.maxTime);
        return !(beforeMin || afterMax);
    };
    MatTimeSelectContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-time-select-content',
                    template: "<table class=\"mat-time-select-table mat-{{ color }}\">\r\n  <tr>\r\n    <ng-container *ngFor=\"let unit of units; first as first\">\r\n      <td *ngIf=\"!first\" class=\"mat-time-select-column mat-time-select-separator\">\r\n        <div class=\"mat-time-unit-separator\">\r\n          <span class=\"mat-time-unit-separator-text\">:</span>\r\n        </div>\r\n      </td>\r\n      <td class=\"mat-time-select-column mat-time-select-{{ unit }}\">\r\n        <mat-time-unit-select\r\n          [min]=\"getMin(unit)\"\r\n          [max]=\"getMax(unit)\"\r\n          [unit]=\"unit\"\r\n          [value]=\"get(unit)\"\r\n          (valueChange)=\"set(unit, $event)\">\r\n        </mat-time-unit-select>\r\n      </td>\r\n    </ng-container>\r\n  </tr>\r\n  <tr *ngIf=\"hourClock === 12\">\r\n    <td class=\"mat-time-ampm\" [colSpan]=\"(units.length * 2) - 1\">\r\n      <mat-button-toggle-group [value]=\"amPm\" (change)=\"amPm = $event.value\">\r\n        <mat-button-toggle value=\"am\" [disabled]=\"!isValid(getAM())\">{{ _intl.amLabel }}</mat-button-toggle>\r\n        <mat-button-toggle value=\"pm\" [disabled]=\"!isValid(getPM())\">{{ _intl.pmLabel }}</mat-button-toggle>\r\n      </mat-button-toggle-group>\r\n    </td>\r\n  </tr>\r\n</table>\r\n",
                    exportAs: 'matTimeSelectContent',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".mat-time-select-content{display:block;border-radius:4px}.mat-time-select-content .mat-time-select-table{border-collapse:collapse}.mat-time-select-content .mat-time-select-column{width:80px;padding:0}.mat-time-select-content .mat-time-select-column .mat-time-unit-select-panel{position:relative}.mat-time-select-content .mat-time-select-hour .mat-time-unit-select-panel{top:-440px}.mat-time-select-content .mat-time-select-minute .mat-time-unit-select-panel,.mat-time-select-content .mat-time-select-second .mat-time-unit-select-panel{top:-1160px}.mat-time-select-content .mat-time-select-separator{text-align:center}.mat-time-select-content .mat-time-select-separator .mat-time-unit-separator{display:inline-flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;height:40px;width:100%}.mat-time-select-content .mat-time-select-separator .mat-time-unit-separator-text{width:100%}.mat-time-select-content .mat-time-ampm{text-align:center}"]
                }] }
    ];
    /** @nocollapse */
    MatTimeSelectContentComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MatTimeSelectIntl },
        { type: TimeAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TIME_SELECT_DATA,] }] }
    ]; };
    MatTimeSelectContentComponent.propDecorators = {
        color: [{ type: Input }],
        units: [{ type: Input }],
        value: [{ type: Input }],
        minTime: [{ type: Input }],
        maxTime: [{ type: Input }],
        valueChange: [{ type: Output }],
        timeUnitSelectComponents: [{ type: ViewChildren, args: [MatTimeUnitSelectComponent,] }],
        class: [{ type: HostBinding, args: ['class',] }]
    };
    return MatTimeSelectContentComponent;
}(_MatTimeSelectContentMixinBase));
export { MatTimeSelectContentComponent };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.color;
    /**
     * The array of unit of time selectable in the time select content.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.units;
    /**
     * The currently selected time of the time select content.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.value;
    /**
     * The minimum selectable time.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.minTime;
    /**
     * The minimum selectable time.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.maxTime;
    /**
     * Emits when the time select content selected time has been changed.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.valueChange;
    /**
     * Reference to the internal time unit select components.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.timeUnitSelectComponents;
    /**
     * \@docs-private
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.class;
    /**
     * The hour clock type. Possible values: 12: 12 hour clock; 24: 24 hour clock
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.hourClock;
    /** @type {?} */
    MatTimeSelectContentComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectContentComponent.prototype._timeAdapter;
}
/**
 * Component responsible for managing the time select popup.
 * @template D
 */
var MatTimeSelectComponent = /** @class */ (function () {
    function MatTimeSelectComponent(_overlay, _injector, _ngZone, _viewContainerRef, scrollStrategy, _timeAdapter, _dir, _document) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._ngZone = _ngZone;
        this._viewContainerRef = _viewContainerRef;
        this._timeAdapter = _timeAdapter;
        this._dir = _dir;
        this._document = _document;
        /**
         * Subscription to value changes in the associated input element.
         */
        this._inputSubscription = Subscription.EMPTY;
        this._opened = false;
        this._disabledChange = new Subject();
        this._selectedChange = new Subject();
        /**
         * The element that was focused before the time select was opened.
         */
        this._focusedElementBeforeOpen = null;
        /**
         * Emits when the time select has been opened.
         */
        this.openStream = new EventEmitter();
        /**
         * Emits when the time select has been closed.
         */
        this.closeStream = new EventEmitter();
        /**
         * The id for the time select popup.
         */
        this.id = "mat-time-select-" + timeSelectUid++;
        if (!this._timeAdapter) {
            throw createMissingTimeImplError('TimeAdapter');
        }
        this._scrollStrategy = scrollStrategy;
    }
    Object.defineProperty(MatTimeSelectComponent.prototype, "startAt", {
        /** The initial time of the time select. */
        get: /**
         * The initial time of the time select.
         * @return {?}
         */
        function () { return this._startAt || (this._timeSelectInput ? this._timeSelectInput.value : null); },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._startAt = this._getValidDateOrNull(this._timeAdapter.deserialize(value)); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectComponent.prototype, "color", {
        /** The color palette to use on the time select popup. */
        get: /**
         * The color palette to use on the time select popup.
         * @return {?}
         */
        function () { return this._color || (this._timeSelectInput ? this._timeSelectInput.getThemePalette() : undefined); },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._color = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectComponent.prototype, "disabled", {
        /** Whether the time select pop-up should disabled. */
        get: /**
         * Whether the time select pop-up should disabled.
         * @return {?}
         */
        function () {
            return this._disabled !== undefined ? this._disabled : (this._timeSelectInput ? this._timeSelectInput.disabled : false);
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var disabled = coerceBooleanProperty(value);
            if (this._disabled !== disabled) {
                this._disabled = disabled;
                this._disabledChange.next(disabled);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectComponent.prototype, "selected", {
        /** The currently selected time. */
        get: /**
         * The currently selected time.
         * @return {?}
         */
        function () { return this._selected; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._selected = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectComponent.prototype, "opened", {
        /** Whether the time select is opened. */
        get: /**
         * Whether the time select is opened.
         * @return {?}
         */
        function () { return this._opened; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { value ? this.open() : close(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectComponent.prototype, "disabledChange", {
        /** Emits when the time select disabled state has been changed. */
        get: /**
         * Emits when the time select disabled state has been changed.
         * @return {?}
         */
        function () { return this._disabledChange.asObservable(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimeSelectComponent.prototype, "selectedChange", {
        /** Emits when the time select selected time has been changed. */
        get: /**
         * Emits when the time select selected time has been changed.
         * @return {?}
         */
        function () { return this._selectedChange.asObservable(); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatTimeSelectComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.close();
        this._inputSubscription.unsubscribe();
        this._disabledChange.complete();
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupComponentRef = null;
        }
    };
    /**
     * Selects the given time.
     * @param time The date time to select.
     */
    /**
     * Selects the given time.
     * @param {?} time The date time to select.
     * @return {?}
     */
    MatTimeSelectComponent.prototype.select = /**
     * Selects the given time.
     * @param {?} time The date time to select.
     * @return {?}
     */
    function (time) {
        /** @type {?} */
        var oldValue = this.selected;
        /** @type {?} */
        var value = this._timeAdapter.clone(time);
        this.selected = value;
        if (!this._timeAdapter.sameTime(oldValue, value)) {
            this._selectedChange.next(value);
        }
    };
    /**
     * Register an input with this time select.
     * @param input The time select input to register with this time select.
     */
    /**
     * Register an input with this time select.
     * @param {?} input The time select input to register with this time select.
     * @return {?}
     */
    MatTimeSelectComponent.prototype.registerInput = /**
     * Register an input with this time select.
     * @param {?} input The time select input to register with this time select.
     * @return {?}
     */
    function (input) {
        var _this = this;
        if (this._timeSelectInput) {
            throw Error('A MatTimeSelect can only be associated with a single input.');
        }
        this._timeSelectInput = input;
        this._inputSubscription = this._timeSelectInput.valueChange.subscribe(function (value) { return _this.selected = value; });
    };
    /** Open the time select. */
    /**
     * Open the time select.
     * @return {?}
     */
    MatTimeSelectComponent.prototype.open = /**
     * Open the time select.
     * @return {?}
     */
    function () {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this._timeSelectInput) {
            throw Error('Attempted to open an MatTimeSelect with no associated input.');
        }
        if (this._document) {
            this._focusedElementBeforeOpen = this._document.activeElement;
        }
        this._openAsPopup();
        this._opened = true;
        this.openStream.emit();
    };
    /** Close the time select. */
    /**
     * Close the time select.
     * @return {?}
     */
    MatTimeSelectComponent.prototype.close = /**
     * Close the time select.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._opened) {
            return;
        }
        if (this._popupRef && this._popupRef.hasAttached()) {
            this._popupRef.detach();
        }
        if (this._popupComponentPortal && this._popupComponentPortal.isAttached) {
            this._popupComponentPortal.detach();
        }
        /** @type {?} */
        var completeClose = function () {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (_this._opened) {
                _this._opened = false;
                _this.closeStream.emit();
                _this._focusedElementBeforeOpen = null;
            }
        };
        if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the time select as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the time select on focus, the user could be stuck with not being
            // able to close the select panel at all. We work around it by making the logic, that marks
            // the time select as closed, async as well.
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
    };
    /** Open the time select as a popup. */
    /**
     * Open the time select as a popup.
     * @private
     * @return {?}
     */
    MatTimeSelectComponent.prototype._openAsPopup = /**
     * Open the time select as a popup.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._popupComponentPortal = new ComponentPortal(MatTimeSelectContentComponent, this._viewContainerRef, this._createInjector());
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            this._popupComponentRef = this._popupRef.attach(this._popupComponentPortal);
            this._popupComponentRef.instance.valueChange.subscribe(function (value) { return _this.select(_this._timeAdapter.deserialize(value.toISOString())); });
            this._setColor();
            // Update the position once the select panel has rendered.
            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {
                _this._popupRef.updatePosition();
            });
        }
    };
    /** Create a portal injector to inject time select initial data. */
    /**
     * Create a portal injector to inject time select initial data.
     * @private
     * @return {?}
     */
    MatTimeSelectComponent.prototype._createInjector = /**
     * Create a portal injector to inject time select initial data.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var data = {
            value: this.startAt,
            minTime: this._timeSelectInput && this._timeSelectInput.min,
            maxTime: this._timeSelectInput && this._timeSelectInput.max
        };
        /** @type {?} */
        var injectorTokens = new WeakMap([
            [MAT_TIME_SELECT_DATA, data]
        ]);
        return new PortalInjector(this._injector, injectorTokens);
    };
    /** Create the popup. */
    /**
     * Create the popup.
     * @private
     * @return {?}
     */
    MatTimeSelectComponent.prototype._createPopup = /**
     * Create the popup.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: 'mat-overlay-transparent-backdrop',
            direction: this._dir,
            scrollStrategy: this._scrollStrategy(),
            panelClass: 'mat-time-select-popup',
        });
        this._popupRef = this._overlay.create(overlayConfig);
        this._popupRef.overlayElement.setAttribute('role', 'dialog');
        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(function (event) {
            // Closing on alt + up is only valid when there's an input associated with the time select.
            return event.keyCode === ESCAPE ||
                (_this._timeSelectInput && event.altKey && event.keyCode === UP_ARROW);
        }))).subscribe(function () { return _this.close(); });
    };
    /** Create the popup position strategy. */
    /**
     * Create the popup position strategy.
     * @private
     * @return {?}
     */
    MatTimeSelectComponent.prototype._createPopupPositionStrategy = /**
     * Create the popup position strategy.
     * @private
     * @return {?}
     */
    function () {
        return this._overlay.position()
            .flexibleConnectedTo(this._timeSelectInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.mat-time-select-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom'
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top'
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom'
            }
        ]);
    };
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    MatTimeSelectComponent.prototype._getValidDateOrNull = /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    function (obj) {
        return this._timeAdapter.isDateInstance(obj) && this._timeAdapter.isValid(obj) ? obj : null;
    };
    /** Passes the current theme color along to the time select overlay. */
    /**
     * Passes the current theme color along to the time select overlay.
     * @private
     * @return {?}
     */
    MatTimeSelectComponent.prototype._setColor = /**
     * Passes the current theme color along to the time select overlay.
     * @private
     * @return {?}
     */
    function () {
        if (this._popupComponentRef) {
            this._popupComponentRef.instance.color = this.color;
        }
    };
    MatTimeSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-time-select',
                    template: '',
                    exportAs: 'matTimeSelect',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    MatTimeSelectComponent.ctorParameters = function () { return [
        { type: Overlay },
        { type: Injector },
        { type: NgZone },
        { type: ViewContainerRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_TIME_SELECT_SCROLL_STRATEGY,] }] },
        { type: TimeAdapter, decorators: [{ type: Optional }] },
        { type: Directionality, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    MatTimeSelectComponent.propDecorators = {
        openStream: [{ type: Output, args: ['open',] }],
        closeStream: [{ type: Output, args: ['close',] }],
        startAt: [{ type: Input }],
        color: [{ type: Input }],
        disabled: [{ type: Input }],
        selected: [{ type: Input }],
        opened: [{ type: Input }]
    };
    return MatTimeSelectComponent;
}());
export { MatTimeSelectComponent };
if (false) {
    /**
     * Subscription to value changes in the associated input element.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._inputSubscription;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._startAt;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._opened;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._disabledChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._selectedChange;
    /**
     * A reference to the overlay when the time select is opened as a popup.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._popupRef;
    /**
     * A portal containing the popup for this time select.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._popupComponentPortal;
    /**
     * Reference to the component instantiated in popup mode.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._popupComponentRef;
    /**
     * The element that was focused before the time select was opened.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._focusedElementBeforeOpen;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._scrollStrategy;
    /**
     * The input element this time select is associated with.
     * @type {?}
     */
    MatTimeSelectComponent.prototype._timeSelectInput;
    /**
     * Emits when the time select has been opened.
     * @type {?}
     */
    MatTimeSelectComponent.prototype.openStream;
    /**
     * Emits when the time select has been closed.
     * @type {?}
     */
    MatTimeSelectComponent.prototype.closeStream;
    /**
     * The id for the time select popup.
     * @type {?}
     */
    MatTimeSelectComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._timeAdapter;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._dir;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,