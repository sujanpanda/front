/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { DateAdapter, MAT_DATE_LOCALE } from '@angular/material';
import { TimeAdapter } from './time-adapter.service';
import * as _moment from 'moment';
/** @type {?} */
var moment = _moment;
/**
 * Adapts the native JS Date for use with cdk-based components that work with times.
 */
var NativeTimeAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(NativeTimeAdapter, _super);
    function NativeTimeAdapter(locale, _dateAdapter) {
        var _this = _super.call(this) || this;
        _this._dateAdapter = _dateAdapter;
        _this.setLocale(locale);
        return _this;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getYear = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._dateAdapter.getYear(date);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getMonth = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._dateAdapter.getMonth(date);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._dateAdapter.getDate(date);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getDayOfWeek = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._dateAdapter.getDayOfWeek(date);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getHour = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date.getHours();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getMinute = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date.getMinutes();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getSecond = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date.getSeconds();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getYearName = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._dateAdapter.getYearName(date);
    };
    /**
     * @param {?} style
     * @return {?}
     */
    NativeTimeAdapter.prototype.getMonthNames = /**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        return this._dateAdapter.getMonthNames(style);
    };
    /**
     * @return {?}
     */
    NativeTimeAdapter.prototype.getDateNames = /**
     * @return {?}
     */
    function () {
        return this._dateAdapter.getDateNames();
    };
    /**
     * @param {?} style
     * @return {?}
     */
    NativeTimeAdapter.prototype.getDayOfWeekNames = /**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        return this._dateAdapter.getDayOfWeekNames(style);
    };
    /**
     * @return {?}
     */
    NativeTimeAdapter.prototype.getFirstDayOfWeek = /**
     * @return {?}
     */
    function () {
        return this._dateAdapter.getFirstDayOfWeek();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.getNumDaysInMonth = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._dateAdapter.getNumDaysInMonth(date);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.clone = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return new Date(date.getTime());
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.createDate = /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    function (year, month, date) {
        return this._dateAdapter.createDate(year, month, date);
    };
    /**
     * @param {?=} hour
     * @param {?=} minute
     * @param {?=} second
     * @return {?}
     */
    NativeTimeAdapter.prototype.createTime = /**
     * @param {?=} hour
     * @param {?=} minute
     * @param {?=} second
     * @return {?}
     */
    function (hour, minute, second) {
        if (hour === void 0) { hour = 0; }
        if (minute === void 0) { minute = 0; }
        if (second === void 0) { second = 0; }
        if (hour < 0 || hour > 23) {
            throw new Error("Invalid hour " + hour + ". Hour has to be between 0 and 23.");
        }
        if (minute < 0 || minute > 59) {
            throw new Error("Invalid minute " + minute + ". Minute has to be between 0 and 59.");
        }
        if (second < 0 || second > 59) {
            throw new Error("Invalid second " + second + ". Second has to be between 0 and 59.");
        }
        /** @type {?} */
        var date = new Date();
        date.setHours(hour, minute, second);
        return date;
    };
    /**
     * @return {?}
     */
    NativeTimeAdapter.prototype.today = /**
     * @return {?}
     */
    function () {
        return this.now();
    };
    /**
     * @return {?}
     */
    NativeTimeAdapter.prototype.now = /**
     * @return {?}
     */
    function () {
        return new Date(Date.now());
    };
    /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    NativeTimeAdapter.prototype.parse = /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    function (value, parseFormat) {
        return this._dateAdapter.parse(value, parseFormat);
    };
    /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    NativeTimeAdapter.prototype.format = /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    function (date, displayFormat) {
        return this._dateAdapter.format(date, displayFormat);
    };
    /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    NativeTimeAdapter.prototype.addCalendarYears = /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    function (date, years) {
        return this._dateAdapter.addCalendarYears(date, years);
    };
    /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    NativeTimeAdapter.prototype.addCalendarMonths = /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    function (date, months) {
        return this._dateAdapter.addCalendarMonths(date, months);
    };
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    NativeTimeAdapter.prototype.addCalendarDays = /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    function (date, days) {
        return this._dateAdapter.addCalendarDays(date, days);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.toIso8601 = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var dateString = this._dateAdapter.toIso8601(date);
        /** @type {?} */
        var timeString = [
            this._2digit(date.getUTCHours()),
            this._2digit(date.getUTCMinutes()),
            this._2digit(date.getUTCSeconds())
        ].join(':');
        return dateString + "T" + timeString + "Z";
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.toMoment = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return moment(date).locale(this.locale);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NativeTimeAdapter.prototype.deserialize = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this._dateAdapter.deserialize(value);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    NativeTimeAdapter.prototype.isDateInstance = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return this._dateAdapter.isDateInstance(obj);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NativeTimeAdapter.prototype.isValid = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this._dateAdapter.isValid(date);
    };
    /**
     * @return {?}
     */
    NativeTimeAdapter.prototype.invalid = /**
     * @return {?}
     */
    function () {
        return this._dateAdapter.invalid();
    };
    /**
     * Pads a number to make it two digits.
     * @param n The number to pad.
     * @returns The padded number.
     */
    /**
     * Pads a number to make it two digits.
     * @private
     * @param {?} n The number to pad.
     * @return {?} The padded number.
     */
    NativeTimeAdapter.prototype._2digit = /**
     * Pads a number to make it two digits.
     * @private
     * @param {?} n The number to pad.
     * @return {?} The padded number.
     */
    function (n) {
        return ('00' + n).slice(-2);
    };
    NativeTimeAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NativeTimeAdapter.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },
        { type: DateAdapter, decorators: [{ type: Optional }] }
    ]; };
    return NativeTimeAdapter;
}(TimeAdapter));
export { NativeTimeAdapter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NativeTimeAdapter.prototype._dateAdapter;
}
//# sourceMappingURL=data:application/json;base64,