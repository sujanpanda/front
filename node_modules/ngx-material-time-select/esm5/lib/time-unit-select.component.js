/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { TimeAdapter } from './time-adapter.service';
import { MAT_TIME_FORMATS } from './time-formats';
/**
 * Component used to select a value of a unit of time.
 * @template D
 */
var MatTimeUnitSelectComponent = /** @class */ (function () {
    function MatTimeUnitSelectComponent(_changeDetectorRef, _timeAdapter, _timeFormats) {
        this._changeDetectorRef = _changeDetectorRef;
        this._timeAdapter = _timeAdapter;
        this._timeFormats = _timeFormats;
        /**
         * The list of all values of the time select.
         */
        this.options = [];
        /**
         * Emits when selected value has been changed. Output to enable support for two-way binding on `[(value)]`.
         */
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MatTimeUnitSelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var unit = this.unit;
        /** @type {?} */
        var time = this._timeAdapter.createTime();
        /** @type {?} */
        var moment = this._timeAdapter.toMoment(time);
        /** @type {?} */
        var start = moment.clone().startOf('day');
        /** @type {?} */
        var end = moment.clone().endOf('day');
        /** @type {?} */
        var min = start.get(unit);
        /** @type {?} */
        var max = end.get(unit);
        /** @type {?} */
        var localeData = moment.localeData();
        /** @type {?} */
        var displayFormat = localeData.longDateFormat('LTS');
        /** @type {?} */
        var unitFormat = unit === 'hour' ?
            displayFormat.match(/hh?|HH?/g)[0] : unit === 'minute' ?
            displayFormat.match(/mm?/g)[0] : displayFormat.match(/ss?/g)[0];
        moment.set(unit, this.value);
        moment.subtract((/** @type {?} */ (1)), (/** @type {?} */ (unit)));
        for (var value = min; value <= max; value++) {
            moment.add((/** @type {?} */ (1)), (/** @type {?} */ (unit)));
            this.options.push({ value: moment.get(unit), label: moment.format(unitFormat) });
        }
    };
    /**
     * @return {?}
     */
    MatTimeUnitSelectComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var element = this.panel.nativeElement;
        this._originTop = parseFloat(getComputedStyle(element).top);
        element.addEventListener('transitionend', function () {
            element.style.removeProperty('transition');
        });
        setTimeout(function () { return _this.move(_this.options.length / 2); });
    };
    /** Select the previous option. */
    /**
     * Select the previous option.
     * @return {?}
     */
    MatTimeUnitSelectComponent.prototype.prev = /**
     * Select the previous option.
     * @return {?}
     */
    function () {
        this.move(-1);
    };
    /** Select the next option. */
    /**
     * Select the next option.
     * @return {?}
     */
    MatTimeUnitSelectComponent.prototype.next = /**
     * Select the next option.
     * @return {?}
     */
    function () {
        this.move(+1);
    };
    /**
     * Select the option moving by the given amount of step.
     * @param step The amount of step to move.
     */
    /**
     * Select the option moving by the given amount of step.
     * @param {?} step The amount of step to move.
     * @return {?}
     */
    MatTimeUnitSelectComponent.prototype.move = /**
     * Select the option moving by the given amount of step.
     * @param {?} step The amount of step to move.
     * @return {?}
     */
    function (step) {
        /** @type {?} */
        var element = this.panel.nativeElement;
        /** @type {?} */
        var option = element.querySelector('mat-time-unit-option');
        /** @type {?} */
        var optionHeight = parseFloat(getComputedStyle(option).height);
        /** @type {?} */
        var currentTop = parseFloat(getComputedStyle(element).top);
        /** @type {?} */
        var targetTop = currentTop + (step * optionHeight);
        /** @type {?} */
        var y = this._originTop - targetTop;
        element.style.top = targetTop + "px";
        if (step < 0) {
            // Move last option to the top
            for (var i = 0; i > step; i--) {
                this.options.unshift(this.options.pop());
            }
        }
        else if (step > 0) {
            // Move first option to the bottom
            for (var i = 0; i < step; i++) {
                this.options.push(this.options.shift());
            }
        }
        this.value = this.options[(this.options.length / 2)].value;
        this.valueChange.emit(this.value);
        element.style.transition = 'transform 0.5s';
        element.style.transform = "translateY(" + y + "px)";
    };
    /**
     * Gets the previous option value.
     */
    /**
     * Gets the previous option value.
     * @return {?}
     */
    MatTimeUnitSelectComponent.prototype.getPrev = /**
     * Gets the previous option value.
     * @return {?}
     */
    function () {
        return this.options[(this.options.length / 2) - 1].value;
    };
    /**
     * Gets the next option value.
     */
    /**
     * Gets the next option value.
     * @return {?}
     */
    MatTimeUnitSelectComponent.prototype.getNext = /**
     * Gets the next option value.
     * @return {?}
     */
    function () {
        return this.options[(this.options.length / 2) + 1].value;
    };
    /**
     * Whether the given value is valid.
     * @param value The value to check.
     */
    /**
     * Whether the given value is valid.
     * @param {?} value The value to check.
     * @return {?}
     */
    MatTimeUnitSelectComponent.prototype.isValid = /**
     * Whether the given value is valid.
     * @param {?} value The value to check.
     * @return {?}
     */
    function (value) {
        return (this.min === null || value >= this.min) && (this.max === null || value <= this.max);
    };
    MatTimeUnitSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-time-unit-select',
                    template: "<div class=\"mat-time-unit-select-carousel\">\r\n  <button class=\"mat-time-unit-select-arrow mat-time-unit-select-prev\" mat-icon-button aria-label=\"Previous\" [disabled]=\"!isValid(getPrev())\" (click)=\"prev()\">\r\n    <mat-icon>keyboard_arrow_up</mat-icon>\r\n  </button>\r\n  <div class=\"mat-time-unit-select-mask\">\r\n    <div #panel class=\"mat-time-unit-select-panel\">\r\n      <mat-time-unit-option *ngFor=\"let option of options\" [value]=\"option.value\" [disabled]=\"!isValid(option.value)\"> {{ option.label }} </mat-time-unit-option>\r\n    </div>\r\n  </div>\r\n  <button class=\"mat-time-unit-select-arrow mat-time-unit-select-next\" mat-icon-button aria-label=\"Next\" [disabled]=\"!isValid(getNext())\" (click)=\"next()\">\r\n    <mat-icon>keyboard_arrow_down</mat-icon>\r\n  </button>\r\n</div>\r\n",
                    exportAs: 'matTimeSelect',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["mat-time-unit-select{display:block;height:100%}mat-time-unit-select .mat-time-unit-select-carousel{display:flex;flex-direction:column;align-items:center;height:100%}mat-time-unit-select .mat-time-unit-select-mask{flex:auto;max-height:120px;width:100%;overflow:hidden}"]
                }] }
    ];
    /** @nocollapse */
    MatTimeUnitSelectComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: TimeAdapter },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_TIME_FORMATS,] }] }
    ]; };
    MatTimeUnitSelectComponent.propDecorators = {
        value: [{ type: Input }],
        unit: [{ type: Input }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        valueChange: [{ type: Output }],
        panel: [{ type: ViewChild, args: ['panel',] }]
    };
    return MatTimeUnitSelectComponent;
}());
export { MatTimeUnitSelectComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatTimeUnitSelectComponent.prototype._originTop;
    /**
     * The currently selected value.
     * @type {?}
     */
    MatTimeUnitSelectComponent.prototype.value;
    /**
     * The unit of time of the time select.
     * @type {?}
     */
    MatTimeUnitSelectComponent.prototype.unit;
    /**
     * The minimum selectable value.
     * @type {?}
     */
    MatTimeUnitSelectComponent.prototype.min;
    /**
     * The maximum selectable value.
     * @type {?}
     */
    MatTimeUnitSelectComponent.prototype.max;
    /**
     * The list of all values of the time select.
     * @type {?}
     */
    MatTimeUnitSelectComponent.prototype.options;
    /**
     * Emits when selected value has been changed. Output to enable support for two-way binding on `[(value)]`.
     * @type {?}
     */
    MatTimeUnitSelectComponent.prototype.valueChange;
    /**
     * The panel element containing all time select options.
     * @type {?}
     */
    MatTimeUnitSelectComponent.prototype.panel;
    /**
     * @type {?}
     * @private
     */
    MatTimeUnitSelectComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    MatTimeUnitSelectComponent.prototype._timeAdapter;
    /**
     * @type {?}
     * @private
     */
    MatTimeUnitSelectComponent.prototype._timeFormats;
}
//# sourceMappingURL=data:application/json;base64,