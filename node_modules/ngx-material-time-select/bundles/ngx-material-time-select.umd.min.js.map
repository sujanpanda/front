{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-material-time-select/lib/time-adapter.service.ts","ng://ngx-material-time-select/lib/time-formats.ts","ng://ngx-material-time-select/lib/time-select-intl.service.ts","ng://ngx-material-time-select/lib/time-unit-select.component.ts","ng://ngx-material-time-select/lib/time-unit-option.component.ts","ng://ngx-material-time-select/lib/time-select-errors.ts","ng://ngx-material-time-select/lib/time-select.component.ts","ng://ngx-material-time-select/lib/time-select-input.directive.ts","ng://ngx-material-time-select/lib/time-select-toggle.component.ts","ng://ngx-material-time-select/lib/time-select.module.ts","ng://ngx-material-time-select/lib/native-time-adapter.service.ts","ng://ngx-material-time-select/lib/native-time-formats.ts","ng://ngx-material-time-select/lib/native-time.module.ts","ng://ngx-material-time-select/lib/moment-time-adapter.service.ts","ng://ngx-material-time-select/lib/moment-time-formats.ts","ng://ngx-material-time-select/lib/moment-time.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","TimeAdapter","tslib_1.__extends","compareTime","first","second","compareDate","getHour","getMinute","getSecond","sameTime","firstValid","isValid","secondValid","clampTime","date","min","max","DateAdapter","MAT_TIME_FORMATS","InjectionToken","MatTimeSelectIntl","changes","Subject","openTimeSelectLabel","amLabel","pmLabel","Injectable","MatTimeUnitSelectComponent","_changeDetectorRef","_timeAdapter","_timeFormats","options","valueChange","EventEmitter","ngOnInit","unit","time","createTime","moment","toMoment","start","clone","startOf","end","endOf","get","displayFormat","localeData","longDateFormat","unitFormat","match","set","value","subtract","add","push","label","format","ngAfterViewInit","_this","element","panel","nativeElement","_originTop","parseFloat","getComputedStyle","top","addEventListener","style","removeProperty","setTimeout","move","length","prev","next","step","option","querySelector","optionHeight","height","targetTop","y","i","unshift","pop","shift","emit","transition","transform","getPrev","getNext","Component","args","selector","template","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Inject","Input","Output","ViewChild","MatTimeUnitOptionBase","_MatTimeUnitOptionMixinBase","mixinDisableRipple","MatTimeUnitOptionComponent","_super","_elementRef","timeUnitSelect","call","_disabled","_selected","class","role","tabindex","defineProperty","selected","coerceBooleanProperty","markForCheck","disabled","toString","subscribe","getLabel","_text","textContent","trim","_getHostElement","_isRippleDisabled","disableRipple","_onClick","ElementRef","decorators","type","forwardRef","HostBinding","HostListener","createMissingTimeImplError","provider","Error","timeSelectUid","MAT_TIME_SELECT_DATA","MAT_TIME_SELECT_SCROLL_STRATEGY","MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","MatTimeSelectContentBase","_MatTimeSelectContentMixinBase","mixinColor","MatTimeSelectContentComponent","elementRef","_intl","data","isDateInstance","now","minTime","maxTime","hourClock","test","units","hour","timeUnitSelectComponents","toArray","filter","timeSelect","forEach","getMin","isSame","isBefore","getMax","isAfter","getAM","getPM","beforeMin","afterMax","Optional","ViewChildren","MatTimeSelectComponent","_overlay","_injector","_ngZone","_viewContainerRef","scrollStrategy","_dir","_document","_inputSubscription","Subscription","EMPTY","_opened","_disabledChange","_selectedChange","_focusedElementBeforeOpen","openStream","closeStream","id","_scrollStrategy","_startAt","_timeSelectInput","_getValidDateOrNull","deserialize","_color","getThemePalette","undefined","open","close","asObservable","ngOnDestroy","unsubscribe","complete","_popupRef","dispose","_popupComponentRef","select","oldValue","registerInput","input","activeElement","_openAsPopup","hasAttached","detach","_popupComponentPortal","isAttached","completeClose","focus","ComponentPortal","_createInjector","_createPopup","attach","instance","toISOString","_setColor","onStable","pipe","take","updatePosition","startAt","injectorTokens","WeakMap","PortalInjector","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","direction","panelClass","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","event","keyCode","ESCAPE","altKey","UP_ARROW","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","obj","color","Injector","NgZone","ViewContainerRef","Directionality","DOCUMENT","MatTimeSelectInputEvent","target","targetElement","MatTimeSelectInputDirective","_formField","_timeSelectSubscription","_localeSubscription","_valueChange","timeChange","timeInput","disabledChange","_onChange","_onTouched","_onValidatorChange","_parseValidator","_lastValueValid","matTimeSelectParse","text","_minValidator","control","matTimeSelectMin","actual","_maxValidator","matTimeSelectMax","_validator","Validators","compose","localeChanges","_timeSelect","selectedChange","_value","_formatValue","_min","_max","blur","opened","toIso8601","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","validate","registerOnValidatorChange","onKeydown","isAltDownArrow","DOWN_ARROW","readOnly","preventDefault","onInput","parse","onChange","onBlur","display","Directive","providers","NG_VALUE_ACCESSOR","useExisting","multi","NG_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","MatFormField","MatTimeSelectToggleIconDirective","MatTimeSelectToggleComponent","defaultTabIndex","_stateChanges","parsedTabIndex","parseInt","tabIndex","_disableRipple","ngAfterContentInit","_watchStateChanges","ngOnChanges","onFocus","button","stopPropagation","timeSelectDisabled","of","inputDisabled","timeSelectToggled","Attribute","ContentChild","MatTimeSelectModule","NgModule","imports","CommonModule","OverlayModule","A11yModule","PortalModule","MatButtonModule","MatButtonToggleModule","MatIconModule","MatRippleModule","declarations","exports","entryComponents","_moment","NativeTimeAdapter","locale","_dateAdapter","setLocale","getYear","getMonth","getDate","getDayOfWeek","getHours","getMinutes","getSeconds","getYearName","getMonthNames","getDateNames","getDayOfWeekNames","getFirstDayOfWeek","getNumDaysInMonth","Date","getTime","createDate","year","month","minute","setHours","today","parseFormat","addCalendarYears","years","addCalendarMonths","months","addCalendarDays","days","_2digit","getUTCHours","getUTCMinutes","getUTCSeconds","join","invalid","n","slice","MAT_DATE_LOCALE","MAT_NATIVE_TIME_FORMATS","timeA11yLabel","ɵ0","MatNativeTimeModule","useClass","useValue","MomentTimeAdapter","day","ISO_8601","isMoment","MAT_MOMENT_TIME_FORMATS","ɵ0$1","MatMomentTimeModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {DateAdapter} from '@angular/material';\r\nimport {Moment} from 'moment';\r\n\r\n/** Adapts date object to be usable as a date time by cdk-based components that work with dates. */\r\nexport abstract class TimeAdapter<D> extends DateAdapter<D> {\r\n\r\n  /**\r\n   * Gets the hour component of the given date.\r\n   * @param date The date to extract the hour from.\r\n   * @returns The hour component (0-indexed, 0 = midnight).\r\n   */\r\n  abstract getHour(date: D): number;\r\n\r\n  /**\r\n   * Gets the minute component of the given date.\r\n   * @param date The date to extract the minute from.\r\n   * @returns The minute component (0-indexed, 0 = start of hour).\r\n   */\r\n  abstract getMinute(date: D): number;\r\n\r\n  /**\r\n   * Gets the second component of the given date.\r\n   * @param date The date to extract the second from.\r\n   * @returns The second component (0-indexed, 0 = start of minute).\r\n   */\r\n  abstract getSecond(date: D): number;\r\n\r\n  /**\r\n   * Create a date with the given hour, minute and second. Does not allow over/under-flow of the\r\n   * hour, minute and second.\r\n   * @param hour The hour of the date. Must be an integer 0 - 23.\r\n   * @param minute The minute of the date. Must be an integer 0 - 59.\r\n   * @param second The second of the date. Must be an integer 0 - 59.\r\n   * @returns The new date.\r\n   */\r\n  abstract createTime(hour?: number, minute?: number, second?: number): D;\r\n\r\n  /**\r\n   * Gets the current date.\r\n   * @returns The current date.\r\n   */\r\n  abstract now(): D;\r\n\r\n  /**\r\n   * Convert the given date to a Moment object.\r\n   * @param date the date object to convert.\r\n   */\r\n  abstract toMoment(date: D): Moment;\r\n\r\n  /**\r\n   * Compares two date times.\r\n   * @param first The first date to compare.\r\n   * @param second The second date to compare.\r\n   * @returns 0 if the date times are equal, a number less than 0 if the first date time is earlier,\r\n   *     a number greater than 0 if the first date time is later.\r\n   */\r\n  compareTime(first: D, second: D): number {\r\n    return this.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      this.getMinute(first) - this.getMinute(second) ||\r\n      this.getSecond(first) - this.getSecond(second);\r\n  }\r\n\r\n  /**\r\n   * Checks if two date times are equal.\r\n   * @param first The first date to check.\r\n   * @param second The second date to check.\r\n   * @returns Whether the two date times are equal.\r\n   *     Null dates are considered equal to other null dates.\r\n   */\r\n  sameTime(first: D | null, second: D | null): boolean {\r\n    if (first && second) {\r\n      const firstValid = this.isValid(first);\r\n      const secondValid = this.isValid(second);\r\n      if (firstValid && secondValid) {\r\n        return !this.compareTime(first, second);\r\n      }\r\n      return firstValid === secondValid;\r\n    }\r\n    return first === second;\r\n  }\r\n\r\n  /**\r\n   * Clamp the given date between min and max date times.\r\n   * @param date The date to clamp.\r\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\r\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\r\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r\n   *     otherwise `date`.\r\n   */\r\n  clampTime(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareTime(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareTime(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n\r\n}\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nexport interface MatTimeFormats {\r\n  parse: {\r\n    timeInput: any\r\n  };\r\n  display: {\r\n    timeInput: any\r\n    timeA11yLabel: any\r\n  };\r\n}\r\n\r\nexport const MAT_TIME_FORMATS = new InjectionToken<MatTimeFormats>('mat-time-formats');\r\n","import {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** TimeSelect data that requires internationalization. */\r\n@Injectable()\r\nexport class MatTimeSelectIntl {\r\n\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the button used to open the time select popup (used by screen readers). */\r\n  openTimeSelectLabel = 'Open time select';\r\n\r\n  /** A label for the a.m. button toggle (used by screen readers). */\r\n  amLabel = 'AM';\r\n\r\n  /** A label for the p.m. button toggle (used by screen readers). */\r\n  pmLabel = 'PM';\r\n\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {DurationInputArg1, DurationInputArg2, unitOfTime} from 'moment';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {MAT_TIME_FORMATS, MatTimeFormats} from './time-formats';\r\n\r\n/** Component used to select a value of a unit of time. */\r\n@Component({\r\n  selector: 'mat-time-unit-select',\r\n  templateUrl: './time-unit-select.component.html',\r\n  styleUrls: ['./time-unit-select.component.scss'],\r\n  exportAs: 'matTimeSelect',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeUnitSelectComponent<D> implements AfterViewInit, OnInit {\r\n\r\n  private _originTop: number;\r\n\r\n  /** The currently selected value. */\r\n  @Input() value: number;\r\n  /** The unit of time of the time select. */\r\n  @Input() unit: unitOfTime.All;\r\n  /** The minimum selectable value. */\r\n  @Input() min: number | null;\r\n  /** The maximum selectable value. */\r\n  @Input() max: number | null;\r\n\r\n  /** The list of all values of the time select. */\r\n  options: {value: number; label: string}[] = [];\r\n\r\n  /** Emits when selected value has been changed. Output to enable support for two-way binding on `[(value)]`. */\r\n  @Output() valueChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** The panel element containing all time select options. */\r\n  @ViewChild('panel') panel: ElementRef<HTMLElement>;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              private _timeAdapter: TimeAdapter<D>,\r\n              @Inject(MAT_TIME_FORMATS) private _timeFormats: MatTimeFormats) { }\r\n\r\n  ngOnInit() {\r\n    const unit = this.unit;\r\n    const time = this._timeAdapter.createTime();\r\n    const moment = this._timeAdapter.toMoment(time);\r\n    const start = moment.clone().startOf('day');\r\n    const end = moment.clone().endOf('day');\r\n    const min = start.get(unit);\r\n    const max = end.get(unit);\r\n    const localeData = moment.localeData();\r\n    const displayFormat = localeData.longDateFormat('LTS');\r\n    const unitFormat = unit === 'hour' ?\r\n      displayFormat.match(/hh?|HH?/g)[0] : unit === 'minute' ?\r\n        displayFormat.match(/mm?/g)[0] : displayFormat.match(/ss?/g)[0];\r\n    moment.set(unit, this.value);\r\n    moment.subtract(1 as DurationInputArg1, unit as DurationInputArg2);\r\n    for (let value = min; value <= max; value++) {\r\n      moment.add(1 as DurationInputArg1, unit as DurationInputArg2);\r\n      this.options.push({value: moment.get(unit), label: moment.format(unitFormat)});\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const element = this.panel.nativeElement;\r\n    this._originTop = parseFloat(getComputedStyle(element).top);\r\n    element.addEventListener('transitionend', () => {\r\n      element.style.removeProperty('transition');\r\n    });\r\n    setTimeout(() => this.move(this.options.length / 2));\r\n  }\r\n\r\n  /** Select the previous option. */\r\n  prev() {\r\n    this.move(-1);\r\n  }\r\n\r\n  /** Select the next option. */\r\n  next() {\r\n    this.move(+1);\r\n  }\r\n\r\n  /**\r\n   * Select the option moving by the given amount of step.\r\n   * @param step The amount of step to move.\r\n   */\r\n  move(step: number) {\r\n    const element = this.panel.nativeElement;\r\n    const option = element.querySelector('mat-time-unit-option');\r\n    const optionHeight = parseFloat(getComputedStyle(option).height);\r\n    const currentTop = parseFloat(getComputedStyle(element).top);\r\n    const targetTop = currentTop + (step * optionHeight);\r\n    const y = this._originTop - targetTop;\r\n\r\n    element.style.top = `${targetTop}px`;\r\n\r\n    if (step < 0) {\r\n      // Move last option to the top\r\n      for (let i = 0; i > step; i--) {\r\n        this.options.unshift(this.options.pop());\r\n      }\r\n    } else if (step > 0) {\r\n      // Move first option to the bottom\r\n      for (let i = 0; i < step; i++) {\r\n        this.options.push(this.options.shift());\r\n      }\r\n    }\r\n\r\n    this.value = this.options[(this.options.length / 2)].value;\r\n    this.valueChange.emit(this.value);\r\n\r\n    element.style.transition = 'transform 0.5s';\r\n    element.style.transform = `translateY(${y}px)`;\r\n  }\r\n\r\n  /**\r\n   * Gets the previous option value.\r\n   */\r\n  getPrev(): number {\r\n    return this.options[(this.options.length / 2) - 1].value;\r\n  }\r\n\r\n  /**\r\n   * Gets the next option value.\r\n   */\r\n  getNext(): number {\r\n    return this.options[(this.options.length / 2) + 1].value;\r\n  }\r\n\r\n  /**\r\n   * Whether the given value is valid.\r\n   * @param value The value to check.\r\n   */\r\n  isValid(value: number): boolean {\r\n    return (this.min === null || value >= this.min) && (this.max === null || value <= this.max);\r\n  }\r\n\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CanDisableRippleCtor, mixinDisableRipple} from '@angular/material';\r\nimport {MatTimeUnitSelectComponent} from './time-unit-select.component';\r\n\r\nexport class MatTimeUnitOptionBase { }\r\nexport const _MatTimeUnitOptionMixinBase: CanDisableRippleCtor & typeof MatTimeUnitOptionBase =\r\n  mixinDisableRipple(MatTimeUnitOptionBase);\r\n\r\n/** Single time option inside a `<mat-time-unit-select>` element */\r\n@Component({\r\n  selector: 'mat-time-unit-option',\r\n  templateUrl: './time-unit-option.component.html',\r\n  styleUrls: ['./time-unit-option.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeUnitOptionComponent<D> extends _MatTimeUnitOptionMixinBase implements OnInit {\r\n\r\n  private _disabled = false;\r\n  private _selected = false;\r\n\r\n  /** The value of the option. */\r\n  @Input() value: number;\r\n  /** Whether ripples for the option are disabled. */\r\n  @Input() disableRipple: boolean;\r\n\r\n  /** The element containing the display text of the option. */\r\n  @ViewChild('text') _text: ElementRef<HTMLElement>;\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class') readonly class = 'mat-time-unit-option';\r\n  /** @docs-private */\r\n  @HostBinding('attr.role') readonly role = 'option';\r\n  /** @docs-private */\r\n  @HostBinding('attr.tabindex') readonly tabindex = -1;\r\n\r\n  /** Whether or not the option is currently selected. */\r\n  @Input()\r\n  @HostBinding('class.mat-time-unit-option-selected')\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    const selected = coerceBooleanProperty(value);\r\n    if (this._selected !== selected) {\r\n      this._selected = selected;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  @HostBinding('class.mat-time-unit-option-disabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const disabled = coerceBooleanProperty(value);\r\n    if (this._disabled !== disabled) {\r\n      this._disabled = disabled;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.aria-disabled')\r\n  get ariaDisabled(): string { return this.disabled.toString(); }\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(forwardRef(() => MatTimeUnitSelectComponent)) public timeUnitSelect: MatTimeUnitSelectComponent<D>) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.timeUnitSelect.valueChange.subscribe(value => this.selected = this.value === value);\r\n  }\r\n\r\n  /** Gets the label to be used when determining whether the option should be focused. */\r\n  getLabel(): string {\r\n    return this._text ? (this._text.nativeElement.textContent || '').trim() : '';\r\n  }\r\n\r\n  /** Gets the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  /** Whether ripples for the option are disabled. */\r\n  _isRippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple;\r\n  }\r\n\r\n  /** Handle click on the option. */\r\n  @HostListener('click')\r\n  _onClick() {\r\n    if (!this.disabled) {\r\n      this.timeUnitSelect.move(this.value - this.timeUnitSelect.value);\r\n    }\r\n  }\r\n\r\n}\r\n","/** @docs-private */\r\nexport function createMissingTimeImplError(provider: string) {\r\n  return Error(\r\n    `MatTimeSelectComponent: No provider found for ${provider}. You must import one of the following ` +\r\n    `modules at your application root: MatNativeTimeModule, MatMomentTimeModule, or provide a ` +\r\n    `custom implementation.`);\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  InjectionToken,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Provider,\r\n  QueryList,\r\n  ViewChildren,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {Overlay, OverlayConfig, OverlayRef, PositionStrategy, ScrollStrategy} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\r\nimport {CanColor, CanColorCtor, mixinColor, ThemePalette} from '@angular/material';\r\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\r\nimport {filter, take} from 'rxjs/operators';\r\nimport {DurationInputArg1, DurationInputArg2, Moment, unitOfTime} from 'moment';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {createMissingTimeImplError} from './time-select-errors';\r\nimport {MatTimeSelectIntl} from './time-select-intl.service';\r\nimport {MatTimeSelectInputDirective} from './time-select-input.directive';\r\nimport {MatTimeUnitSelectComponent} from './time-unit-select.component';\r\n\r\n/** Used to generate a unique ID for each time select instance. */\r\nlet timeSelectUid = 0;\r\n\r\n/** Injection token used to initialize the time select data. */\r\nexport const MAT_TIME_SELECT_DATA = new InjectionToken<Moment>('mat-time-select-data');\r\n\r\n/** Injection token that determines the scroll handling while the time select is opened. */\r\nexport const MAT_TIME_SELECT_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('mat-time-select-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER: Provider = {\r\n  provide: MAT_TIME_SELECT_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY\r\n};\r\n\r\nexport interface MatTimeSelectData<D> {\r\n  units?: unitOfTime.All[];\r\n  value?: D;\r\n  minTime?: D;\r\n  maxTime?: D;\r\n}\r\n\r\n/** @docs-private */\r\nexport class MatTimeSelectContentBase {\r\n\r\n  constructor(public _elementRef: ElementRef) { }\r\n\r\n}\r\n\r\nexport const _MatTimeSelectContentMixinBase: CanColorCtor & typeof MatTimeSelectContentBase =\r\n  mixinColor(MatTimeSelectContentBase);\r\n\r\n/**\r\n * Component used as the content for the time select popup.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-time-select-content',\r\n  templateUrl: './time-select-content.component.html',\r\n  styleUrls: ['./time-select-content.component.scss'],\r\n  exportAs: 'matTimeSelectContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeSelectContentComponent<D> extends _MatTimeSelectContentMixinBase implements CanColor {\r\n\r\n  /** @docs-private */\r\n  @Input() color: ThemePalette;\r\n  /** The array of unit of time selectable in the time select content. */\r\n  @Input() units: unitOfTime.All[];\r\n  /** The currently selected time of the time select content. */\r\n  @Input() value: Moment;\r\n  /** The minimum selectable time. */\r\n  @Input() minTime: Moment;\r\n  /** The minimum selectable time. */\r\n  @Input() maxTime: Moment;\r\n\r\n  /** Emits when the time select content selected time has been changed. */\r\n  @Output() valueChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  /** Reference to the internal time unit select components. */\r\n  @ViewChildren(MatTimeUnitSelectComponent) timeUnitSelectComponents: QueryList<MatTimeUnitSelectComponent<D>>;\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class') readonly class = 'mat-time-select-content';\r\n\r\n  /** The hour clock type. Possible values: 12: 12 hour clock; 24: 24 hour clock */\r\n  hourClock: number;\r\n\r\n  /**\r\n   * The time period of the currently selected time of the time select content. Possible values: `am` when selected time hour is less\r\n   * than 12; `pm` when selected time hour is greater than or equal to 12.\r\n   */\r\n  get amPm(): string { return this.value ? (this.value.hour() < 12 ? 'am' : 'pm') : null; }\r\n  set amPm(value: string) {\r\n    if (this.timeUnitSelectComponents) {\r\n      this.timeUnitSelectComponents.toArray()\r\n        .filter(timeSelect => timeSelect.unit === 'hour')\r\n        .forEach(timeSelect => timeSelect.move(value === 'am' ? -12 : 12));\r\n    }\r\n  }\r\n\r\n  constructor(elementRef: ElementRef,\r\n              public _intl: MatTimeSelectIntl,\r\n              @Optional() private _timeAdapter: TimeAdapter<D>,\r\n              @Optional() @Inject(MAT_TIME_SELECT_DATA) data: MatTimeSelectData<D>) {\r\n    super(elementRef);\r\n\r\n    if (!this._timeAdapter) {\r\n      throw createMissingTimeImplError('TimeAdapter');\r\n    }\r\n\r\n    const time = this._timeAdapter.isDateInstance(data.value) && this._timeAdapter.isValid(data.value) ?\r\n      this._timeAdapter.clone(data.value) : this._timeAdapter.now();\r\n    const value = this._timeAdapter.toMoment(this._timeAdapter.clampTime(time, data.minTime, data.maxTime));\r\n    const localeData = value.localeData();\r\n    const displayFormat = localeData.longDateFormat('LTS');\r\n    this.hourClock = /hh?/g.test(displayFormat) ? 12 : 24;\r\n    this.value = value;\r\n    this.units = data.units || ['hour', 'minute'];\r\n    this.minTime = data.minTime ? this._timeAdapter.toMoment(data.minTime) : null;\r\n    this.maxTime = data.maxTime ? this._timeAdapter.toMoment(data.maxTime) : null;\r\n  }\r\n\r\n  /**\r\n   * Gets the value of the given unit of time.\r\n   * @param unit The unit of time to query.\r\n   * @returns The retrieved value.\r\n   */\r\n  get(unit: unitOfTime.All): number {\r\n    return this.value.get(unit);\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the given unit of time.\r\n   * @param unit The unit of time to update.\r\n   * @param value The value to set.\r\n   */\r\n  set(unit: unitOfTime.All, value: number) {\r\n    this.value.set(unit, value);\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /**\r\n   * Gets the minimum allowed value of the given unit of time.\r\n   * @param unit The unit of time to query.\r\n   * @returns The minimum value.\r\n   */\r\n  getMin(unit: unitOfTime.All): number | null {\r\n    let min = null;\r\n    if (this.minTime && this.value.isSame(this.minTime, 'day')) {\r\n      if (this.getPrev(unit).isBefore(this.minTime)) {\r\n        min = this.value.get(unit);\r\n      }\r\n      if (this.getNext(unit).isBefore(this.minTime)) {\r\n        min = this.minTime.get(unit);\r\n      }\r\n    }\r\n    return min;\r\n  }\r\n\r\n  /**\r\n   * Gets the maximum allowed value of the given unit of time.\r\n   * @param unit The unit of time to query.\r\n   * @returns The maximum value.\r\n   */\r\n  getMax(unit: unitOfTime.All): number | null {\r\n    let max = null;\r\n    if (this.maxTime && this.value.isSame(this.maxTime, 'day')) {\r\n      if (this.getNext(unit).isAfter(this.maxTime)) {\r\n        max = this.value.get(unit);\r\n      }\r\n      if (this.getPrev(unit).isAfter(this.maxTime)) {\r\n        max = this.maxTime.get(unit);\r\n      }\r\n    }\r\n    return max;\r\n  }\r\n\r\n  /**\r\n   * Gets the value after moving up the given unit of time.\r\n   * @param unit The unit of time to move.\r\n   * @returns The new value.\r\n   */\r\n  getPrev(unit: unitOfTime.All): Moment {\r\n    const prev = this.value.clone().subtract(1 as DurationInputArg1, unit as DurationInputArg2);\r\n    return this.value.clone().set(unit, prev.get(unit));\r\n  }\r\n\r\n  /**\r\n   * Gets the value after moving down the given unit of time.\r\n   * @param unit The unit of time to move.\r\n   * @returns The new value.\r\n   */\r\n  getNext(unit: unitOfTime.All): Moment {\r\n    const next = this.value.clone().add(1 as DurationInputArg1, unit as DurationInputArg2);\r\n    return this.value.clone().set(unit, next.get(unit));\r\n  }\r\n\r\n  /**\r\n   * Gets the value before midday.\r\n   */\r\n  getAM(): Moment {\r\n    if (this.value.hour() >= 12) {\r\n      return this.value.clone().subtract(12, 'hour');\r\n    }\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Gets the value after midday.\r\n   */\r\n  getPM(): Moment {\r\n    if (this.value.hour() < 12) {\r\n      return this.value.clone().add(12, 'hour');\r\n    }\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Whether the given value is selectable.\r\n   * @param value The value to check.\r\n   * @returns `true` if the value is valid. Otherwise `false`.\r\n   */\r\n  isValid(value: Moment): boolean {\r\n    const beforeMin = this.minTime && value.isBefore(this.minTime);\r\n    const afterMax = this.maxTime && value.isAfter(this.maxTime);\r\n    return !(beforeMin || afterMax);\r\n  }\r\n\r\n}\r\n\r\n/** Component responsible for managing the time select popup. */\r\n@Component({\r\n  selector: 'mat-time-select',\r\n  template: '',\r\n  exportAs: 'matTimeSelect',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeSelectComponent<D> implements OnDestroy, CanColor {\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  private _startAt: D | null;\r\n  private _color: ThemePalette;\r\n  private _disabled: boolean;\r\n  private _selected: D;\r\n  private _opened = false;\r\n\r\n  private _disabledChange: Subject<boolean> = new Subject<boolean>();\r\n  private _selectedChange: Subject<D> = new Subject<D>();\r\n\r\n  /** A reference to the overlay when the time select is opened as a popup. */\r\n  private _popupRef: OverlayRef;\r\n  /** A portal containing the popup for this time select. */\r\n  private _popupComponentPortal: ComponentPortal<MatTimeSelectContentComponent<D>>;\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<MatTimeSelectContentComponent<D>>;\r\n  /** The element that was focused before the time select was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  private readonly _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** The input element this time select is associated with. */\r\n  _timeSelectInput: MatTimeSelectInputDirective<D>;\r\n\r\n  /** Emits when the time select has been opened. */\r\n  @Output('open') openStream: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Emits when the time select has been closed. */\r\n  @Output('close') closeStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** The id for the time select popup. */\r\n  id = `mat-time-select-${timeSelectUid++}`;\r\n\r\n  /** The initial time of the time select. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt || (this._timeSelectInput ? this._timeSelectInput.value : null); }\r\n  set startAt(value: D | null) { this._startAt = this._getValidDateOrNull(this._timeAdapter.deserialize(value)); }\r\n\r\n  /** The color palette to use on the time select popup. */\r\n  @Input()\r\n  get color(): ThemePalette { return this._color || (this._timeSelectInput ? this._timeSelectInput.getThemePalette() : undefined); }\r\n  set color(value: ThemePalette) { this._color = value; }\r\n\r\n  /** Whether the time select pop-up should disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled !== undefined ? this._disabled : (this._timeSelectInput ? this._timeSelectInput.disabled : false);\r\n  }\r\n  set disabled(value: boolean) {\r\n    const disabled = coerceBooleanProperty(value);\r\n    if (this._disabled !== disabled) {\r\n      this._disabled = disabled;\r\n      this._disabledChange.next(disabled);\r\n    }\r\n  }\r\n\r\n  /** The currently selected time. */\r\n  @Input()\r\n  get selected(): D { return this._selected; }\r\n  set selected(value: D) { this._selected = value; }\r\n\r\n  /** Whether the time select is opened. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : close(); }\r\n\r\n  /** Emits when the time select disabled state has been changed. */\r\n  get disabledChange(): Observable<boolean> { return this._disabledChange.asObservable(); }\r\n  /** Emits when the time select selected time has been changed. */\r\n  get selectedChange(): Observable<D> { return this._selectedChange.asObservable(); }\r\n\r\n  constructor(private _overlay: Overlay,\r\n              private _injector: Injector,\r\n              private _ngZone: NgZone,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_TIME_SELECT_SCROLL_STRATEGY) scrollStrategy: any,\r\n              @Optional() private _timeAdapter: TimeAdapter<D>,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._timeAdapter) {\r\n      throw createMissingTimeImplError('TimeAdapter');\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the given time.\r\n   * @param time The date time to select.\r\n   */\r\n  select(time: D) {\r\n    const oldValue = this.selected;\r\n    const value = this._timeAdapter.clone(time);\r\n    this.selected = value;\r\n    if (!this._timeAdapter.sameTime(oldValue, value)) {\r\n      this._selectedChange.next(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register an input with this time select.\r\n   * @param input The time select input to register with this time select.\r\n   */\r\n  registerInput(input: MatTimeSelectInputDirective<D>) {\r\n    if (this._timeSelectInput) {\r\n      throw Error('A MatTimeSelect can only be associated with a single input.');\r\n    }\r\n    this._timeSelectInput = input;\r\n    this._inputSubscription = this._timeSelectInput.valueChange.subscribe((value: D | null) => this.selected = value);\r\n  }\r\n\r\n  /** Open the time select. */\r\n  open() {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._timeSelectInput) {\r\n      throw Error('Attempted to open an MatTimeSelect with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this._openAsPopup();\r\n    this._opened = true;\r\n    this.openStream.emit();\r\n  }\r\n\r\n  /** Close the time select. */\r\n  close() {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._popupComponentPortal && this._popupComponentPortal.isAttached) {\r\n      this._popupComponentPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closeStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the time select as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the time select on focus, the user could be stuck with not being\r\n      // able to close the select panel at all. We work around it by making the logic, that marks\r\n      // the time select as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the time select as a popup. */\r\n  private _openAsPopup(): void {\r\n    this._popupComponentPortal = new ComponentPortal<MatTimeSelectContentComponent<D>>(\r\n      MatTimeSelectContentComponent,\r\n      this._viewContainerRef,\r\n      this._createInjector()\r\n    );\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._popupComponentPortal);\r\n      this._popupComponentRef.instance.valueChange.subscribe(\r\n        (value: Moment) => this.select(this._timeAdapter.deserialize(value.toISOString()))\r\n      );\r\n      this._setColor();\r\n\r\n      // Update the position once the select panel has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create a portal injector to inject time select initial data. */\r\n  private _createInjector(): PortalInjector {\r\n    const data: MatTimeSelectData<D> = {\r\n      value: this.startAt,\r\n      minTime: this._timeSelectInput && this._timeSelectInput.min,\r\n      maxTime: this._timeSelectInput && this._timeSelectInput.max\r\n    };\r\n    const injectorTokens = new WeakMap<any, any>([\r\n      [MAT_TIME_SELECT_DATA, data]\r\n    ]);\r\n    return new PortalInjector(this._injector, injectorTokens);\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-time-select-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => {\r\n        // Closing on alt + up is only valid when there's an input associated with the time select.\r\n        return event.keyCode === ESCAPE ||\r\n          (this._timeSelectInput && event.altKey && event.keyCode === UP_ARROW);\r\n      }))\r\n    ).subscribe(() => this.close());\r\n  }\r\n\r\n  /** Create the popup position strategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .flexibleConnectedTo(this._timeSelectInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-time-select-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition()\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._timeAdapter.isDateInstance(obj) && this._timeAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  /** Passes the current theme color along to the time select overlay. */\r\n  private _setColor(): void {\r\n    if (this._popupComponentRef) {\r\n      this._popupComponentRef.instance.color = this.color;\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {MAT_INPUT_VALUE_ACCESSOR, MatFormField, ThemePalette} from '@angular/material';\r\nimport {Observable, Subject, Subscription} from 'rxjs';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {MAT_TIME_FORMATS, MatTimeFormats} from './time-formats';\r\nimport {MatTimeSelectComponent} from './time-select.component';\r\n\r\n/**\r\n * An event used for time select input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatTimeSelectInputEvent instead.\r\n */\r\nexport class MatTimeSelectInputEvent<D> {\r\n\r\n  /** The new value for the target time select input. */\r\n  value: D;\r\n\r\n  constructor(\r\n    /** Reference to the time select input component that emitted the event. */\r\n    public target: MatTimeSelectInputDirective<D>,\r\n    /** Reference to the native input element associated with the time select input. */\r\n    public targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n\r\n}\r\n\r\n/** Directive used to connect an input to a MatTimeSelectComponent. */\r\n@Directive({\r\n  selector: 'input[matTimeSelect]',\r\n  providers: [\r\n    {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MatTimeSelectInputDirective), multi: true},\r\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatTimeSelectInputDirective), multi: true},\r\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatTimeSelectInputDirective}\r\n  ],\r\n  exportAs: 'matTimeSelectInput'\r\n})\r\nexport class MatTimeSelectInputDirective<D> implements OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private _timeSelectSubscription = Subscription.EMPTY;\r\n  private _localeSubscription: Subscription = Subscription.EMPTY;\r\n\r\n  private _timeSelect: MatTimeSelectComponent<D>;\r\n\r\n  private _value: D;\r\n  private _min: D;\r\n  private _max: D;\r\n  private _disabled: boolean;\r\n\r\n  private _valueChange: Subject<D | null> = new Subject<D | null>();\r\n  private _disabledChange: Subject<boolean> = new Subject<boolean>();\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private readonly _parseValidator: ValidatorFn;\r\n  /** The form control validator for the min date time. */\r\n  private readonly _minValidator: ValidatorFn;\r\n  /** The form control validator for the max date time. */\r\n  private readonly _maxValidator: ValidatorFn;\r\n  /** The combined form control validator for this input. */\r\n  private readonly _validator: ValidatorFn | null;\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly timeChange: EventEmitter<MatTimeSelectInputEvent<D>> = new EventEmitter<MatTimeSelectInputEvent<D>>();\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly timeInput: EventEmitter<MatTimeSelectInputEvent<D>> = new EventEmitter<MatTimeSelectInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  valueChange: Observable<D | null> = this._valueChange.asObservable();\r\n  /** Emits when the disabled state has changed. */\r\n  disabledChange: Observable<boolean> = this._disabledChange.asObservable();\r\n\r\n  private _onChange: (value: any) => void = () => {};\r\n  private _onTouched: () => void = () => {};\r\n  private _onValidatorChange: () => void = () => {};\r\n\r\n  /** The time select that this input is associated with. */\r\n  @Input()\r\n  set matTimeSelect(value: MatTimeSelectComponent<D>) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this._timeSelect = value;\r\n    this._timeSelect.registerInput(this);\r\n    this._timeSelectSubscription.unsubscribe();\r\n\r\n    this._timeSelectSubscription = this._timeSelect.selectedChange.subscribe((selected: D) => {\r\n      this.value = selected;\r\n      this._onChange(selected);\r\n      this._onTouched();\r\n      this.timeInput.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));\r\n      this.timeChange.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));\r\n    });\r\n  }\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null { return this._value; }\r\n  set value(value: D | null) {\r\n    value = this._timeAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._timeAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n    const oldValue = this._value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    if (!this._timeAdapter.sameTime(oldValue, value)) {\r\n      this._valueChange.next(value);\r\n    }\r\n  }\r\n\r\n  /** The minimum valid date time. */\r\n  @Input()\r\n  get min(): D | null { return this._min; }\r\n  set min(value: D | null) {\r\n    this._min = this._getValidDateOrNull(this._timeAdapter.deserialize(value));\r\n    this._onValidatorChange();\r\n  }\r\n\r\n  /** The maximum valid date time. */\r\n  @Input()\r\n  get max(): D | null { return this._max; }\r\n  set max(value: D | null) {\r\n    this._max = this._getValidDateOrNull(this._timeAdapter.deserialize(value));\r\n    this._onValidatorChange();\r\n  }\r\n\r\n  /** Whether the time select input is disabled. */\r\n  @HostBinding()\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const disabled = coerceBooleanProperty(value);\r\n    const element = this._elementRef.nativeElement;\r\n    if (this.disabled !== disabled) {\r\n      this._disabled = disabled;\r\n      this._disabledChange.next(disabled);\r\n    }\r\n    if (disabled && element.blur) {\r\n      element.blur();\r\n    }\r\n  }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.aria-haspopup')\r\n  get _ariaHasPopup(): boolean { return true; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.aria-owns')\r\n  get _ariaOwns(): boolean { return (this._timeSelect && this._timeSelect.opened && !!this._timeSelect.id) || null; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.min')\r\n  get _minTime(): string | null { return this.min ? this._timeAdapter.toIso8601(this.min) : null; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.max')\r\n  get _maxTime(): string | null { return this.max ? this._timeAdapter.toIso8601(this.max) : null; }\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLInputElement>,\r\n              @Optional() private _timeAdapter: TimeAdapter<D>,\r\n              @Optional() @Inject(MAT_TIME_FORMATS) private _timeFormats: MatTimeFormats,\r\n              @Optional() private _formField: MatFormField) {\r\n    this._parseValidator = (): ValidationErrors | null => {\r\n      return this._lastValueValid ? null : {'matTimeSelectParse': {'text': this._elementRef.nativeElement.value}};\r\n    };\r\n\r\n    this._minValidator = (control: AbstractControl): ValidationErrors | null => {\r\n      const value = this._getValidDateOrNull(this._timeAdapter.deserialize(control.value));\r\n      return !this.min || !value || this._timeAdapter.compareTime(this.min, value) <= 0 ?\r\n        null : {'matTimeSelectMin': {'min': this.min, 'actual': value}};\r\n    };\r\n\r\n    this._maxValidator = (control: AbstractControl): ValidationErrors | null => {\r\n      const value = this._getValidDateOrNull(this._timeAdapter.deserialize(control.value));\r\n      return !this.max || !value || this._timeAdapter.compareTime(this.max, value) >= 0 ?\r\n        null : {'matTimeSelectMax': {'max': this.max, 'actual': value}};\r\n    };\r\n\r\n    this._validator = Validators.compose([\r\n      this._parseValidator,\r\n      this._minValidator,\r\n      this._maxValidator\r\n    ]);\r\n\r\n    this._localeSubscription = this._timeAdapter.localeChanges.subscribe(\r\n      () => this.value = this.value\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._timeSelectSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: any): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** @docs-private */\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(control) : null;\r\n  }\r\n\r\n  /** @docs-private */\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._onValidatorChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Handle keydown event.\r\n   * @param event The event object.\r\n   */\r\n  @HostListener('keydown', ['$event'])\r\n  onKeydown(event: KeyboardEvent) {\r\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n\r\n    if (this._timeSelect && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n      this._timeSelect.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle input event.\r\n   * @param value The current value of the input.\r\n   */\r\n  @HostListener('input', ['$event.target.value'])\r\n  onInput(value: string) {\r\n    let time = this._timeAdapter.parse(value, this._timeFormats.parse.timeInput);\r\n    this._lastValueValid = !time || this._timeAdapter.isValid(time);\r\n    time = this._getValidDateOrNull(time);\r\n\r\n    if (!this._timeAdapter.sameTime(this._value, time)) {\r\n      this._value = time;\r\n      this._onChange(time);\r\n      this._valueChange.next(time);\r\n      this.timeInput.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle change event.\r\n   */\r\n  @HostListener('change')\r\n  onChange() {\r\n    this.timeChange.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /**\r\n   * Handle blur event.\r\n   */\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n    this._onTouched();\r\n  }\r\n\r\n  /** Returns the palette used by the input's form field, if any. */\r\n  getThemePalette(): ThemePalette {\r\n    return this._formField ? this._formField.color : undefined;\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the time select popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  private _formatValue(value: D | null) {\r\n    this._elementRef.nativeElement.value = value ? this._timeAdapter.format(value, this._timeFormats.display.timeInput) : '';\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._timeAdapter.isDateInstance(obj) && this._timeAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatButton} from '@angular/material';\r\nimport {merge, of, Subscription} from 'rxjs';\r\nimport {MatTimeSelectIntl} from './time-select-intl.service';\r\nimport {MatTimeSelectComponent} from './time-select.component';\r\n\r\n/** Can be used to override the icon of a `matTimeSelectToggle`. */\r\n@Directive({\r\n  selector: '[matTimeSelectToggleIcon]'\r\n})\r\nexport class MatTimeSelectToggleIconDirective {}\r\n\r\n@Component({\r\n  selector: 'mat-time-select-toggle',\r\n  templateUrl: './time-select-toggle.component.html',\r\n  styleUrls: ['./time-select-toggle.component.scss'],\r\n  exportAs: 'matTimeSelectToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeSelectToggleComponent<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  private _disabled: boolean;\r\n  private _disableRipple: boolean;\r\n\r\n  /** Time select instance that the button will toggle. */\r\n  @Input('for') timeSelect: MatTimeSelectComponent<D>;\r\n  /** Tabindex for the toggle. */\r\n  @Input() tabIndex: number | null;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(MatTimeSelectToggleIconDirective) customIcon: MatTimeSelectToggleIconDirective;\r\n  /** Underlying button element. */\r\n  @ViewChild('button') button: MatButton;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined ? this.timeSelect.disabled : this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether ripples on the toggle should be disabled. */\r\n  @Input()\r\n  get disableRipple(): boolean {\r\n    return this._disableRipple;\r\n  }\r\n  set disableRipple(value: boolean) {\r\n    this._disableRipple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class')\r\n  get class(): string { return 'mat-time-select-toggle'; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): string { return '-1'; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class.mat-time-select-toggle-active')\r\n  get active(): boolean { return this.timeSelect && this.timeSelect.opened; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class.mat-accent')\r\n  get accent(): boolean { return this.timeSelect && this.timeSelect.color === 'accent'; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class.mat-warn')\r\n  get warn(): boolean { return this.timeSelect && this.timeSelect.color === 'warn'; }\r\n\r\n  constructor(public _intl: MatTimeSelectIntl,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Attribute('tabindex') defaultTabIndex: string) {\r\n    const parsedTabIndex = parseInt(defaultTabIndex, 10);\r\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.timeSelect) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  /** Handle focus event. */\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    this.button.focus();\r\n  }\r\n\r\n  /**\r\n   * Open the time select.\r\n   * @param event The triggered event to open the time select.\r\n   */\r\n  open(event: Event): void {\r\n    if (this.timeSelect && !this.disabled) {\r\n      this.timeSelect.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const timeSelectDisabled = this.timeSelect ? this.timeSelect.disabledChange : of();\r\n    const inputDisabled = this.timeSelect && this.timeSelect._timeSelectInput ?\r\n      this.timeSelect._timeSelectInput.disabledChange : of();\r\n    const timeSelectToggled = this.timeSelect ?\r\n      merge(this.timeSelect.openStream, this.timeSelect.closeStream) :\r\n      of();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      timeSelectDisabled,\r\n      inputDisabled,\r\n      timeSelectToggled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {MatButtonModule, MatButtonToggleModule, MatIconModule, MatRippleModule} from '@angular/material';\r\n\r\nimport {MatTimeSelectIntl} from './time-select-intl.service';\r\n\r\nimport {\r\n  MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  MatTimeSelectComponent,\r\n  MatTimeSelectContentComponent\r\n} from './time-select.component';\r\nimport {MatTimeSelectInputDirective} from './time-select-input.directive';\r\nimport {MatTimeSelectToggleComponent, MatTimeSelectToggleIconDirective} from './time-select-toggle.component';\r\nimport {MatTimeUnitOptionComponent} from './time-unit-option.component';\r\nimport {MatTimeUnitSelectComponent} from './time-unit-select.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n    PortalModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    MatRippleModule\r\n  ],\r\n  declarations: [\r\n    MatTimeSelectComponent,\r\n    MatTimeSelectContentComponent,\r\n    MatTimeSelectInputDirective,\r\n    MatTimeSelectToggleComponent,\r\n    MatTimeSelectToggleIconDirective,\r\n    MatTimeUnitOptionComponent,\r\n    MatTimeUnitSelectComponent\r\n  ],\r\n  exports: [\r\n    MatTimeSelectComponent,\r\n    MatTimeSelectContentComponent,\r\n    MatTimeSelectInputDirective,\r\n    MatTimeSelectToggleComponent,\r\n    MatTimeSelectToggleIconDirective,\r\n    MatTimeUnitOptionComponent,\r\n    MatTimeUnitSelectComponent\r\n  ],\r\n  entryComponents: [\r\n    MatTimeSelectContentComponent\r\n  ],\r\n  providers: [\r\n    MatTimeSelectIntl,\r\n    MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER\r\n  ]\r\n})\r\nexport class MatTimeSelectModule { }\r\n","import {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {Moment} from 'moment';\r\n\r\nimport * as _moment from 'moment';\r\n\r\nconst moment = _moment;\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with times. */\r\n@Injectable()\r\nexport class NativeTimeAdapter extends TimeAdapter<Date> {\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) locale: string,\r\n              @Optional() private _dateAdapter: DateAdapter<Date>) {\r\n    super();\r\n    this.setLocale(locale);\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return this._dateAdapter.getYear(date);\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return this._dateAdapter.getMonth(date);\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return this._dateAdapter.getDate(date);\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return this._dateAdapter.getDayOfWeek(date);\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n\r\n  getSecond(date: Date): number {\r\n    return date.getSeconds();\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    return this._dateAdapter.getYearName(date);\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return this._dateAdapter.getMonthNames(style);\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return this._dateAdapter.getDateNames();\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return this._dateAdapter.getDayOfWeekNames(style);\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return this._dateAdapter.getFirstDayOfWeek();\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this._dateAdapter.getNumDaysInMonth(date);\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return new Date(date.getTime());\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    return this._dateAdapter.createDate(year, month, date);\r\n  }\r\n\r\n  createTime(hour: number = 0, minute: number = 0, second: number = 0): Date {\r\n    if (hour < 0 || hour > 23) {\r\n      throw new Error(`Invalid hour ${hour}. Hour has to be between 0 and 23.`);\r\n    }\r\n\r\n    if (minute < 0 || minute > 59) {\r\n      throw new Error(`Invalid minute ${minute}. Minute has to be between 0 and 59.`);\r\n    }\r\n\r\n    if (second < 0 || second > 59) {\r\n      throw new Error(`Invalid second ${second}. Second has to be between 0 and 59.`);\r\n    }\r\n\r\n    const date = new Date();\r\n    date.setHours(hour,  minute, second);\r\n    return date;\r\n  }\r\n\r\n  today(): Date {\r\n    return this.now();\r\n  }\r\n\r\n  now(): Date {\r\n    return new Date(Date.now());\r\n  }\r\n\r\n  parse(value: any, parseFormat: any): Date | null {\r\n    return this._dateAdapter.parse(value, parseFormat);\r\n  }\r\n\r\n  format(date: Date, displayFormat: any): string {\r\n    return this._dateAdapter.format(date, displayFormat);\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this._dateAdapter.addCalendarYears(date, years);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    return this._dateAdapter.addCalendarMonths(date, months);\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._dateAdapter.addCalendarDays(date, days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    const dateString = this._dateAdapter.toIso8601(date);\r\n    const timeString = [\r\n      this._2digit(date.getUTCHours()),\r\n      this._2digit(date.getUTCMinutes()),\r\n      this._2digit(date.getUTCSeconds())\r\n    ].join(':');\r\n    return `${dateString}T${timeString}Z`;\r\n  }\r\n\r\n  toMoment(date: Date): Moment {\r\n    return moment(date).locale(this.locale);\r\n  }\r\n\r\n  deserialize(value: any): Date | null {\r\n    return this._dateAdapter.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return this._dateAdapter.isDateInstance(obj);\r\n  }\r\n\r\n  isValid(date: Date): boolean {\r\n    return this._dateAdapter.isValid(date);\r\n  }\r\n\r\n  invalid(): Date {\r\n    return this._dateAdapter.invalid();\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n}\r\n","import {MatTimeFormats} from './time-formats';\r\n\r\nexport const MAT_NATIVE_TIME_FORMATS: MatTimeFormats = {\r\n  parse: {\r\n    timeInput: null\r\n  },\r\n  display: {\r\n    timeInput: {hour: 'numeric', minute: 'numeric'},\r\n    timeA11yLabel: {hour: 'numeric', minute: '2-digit'}\r\n  }\r\n};\r\n","import {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {MAT_TIME_FORMATS} from './time-formats';\r\nimport {NativeTimeAdapter} from './native-time-adapter.service';\r\nimport {MAT_NATIVE_TIME_FORMATS} from './native-time-formats';\r\n\r\n@NgModule({\r\n  providers: [\r\n    {provide: TimeAdapter, useClass: NativeTimeAdapter, deps: [MAT_DATE_LOCALE, DateAdapter]},\r\n    {provide: MAT_TIME_FORMATS, useValue: MAT_NATIVE_TIME_FORMATS}\r\n  ]\r\n})\r\nexport class MatNativeTimeModule { }\r\n","import {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {Moment} from 'moment';\r\n\r\nimport * as _moment from 'moment';\r\n\r\nconst moment = _moment;\r\n\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\n@Injectable()\r\nexport class MomentTimeAdapter extends TimeAdapter<Moment> {\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) locale: string,\r\n              @Optional() private _dateAdapter: DateAdapter<Moment>) {\r\n    super();\r\n    this.setLocale(locale || moment.locale());\r\n  }\r\n\r\n  getYear(date: Moment): number {\r\n    return this.clone(date).year();\r\n  }\r\n\r\n  getMonth(date: Moment): number {\r\n    return this.clone(date).month();\r\n  }\r\n\r\n  getDate(date: Moment): number {\r\n    return this.clone(date).date();\r\n  }\r\n\r\n  getDayOfWeek(date: Moment): number {\r\n    return this.clone(date).day();\r\n  }\r\n\r\n  getHour(date: Moment): number {\r\n    return this.clone(date).hour();\r\n  }\r\n\r\n  getMinute(date: Moment): number {\r\n    return this.clone(date).minute();\r\n  }\r\n\r\n  getSecond(date: Moment): number {\r\n    return this.clone(date).second();\r\n  }\r\n\r\n  clone(date: Moment): Moment {\r\n    return date.clone().locale(this.locale);\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Moment {\r\n    return this.clone(this._dateAdapter.createDate(year, month, date));\r\n  }\r\n\r\n  createTime(hour: number = 0, minute: number = 0, second: number = 0): Moment {\r\n    if (hour < 0 || hour > 23) {\r\n      throw new Error(`Invalid hour ${hour}. Hour has to be between 0 and 23.`);\r\n    }\r\n\r\n    if (minute < 0 || minute > 59) {\r\n      throw new Error(`Invalid minute ${minute}. Minute has to be between 0 and 59.`);\r\n    }\r\n\r\n    if (second < 0 || second > 59) {\r\n      throw new Error(`Invalid second ${second}. Second has to be between 0 and 59.`);\r\n    }\r\n\r\n    return moment({hour, minute, second}).locale(this.locale);\r\n  }\r\n\r\n  today(): Moment {\r\n    return this.now();\r\n  }\r\n\r\n  now(): Moment {\r\n    return moment().locale(this.locale);\r\n  }\r\n\r\n  parse(value: any, parseFormat: string): Moment | null {\r\n    if (value && typeof value === 'string') {\r\n      return moment(value, parseFormat, this.locale);\r\n    }\r\n    return value ? moment(value).locale(this.locale) : null;\r\n  }\r\n\r\n  format(date: Moment, displayFormat: string): string {\r\n    date = this.clone(date);\r\n    if (!this.isValid(date)) {\r\n      throw new Error('MomentTimeAdapter: Cannot format invalid date.');\r\n    }\r\n    return date.format(displayFormat);\r\n  }\r\n\r\n  addCalendarYears(date: Moment, years: number): Moment {\r\n    return this.clone(date).add({years});\r\n  }\r\n\r\n  addCalendarMonths(date: Moment, months: number): Moment {\r\n    return this.clone(date).add({months});\r\n  }\r\n\r\n  addCalendarDays(date: Moment, days: number): Moment {\r\n    return this.clone(date).add({days});\r\n  }\r\n\r\n  toIso8601(date: Moment): string {\r\n    return this.clone(date).format();\r\n  }\r\n\r\n  toMoment(date: Moment): Moment {\r\n    return this.clone(date);\r\n  }\r\n\r\n  deserialize(value: any): Moment | null {\r\n    let date: Moment;\r\n    if (value instanceof Date) {\r\n      date = moment(value);\r\n    }\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      date = moment(value, moment.ISO_8601);\r\n    }\r\n    if (date && this.isValid(date)) {\r\n      return date;\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return moment.isMoment(obj);\r\n  }\r\n\r\n  isValid(date: Moment): boolean {\r\n    return this.clone(date).isValid();\r\n  }\r\n\r\n  invalid(): Moment {\r\n    return moment.invalid();\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return [];\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return [];\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return 0;\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return [];\r\n  }\r\n\r\n  getNumDaysInMonth(date: Moment): number {\r\n    return 0;\r\n  }\r\n\r\n  getYearName(date: Moment): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {MatTimeFormats} from './time-formats';\r\n\r\nexport const MAT_MOMENT_TIME_FORMATS: MatTimeFormats = {\r\n  parse: {\r\n    timeInput: 'LT'\r\n  },\r\n  display: {\r\n    timeInput: 'LT',\r\n    timeA11yLabel: 'LT'\r\n  }\r\n};\r\n","import {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {MAT_TIME_FORMATS} from './time-formats';\r\nimport {MomentTimeAdapter} from './moment-time-adapter.service';\r\nimport {MAT_MOMENT_TIME_FORMATS} from './moment-time-formats';\r\n\r\n@NgModule({\r\n  providers: [\r\n    {provide: TimeAdapter, useClass: MomentTimeAdapter, deps: [MAT_DATE_LOCALE, DateAdapter]},\r\n    {provide: MAT_TIME_FORMATS, useValue: MAT_MOMENT_TIME_FORMATS}\r\n  ]\r\n})\r\nexport class MatMomentTimeModule { }\r\n"]}