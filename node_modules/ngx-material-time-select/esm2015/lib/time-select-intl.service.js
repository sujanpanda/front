/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * TimeSelect data that requires internationalization.
 */
export class MatTimeSelectIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /**
         * A label for the button used to open the time select popup (used by screen readers).
         */
        this.openTimeSelectLabel = 'Open time select';
        /**
         * A label for the a.m. button toggle (used by screen readers).
         */
        this.amLabel = 'AM';
        /**
         * A label for the p.m. button toggle (used by screen readers).
         */
        this.pmLabel = 'PM';
    }
}
MatTimeSelectIntl.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * Stream that emits whenever the labels here are changed. Use this to notify
     * components if the labels have changed after initialization.
     * @type {?}
     */
    MatTimeSelectIntl.prototype.changes;
    /**
     * A label for the button used to open the time select popup (used by screen readers).
     * @type {?}
     */
    MatTimeSelectIntl.prototype.openTimeSelectLabel;
    /**
     * A label for the a.m. button toggle (used by screen readers).
     * @type {?}
     */
    MatTimeSelectIntl.prototype.amLabel;
    /**
     * A label for the p.m. button toggle (used by screen readers).
     * @type {?}
     */
    MatTimeSelectIntl.prototype.pmLabel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1zZWxlY3QtaW50bC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdGVyaWFsLXRpbWUtc2VsZWN0LyIsInNvdXJjZXMiOlsibGliL3RpbWUtc2VsZWN0LWludGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7O0FBSTdCLE1BQU0sT0FBTyxpQkFBaUI7SUFEOUI7Ozs7O1FBT1csWUFBTyxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDOzs7O1FBR3RELHdCQUFtQixHQUFHLGtCQUFrQixDQUFDOzs7O1FBR3pDLFlBQU8sR0FBRyxJQUFJLENBQUM7Ozs7UUFHZixZQUFPLEdBQUcsSUFBSSxDQUFDO0lBRWpCLENBQUM7OztZQWxCQSxVQUFVOzs7Ozs7OztJQU9ULG9DQUFzRDs7Ozs7SUFHdEQsZ0RBQXlDOzs7OztJQUd6QyxvQ0FBZTs7Ozs7SUFHZixvQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKiogVGltZVNlbGVjdCBkYXRhIHRoYXQgcmVxdWlyZXMgaW50ZXJuYXRpb25hbGl6YXRpb24uICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE1hdFRpbWVTZWxlY3RJbnRsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbmV2ZXIgdGhlIGxhYmVscyBoZXJlIGFyZSBjaGFuZ2VkLiBVc2UgdGhpcyB0byBub3RpZnlcclxuICAgKiBjb21wb25lbnRzIGlmIHRoZSBsYWJlbHMgaGF2ZSBjaGFuZ2VkIGFmdGVyIGluaXRpYWxpemF0aW9uLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGNoYW5nZXM6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG5cclxuICAvKiogQSBsYWJlbCBmb3IgdGhlIGJ1dHRvbiB1c2VkIHRvIG9wZW4gdGhlIHRpbWUgc2VsZWN0IHBvcHVwICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cclxuICBvcGVuVGltZVNlbGVjdExhYmVsID0gJ09wZW4gdGltZSBzZWxlY3QnO1xyXG5cclxuICAvKiogQSBsYWJlbCBmb3IgdGhlIGEubS4gYnV0dG9uIHRvZ2dsZSAodXNlZCBieSBzY3JlZW4gcmVhZGVycykuICovXHJcbiAgYW1MYWJlbCA9ICdBTSc7XHJcblxyXG4gIC8qKiBBIGxhYmVsIGZvciB0aGUgcC5tLiBidXR0b24gdG9nZ2xlICh1c2VkIGJ5IHNjcmVlbiByZWFkZXJzKS4gKi9cclxuICBwbUxhYmVsID0gJ1BNJztcclxuXHJcbn1cclxuIl19