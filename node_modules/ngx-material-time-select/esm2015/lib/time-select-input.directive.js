/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, Optional, Output } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW } from '@angular/cdk/keycodes';
import { MAT_INPUT_VALUE_ACCESSOR, MatFormField } from '@angular/material';
import { Subject, Subscription } from 'rxjs';
import { TimeAdapter } from './time-adapter.service';
import { MAT_TIME_FORMATS } from './time-formats';
import { MatTimeSelectComponent } from './time-select.component';
/**
 * An event used for time select input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use MatTimeSelectInputEvent instead.
 * @template D
 */
export class MatTimeSelectInputEvent {
    /**
     * @param {?} target
     * @param {?} targetElement
     */
    constructor(target, targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
}
if (false) {
    /**
     * The new value for the target time select input.
     * @type {?}
     */
    MatTimeSelectInputEvent.prototype.value;
    /**
     * Reference to the time select input component that emitted the event.
     * @type {?}
     */
    MatTimeSelectInputEvent.prototype.target;
    /**
     * Reference to the native input element associated with the time select input.
     * @type {?}
     */
    MatTimeSelectInputEvent.prototype.targetElement;
}
/**
 * Directive used to connect an input to a MatTimeSelectComponent.
 * @template D
 */
export class MatTimeSelectInputDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _timeAdapter
     * @param {?} _timeFormats
     * @param {?} _formField
     */
    constructor(_elementRef, _timeAdapter, _timeFormats, _formField) {
        this._elementRef = _elementRef;
        this._timeAdapter = _timeAdapter;
        this._timeFormats = _timeFormats;
        this._formField = _formField;
        this._timeSelectSubscription = Subscription.EMPTY;
        this._localeSubscription = Subscription.EMPTY;
        this._valueChange = new Subject();
        this._disabledChange = new Subject();
        /**
         * Emits when a `change` event is fired on this `<input>`.
         */
        this.timeChange = new EventEmitter();
        /**
         * Emits when an `input` event is fired on this `<input>`.
         */
        this.timeInput = new EventEmitter();
        /**
         * Emits when the value changes (either due to user input or programmatic change).
         */
        this.valueChange = this._valueChange.asObservable();
        /**
         * Emits when the disabled state has changed.
         */
        this.disabledChange = this._disabledChange.asObservable();
        this._onChange = () => { };
        this._onTouched = () => { };
        this._onValidatorChange = () => { };
        this._parseValidator = () => {
            return this._lastValueValid ? null : { 'matTimeSelectParse': { 'text': this._elementRef.nativeElement.value } };
        };
        this._minValidator = (control) => {
            /** @type {?} */
            const value = this._getValidDateOrNull(this._timeAdapter.deserialize(control.value));
            return !this.min || !value || this._timeAdapter.compareTime(this.min, value) <= 0 ?
                null : { 'matTimeSelectMin': { 'min': this.min, 'actual': value } };
        };
        this._maxValidator = (control) => {
            /** @type {?} */
            const value = this._getValidDateOrNull(this._timeAdapter.deserialize(control.value));
            return !this.max || !value || this._timeAdapter.compareTime(this.max, value) >= 0 ?
                null : { 'matTimeSelectMax': { 'max': this.max, 'actual': value } };
        };
        this._validator = Validators.compose([
            this._parseValidator,
            this._minValidator,
            this._maxValidator
        ]);
        this._localeSubscription = this._timeAdapter.localeChanges.subscribe(() => this.value = this.value);
    }
    /**
     * The time select that this input is associated with.
     * @param {?} value
     * @return {?}
     */
    set matTimeSelect(value) {
        if (!value) {
            return;
        }
        this._timeSelect = value;
        this._timeSelect.registerInput(this);
        this._timeSelectSubscription.unsubscribe();
        this._timeSelectSubscription = this._timeSelect.selectedChange.subscribe((selected) => {
            this.value = selected;
            this._onChange(selected);
            this._onTouched();
            this.timeInput.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));
            this.timeChange.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));
        });
    }
    /**
     * The value of the input.
     * @return {?}
     */
    get value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        value = this._timeAdapter.deserialize(value);
        this._lastValueValid = !value || this._timeAdapter.isValid(value);
        value = this._getValidDateOrNull(value);
        /** @type {?} */
        const oldValue = this._value;
        this._value = value;
        this._formatValue(value);
        if (!this._timeAdapter.sameTime(oldValue, value)) {
            this._valueChange.next(value);
        }
    }
    /**
     * The minimum valid date time.
     * @return {?}
     */
    get min() { return this._min; }
    /**
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = this._getValidDateOrNull(this._timeAdapter.deserialize(value));
        this._onValidatorChange();
    }
    /**
     * The maximum valid date time.
     * @return {?}
     */
    get max() { return this._max; }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = this._getValidDateOrNull(this._timeAdapter.deserialize(value));
        this._onValidatorChange();
    }
    /**
     * Whether the time select input is disabled.
     * @return {?}
     */
    get disabled() { return this._disabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const disabled = coerceBooleanProperty(value);
        /** @type {?} */
        const element = this._elementRef.nativeElement;
        if (this.disabled !== disabled) {
            this._disabled = disabled;
            this._disabledChange.next(disabled);
        }
        if (disabled && element.blur) {
            element.blur();
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get _ariaHasPopup() { return true; }
    /**
     * \@docs-private
     * @return {?}
     */
    get _ariaOwns() { return (this._timeSelect && this._timeSelect.opened && !!this._timeSelect.id) || null; }
    /**
     * \@docs-private
     * @return {?}
     */
    get _minTime() { return this.min ? this._timeAdapter.toIso8601(this.min) : null; }
    /**
     * \@docs-private
     * @return {?}
     */
    get _maxTime() { return this.max ? this._timeAdapter.toIso8601(this.max) : null; }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._timeSelectSubscription.unsubscribe();
        this._localeSubscription.unsubscribe();
        this._valueChange.complete();
        this._disabledChange.complete();
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * \@docs-private
     * @param {?} control
     * @return {?}
     */
    validate(control) {
        return this._validator ? this._validator(control) : null;
    }
    /**
     * \@docs-private
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this._onValidatorChange = fn;
    }
    /**
     * Handle keydown event.
     * @param {?} event The event object.
     * @return {?}
     */
    onKeydown(event) {
        /** @type {?} */
        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;
        if (this._timeSelect && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {
            this._timeSelect.open();
            event.preventDefault();
        }
    }
    /**
     * Handle input event.
     * @param {?} value The current value of the input.
     * @return {?}
     */
    onInput(value) {
        /** @type {?} */
        let time = this._timeAdapter.parse(value, this._timeFormats.parse.timeInput);
        this._lastValueValid = !time || this._timeAdapter.isValid(time);
        time = this._getValidDateOrNull(time);
        if (!this._timeAdapter.sameTime(this._value, time)) {
            this._value = time;
            this._onChange(time);
            this._valueChange.next(time);
            this.timeInput.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));
        }
    }
    /**
     * Handle change event.
     * @return {?}
     */
    onChange() {
        this.timeChange.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));
    }
    /**
     * Handle blur event.
     * @return {?}
     */
    onBlur() {
        if (this.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    }
    /**
     * Returns the palette used by the input's form field, if any.
     * @return {?}
     */
    getThemePalette() {
        return this._formField ? this._formField.color : undefined;
    }
    /**
     * Gets the element that the time select popup should be connected to.
     * @return {?} The element to connect the popup to.
     */
    getConnectedOverlayOrigin() {
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
    }
    /**
     * Formats a value and sets it on the input element.
     * @private
     * @param {?} value
     * @return {?}
     */
    _formatValue(value) {
        this._elementRef.nativeElement.value = value ? this._timeAdapter.format(value, this._timeFormats.display.timeInput) : '';
    }
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._timeAdapter.isDateInstance(obj) && this._timeAdapter.isValid(obj) ? obj : null;
    }
}
MatTimeSelectInputDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[matTimeSelect]',
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MatTimeSelectInputDirective), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => MatTimeSelectInputDirective), multi: true },
                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatTimeSelectInputDirective }
                ],
                exportAs: 'matTimeSelectInput'
            },] }
];
/** @nocollapse */
MatTimeSelectInputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: TimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TIME_FORMATS,] }] },
    { type: MatFormField, decorators: [{ type: Optional }] }
];
MatTimeSelectInputDirective.propDecorators = {
    timeChange: [{ type: Output }],
    timeInput: [{ type: Output }],
    matTimeSelect: [{ type: Input }],
    value: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    disabled: [{ type: HostBinding }, { type: Input }],
    _ariaHasPopup: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
    _ariaOwns: [{ type: HostBinding, args: ['attr.aria-owns',] }],
    _minTime: [{ type: HostBinding, args: ['attr.min',] }],
    _maxTime: [{ type: HostBinding, args: ['attr.max',] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onInput: [{ type: HostListener, args: ['input', ['$event.target.value'],] }],
    onChange: [{ type: HostListener, args: ['change',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._timeSelectSubscription;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._localeSubscription;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._timeSelect;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._value;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._min;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._max;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._valueChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._disabledChange;
    /**
     * The form control validator for whether the input parses.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._parseValidator;
    /**
     * The form control validator for the min date time.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._minValidator;
    /**
     * The form control validator for the max date time.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._maxValidator;
    /**
     * The combined form control validator for this input.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._validator;
    /**
     * Whether the last value set on the input was valid.
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._lastValueValid;
    /**
     * Emits when a `change` event is fired on this `<input>`.
     * @type {?}
     */
    MatTimeSelectInputDirective.prototype.timeChange;
    /**
     * Emits when an `input` event is fired on this `<input>`.
     * @type {?}
     */
    MatTimeSelectInputDirective.prototype.timeInput;
    /**
     * Emits when the value changes (either due to user input or programmatic change).
     * @type {?}
     */
    MatTimeSelectInputDirective.prototype.valueChange;
    /**
     * Emits when the disabled state has changed.
     * @type {?}
     */
    MatTimeSelectInputDirective.prototype.disabledChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._onValidatorChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._timeAdapter;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._timeFormats;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectInputDirective.prototype._formField;
}
//# sourceMappingURL=data:application/json;base64,