/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, Inject, InjectionToken, Injector, Input, NgZone, Optional, Output, QueryList, ViewChildren, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Directionality } from '@angular/cdk/bidi';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { mixinColor } from '@angular/material';
import { merge, Subject, Subscription } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { TimeAdapter } from './time-adapter.service';
import { createMissingTimeImplError } from './time-select-errors';
import { MatTimeSelectIntl } from './time-select-intl.service';
import { MatTimeUnitSelectComponent } from './time-unit-select.component';
/**
 * Used to generate a unique ID for each time select instance.
 * @type {?}
 */
let timeSelectUid = 0;
/**
 * Injection token used to initialize the time select data.
 * @type {?}
 */
export const MAT_TIME_SELECT_DATA = new InjectionToken('mat-time-select-data');
/**
 * Injection token that determines the scroll handling while the time select is opened.
 * @type {?}
 */
export const MAT_TIME_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-time-select-scroll-strategy');
/**
 * \@docs-private
 * @param {?} overlay
 * @return {?}
 */
export function MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
/**
 * \@docs-private
 * @type {?}
 */
export const MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: MAT_TIME_SELECT_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY
};
/**
 * @record
 * @template D
 */
export function MatTimeSelectData() { }
if (false) {
    /** @type {?|undefined} */
    MatTimeSelectData.prototype.units;
    /** @type {?|undefined} */
    MatTimeSelectData.prototype.value;
    /** @type {?|undefined} */
    MatTimeSelectData.prototype.minTime;
    /** @type {?|undefined} */
    MatTimeSelectData.prototype.maxTime;
}
/**
 * \@docs-private
 */
export class MatTimeSelectContentBase {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
if (false) {
    /** @type {?} */
    MatTimeSelectContentBase.prototype._elementRef;
}
/** @type {?} */
export const _MatTimeSelectContentMixinBase = mixinColor(MatTimeSelectContentBase);
/**
 * Component used as the content for the time select popup.
 * \@docs-private
 * @template D
 */
export class MatTimeSelectContentComponent extends _MatTimeSelectContentMixinBase {
    /**
     * @param {?} elementRef
     * @param {?} _intl
     * @param {?} _timeAdapter
     * @param {?} data
     */
    constructor(elementRef, _intl, _timeAdapter, data) {
        super(elementRef);
        this._intl = _intl;
        this._timeAdapter = _timeAdapter;
        /**
         * Emits when the time select content selected time has been changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * \@docs-private
         */
        this.class = 'mat-time-select-content';
        if (!this._timeAdapter) {
            throw createMissingTimeImplError('TimeAdapter');
        }
        /** @type {?} */
        const time = this._timeAdapter.isDateInstance(data.value) && this._timeAdapter.isValid(data.value) ?
            this._timeAdapter.clone(data.value) : this._timeAdapter.now();
        /** @type {?} */
        const value = this._timeAdapter.toMoment(this._timeAdapter.clampTime(time, data.minTime, data.maxTime));
        /** @type {?} */
        const localeData = value.localeData();
        /** @type {?} */
        const displayFormat = localeData.longDateFormat('LTS');
        this.hourClock = /hh?/g.test(displayFormat) ? 12 : 24;
        this.value = value;
        this.units = data.units || ['hour', 'minute'];
        this.minTime = data.minTime ? this._timeAdapter.toMoment(data.minTime) : null;
        this.maxTime = data.maxTime ? this._timeAdapter.toMoment(data.maxTime) : null;
    }
    /**
     * The time period of the currently selected time of the time select content. Possible values: `am` when selected time hour is less
     * than 12; `pm` when selected time hour is greater than or equal to 12.
     * @return {?}
     */
    get amPm() { return this.value ? (this.value.hour() < 12 ? 'am' : 'pm') : null; }
    /**
     * @param {?} value
     * @return {?}
     */
    set amPm(value) {
        if (this.timeUnitSelectComponents) {
            this.timeUnitSelectComponents.toArray()
                .filter(timeSelect => timeSelect.unit === 'hour')
                .forEach(timeSelect => timeSelect.move(value === 'am' ? -12 : 12));
        }
    }
    /**
     * Gets the value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The retrieved value.
     */
    get(unit) {
        return this.value.get(unit);
    }
    /**
     * Sets the value of the given unit of time.
     * @param {?} unit The unit of time to update.
     * @param {?} value The value to set.
     * @return {?}
     */
    set(unit, value) {
        this.value.set(unit, value);
        this.valueChange.emit(this.value);
    }
    /**
     * Gets the minimum allowed value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The minimum value.
     */
    getMin(unit) {
        /** @type {?} */
        let min = null;
        if (this.minTime && this.value.isSame(this.minTime, 'day')) {
            if (this.getPrev(unit).isBefore(this.minTime)) {
                min = this.value.get(unit);
            }
            if (this.getNext(unit).isBefore(this.minTime)) {
                min = this.minTime.get(unit);
            }
        }
        return min;
    }
    /**
     * Gets the maximum allowed value of the given unit of time.
     * @param {?} unit The unit of time to query.
     * @return {?} The maximum value.
     */
    getMax(unit) {
        /** @type {?} */
        let max = null;
        if (this.maxTime && this.value.isSame(this.maxTime, 'day')) {
            if (this.getNext(unit).isAfter(this.maxTime)) {
                max = this.value.get(unit);
            }
            if (this.getPrev(unit).isAfter(this.maxTime)) {
                max = this.maxTime.get(unit);
            }
        }
        return max;
    }
    /**
     * Gets the value after moving up the given unit of time.
     * @param {?} unit The unit of time to move.
     * @return {?} The new value.
     */
    getPrev(unit) {
        /** @type {?} */
        const prev = this.value.clone().subtract((/** @type {?} */ (1)), (/** @type {?} */ (unit)));
        return this.value.clone().set(unit, prev.get(unit));
    }
    /**
     * Gets the value after moving down the given unit of time.
     * @param {?} unit The unit of time to move.
     * @return {?} The new value.
     */
    getNext(unit) {
        /** @type {?} */
        const next = this.value.clone().add((/** @type {?} */ (1)), (/** @type {?} */ (unit)));
        return this.value.clone().set(unit, next.get(unit));
    }
    /**
     * Gets the value before midday.
     * @return {?}
     */
    getAM() {
        if (this.value.hour() >= 12) {
            return this.value.clone().subtract(12, 'hour');
        }
        return this.value;
    }
    /**
     * Gets the value after midday.
     * @return {?}
     */
    getPM() {
        if (this.value.hour() < 12) {
            return this.value.clone().add(12, 'hour');
        }
        return this.value;
    }
    /**
     * Whether the given value is selectable.
     * @param {?} value The value to check.
     * @return {?} `true` if the value is valid. Otherwise `false`.
     */
    isValid(value) {
        /** @type {?} */
        const beforeMin = this.minTime && value.isBefore(this.minTime);
        /** @type {?} */
        const afterMax = this.maxTime && value.isAfter(this.maxTime);
        return !(beforeMin || afterMax);
    }
}
MatTimeSelectContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-time-select-content',
                template: "<table class=\"mat-time-select-table mat-{{ color }}\">\r\n  <tr>\r\n    <ng-container *ngFor=\"let unit of units; first as first\">\r\n      <td *ngIf=\"!first\" class=\"mat-time-select-column mat-time-select-separator\">\r\n        <div class=\"mat-time-unit-separator\">\r\n          <span class=\"mat-time-unit-separator-text\">:</span>\r\n        </div>\r\n      </td>\r\n      <td class=\"mat-time-select-column mat-time-select-{{ unit }}\">\r\n        <mat-time-unit-select\r\n          [min]=\"getMin(unit)\"\r\n          [max]=\"getMax(unit)\"\r\n          [unit]=\"unit\"\r\n          [value]=\"get(unit)\"\r\n          (valueChange)=\"set(unit, $event)\">\r\n        </mat-time-unit-select>\r\n      </td>\r\n    </ng-container>\r\n  </tr>\r\n  <tr *ngIf=\"hourClock === 12\">\r\n    <td class=\"mat-time-ampm\" [colSpan]=\"(units.length * 2) - 1\">\r\n      <mat-button-toggle-group [value]=\"amPm\" (change)=\"amPm = $event.value\">\r\n        <mat-button-toggle value=\"am\" [disabled]=\"!isValid(getAM())\">{{ _intl.amLabel }}</mat-button-toggle>\r\n        <mat-button-toggle value=\"pm\" [disabled]=\"!isValid(getPM())\">{{ _intl.pmLabel }}</mat-button-toggle>\r\n      </mat-button-toggle-group>\r\n    </td>\r\n  </tr>\r\n</table>\r\n",
                exportAs: 'matTimeSelectContent',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mat-time-select-content{display:block;border-radius:4px}.mat-time-select-content .mat-time-select-table{border-collapse:collapse}.mat-time-select-content .mat-time-select-column{width:80px;padding:0}.mat-time-select-content .mat-time-select-column .mat-time-unit-select-panel{position:relative}.mat-time-select-content .mat-time-select-hour .mat-time-unit-select-panel{top:-440px}.mat-time-select-content .mat-time-select-minute .mat-time-unit-select-panel,.mat-time-select-content .mat-time-select-second .mat-time-unit-select-panel{top:-1160px}.mat-time-select-content .mat-time-select-separator{text-align:center}.mat-time-select-content .mat-time-select-separator .mat-time-unit-separator{display:inline-flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;height:40px;width:100%}.mat-time-select-content .mat-time-select-separator .mat-time-unit-separator-text{width:100%}.mat-time-select-content .mat-time-ampm{text-align:center}"]
            }] }
];
/** @nocollapse */
MatTimeSelectContentComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: MatTimeSelectIntl },
    { type: TimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TIME_SELECT_DATA,] }] }
];
MatTimeSelectContentComponent.propDecorators = {
    color: [{ type: Input }],
    units: [{ type: Input }],
    value: [{ type: Input }],
    minTime: [{ type: Input }],
    maxTime: [{ type: Input }],
    valueChange: [{ type: Output }],
    timeUnitSelectComponents: [{ type: ViewChildren, args: [MatTimeUnitSelectComponent,] }],
    class: [{ type: HostBinding, args: ['class',] }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.color;
    /**
     * The array of unit of time selectable in the time select content.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.units;
    /**
     * The currently selected time of the time select content.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.value;
    /**
     * The minimum selectable time.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.minTime;
    /**
     * The minimum selectable time.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.maxTime;
    /**
     * Emits when the time select content selected time has been changed.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.valueChange;
    /**
     * Reference to the internal time unit select components.
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.timeUnitSelectComponents;
    /**
     * \@docs-private
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.class;
    /**
     * The hour clock type. Possible values: 12: 12 hour clock; 24: 24 hour clock
     * @type {?}
     */
    MatTimeSelectContentComponent.prototype.hourClock;
    /** @type {?} */
    MatTimeSelectContentComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectContentComponent.prototype._timeAdapter;
}
/**
 * Component responsible for managing the time select popup.
 * @template D
 */
export class MatTimeSelectComponent {
    /**
     * @param {?} _overlay
     * @param {?} _injector
     * @param {?} _ngZone
     * @param {?} _viewContainerRef
     * @param {?} scrollStrategy
     * @param {?} _timeAdapter
     * @param {?} _dir
     * @param {?} _document
     */
    constructor(_overlay, _injector, _ngZone, _viewContainerRef, scrollStrategy, _timeAdapter, _dir, _document) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._ngZone = _ngZone;
        this._viewContainerRef = _viewContainerRef;
        this._timeAdapter = _timeAdapter;
        this._dir = _dir;
        this._document = _document;
        /**
         * Subscription to value changes in the associated input element.
         */
        this._inputSubscription = Subscription.EMPTY;
        this._opened = false;
        this._disabledChange = new Subject();
        this._selectedChange = new Subject();
        /**
         * The element that was focused before the time select was opened.
         */
        this._focusedElementBeforeOpen = null;
        /**
         * Emits when the time select has been opened.
         */
        this.openStream = new EventEmitter();
        /**
         * Emits when the time select has been closed.
         */
        this.closeStream = new EventEmitter();
        /**
         * The id for the time select popup.
         */
        this.id = `mat-time-select-${timeSelectUid++}`;
        if (!this._timeAdapter) {
            throw createMissingTimeImplError('TimeAdapter');
        }
        this._scrollStrategy = scrollStrategy;
    }
    /**
     * The initial time of the time select.
     * @return {?}
     */
    get startAt() { return this._startAt || (this._timeSelectInput ? this._timeSelectInput.value : null); }
    /**
     * @param {?} value
     * @return {?}
     */
    set startAt(value) { this._startAt = this._getValidDateOrNull(this._timeAdapter.deserialize(value)); }
    /**
     * The color palette to use on the time select popup.
     * @return {?}
     */
    get color() { return this._color || (this._timeSelectInput ? this._timeSelectInput.getThemePalette() : undefined); }
    /**
     * @param {?} value
     * @return {?}
     */
    set color(value) { this._color = value; }
    /**
     * Whether the time select pop-up should disabled.
     * @return {?}
     */
    get disabled() {
        return this._disabled !== undefined ? this._disabled : (this._timeSelectInput ? this._timeSelectInput.disabled : false);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const disabled = coerceBooleanProperty(value);
        if (this._disabled !== disabled) {
            this._disabled = disabled;
            this._disabledChange.next(disabled);
        }
    }
    /**
     * The currently selected time.
     * @return {?}
     */
    get selected() { return this._selected; }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) { this._selected = value; }
    /**
     * Whether the time select is opened.
     * @return {?}
     */
    get opened() { return this._opened; }
    /**
     * @param {?} value
     * @return {?}
     */
    set opened(value) { value ? this.open() : close(); }
    /**
     * Emits when the time select disabled state has been changed.
     * @return {?}
     */
    get disabledChange() { return this._disabledChange.asObservable(); }
    /**
     * Emits when the time select selected time has been changed.
     * @return {?}
     */
    get selectedChange() { return this._selectedChange.asObservable(); }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.close();
        this._inputSubscription.unsubscribe();
        this._disabledChange.complete();
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupComponentRef = null;
        }
    }
    /**
     * Selects the given time.
     * @param {?} time The date time to select.
     * @return {?}
     */
    select(time) {
        /** @type {?} */
        const oldValue = this.selected;
        /** @type {?} */
        const value = this._timeAdapter.clone(time);
        this.selected = value;
        if (!this._timeAdapter.sameTime(oldValue, value)) {
            this._selectedChange.next(value);
        }
    }
    /**
     * Register an input with this time select.
     * @param {?} input The time select input to register with this time select.
     * @return {?}
     */
    registerInput(input) {
        if (this._timeSelectInput) {
            throw Error('A MatTimeSelect can only be associated with a single input.');
        }
        this._timeSelectInput = input;
        this._inputSubscription = this._timeSelectInput.valueChange.subscribe((value) => this.selected = value);
    }
    /**
     * Open the time select.
     * @return {?}
     */
    open() {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this._timeSelectInput) {
            throw Error('Attempted to open an MatTimeSelect with no associated input.');
        }
        if (this._document) {
            this._focusedElementBeforeOpen = this._document.activeElement;
        }
        this._openAsPopup();
        this._opened = true;
        this.openStream.emit();
    }
    /**
     * Close the time select.
     * @return {?}
     */
    close() {
        if (!this._opened) {
            return;
        }
        if (this._popupRef && this._popupRef.hasAttached()) {
            this._popupRef.detach();
        }
        if (this._popupComponentPortal && this._popupComponentPortal.isAttached) {
            this._popupComponentPortal.detach();
        }
        /** @type {?} */
        const completeClose = () => {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (this._opened) {
                this._opened = false;
                this.closeStream.emit();
                this._focusedElementBeforeOpen = null;
            }
        };
        if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the time select as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the time select on focus, the user could be stuck with not being
            // able to close the select panel at all. We work around it by making the logic, that marks
            // the time select as closed, async as well.
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
    }
    /**
     * Open the time select as a popup.
     * @private
     * @return {?}
     */
    _openAsPopup() {
        this._popupComponentPortal = new ComponentPortal(MatTimeSelectContentComponent, this._viewContainerRef, this._createInjector());
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            this._popupComponentRef = this._popupRef.attach(this._popupComponentPortal);
            this._popupComponentRef.instance.valueChange.subscribe((value) => this.select(this._timeAdapter.deserialize(value.toISOString())));
            this._setColor();
            // Update the position once the select panel has rendered.
            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {
                this._popupRef.updatePosition();
            });
        }
    }
    /**
     * Create a portal injector to inject time select initial data.
     * @private
     * @return {?}
     */
    _createInjector() {
        /** @type {?} */
        const data = {
            value: this.startAt,
            minTime: this._timeSelectInput && this._timeSelectInput.min,
            maxTime: this._timeSelectInput && this._timeSelectInput.max
        };
        /** @type {?} */
        const injectorTokens = new WeakMap([
            [MAT_TIME_SELECT_DATA, data]
        ]);
        return new PortalInjector(this._injector, injectorTokens);
    }
    /**
     * Create the popup.
     * @private
     * @return {?}
     */
    _createPopup() {
        /** @type {?} */
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: 'mat-overlay-transparent-backdrop',
            direction: this._dir,
            scrollStrategy: this._scrollStrategy(),
            panelClass: 'mat-time-select-popup',
        });
        this._popupRef = this._overlay.create(overlayConfig);
        this._popupRef.overlayElement.setAttribute('role', 'dialog');
        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(event => {
            // Closing on alt + up is only valid when there's an input associated with the time select.
            return event.keyCode === ESCAPE ||
                (this._timeSelectInput && event.altKey && event.keyCode === UP_ARROW);
        }))).subscribe(() => this.close());
    }
    /**
     * Create the popup position strategy.
     * @private
     * @return {?}
     */
    _createPopupPositionStrategy() {
        return this._overlay.position()
            .flexibleConnectedTo(this._timeSelectInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.mat-time-select-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom'
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top'
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom'
            }
        ]);
    }
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return this._timeAdapter.isDateInstance(obj) && this._timeAdapter.isValid(obj) ? obj : null;
    }
    /**
     * Passes the current theme color along to the time select overlay.
     * @private
     * @return {?}
     */
    _setColor() {
        if (this._popupComponentRef) {
            this._popupComponentRef.instance.color = this.color;
        }
    }
}
MatTimeSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-time-select',
                template: '',
                exportAs: 'matTimeSelect',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
MatTimeSelectComponent.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: NgZone },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_TIME_SELECT_SCROLL_STRATEGY,] }] },
    { type: TimeAdapter, decorators: [{ type: Optional }] },
    { type: Directionality, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
MatTimeSelectComponent.propDecorators = {
    openStream: [{ type: Output, args: ['open',] }],
    closeStream: [{ type: Output, args: ['close',] }],
    startAt: [{ type: Input }],
    color: [{ type: Input }],
    disabled: [{ type: Input }],
    selected: [{ type: Input }],
    opened: [{ type: Input }]
};
if (false) {
    /**
     * Subscription to value changes in the associated input element.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._inputSubscription;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._startAt;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._opened;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._disabledChange;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._selectedChange;
    /**
     * A reference to the overlay when the time select is opened as a popup.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._popupRef;
    /**
     * A portal containing the popup for this time select.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._popupComponentPortal;
    /**
     * Reference to the component instantiated in popup mode.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._popupComponentRef;
    /**
     * The element that was focused before the time select was opened.
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._focusedElementBeforeOpen;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._scrollStrategy;
    /**
     * The input element this time select is associated with.
     * @type {?}
     */
    MatTimeSelectComponent.prototype._timeSelectInput;
    /**
     * Emits when the time select has been opened.
     * @type {?}
     */
    MatTimeSelectComponent.prototype.openStream;
    /**
     * Emits when the time select has been closed.
     * @type {?}
     */
    MatTimeSelectComponent.prototype.closeStream;
    /**
     * The id for the time select popup.
     * @type {?}
     */
    MatTimeSelectComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._timeAdapter;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._dir;
    /**
     * @type {?}
     * @private
     */
    MatTimeSelectComponent.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,