/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { DateAdapter, MAT_DATE_LOCALE } from '@angular/material';
import { TimeAdapter } from './time-adapter.service';
import * as _moment from 'moment';
/** @type {?} */
const moment = _moment;
/**
 * Adapts the native JS Date for use with cdk-based components that work with times.
 */
export class NativeTimeAdapter extends TimeAdapter {
    /**
     * @param {?} locale
     * @param {?} _dateAdapter
     */
    constructor(locale, _dateAdapter) {
        super();
        this._dateAdapter = _dateAdapter;
        this.setLocale(locale);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getYear(date) {
        return this._dateAdapter.getYear(date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getMonth(date) {
        return this._dateAdapter.getMonth(date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDate(date) {
        return this._dateAdapter.getDate(date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayOfWeek(date) {
        return this._dateAdapter.getDayOfWeek(date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getHour(date) {
        return date.getHours();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getMinute(date) {
        return date.getMinutes();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getSecond(date) {
        return date.getSeconds();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getYearName(date) {
        return this._dateAdapter.getYearName(date);
    }
    /**
     * @param {?} style
     * @return {?}
     */
    getMonthNames(style) {
        return this._dateAdapter.getMonthNames(style);
    }
    /**
     * @return {?}
     */
    getDateNames() {
        return this._dateAdapter.getDateNames();
    }
    /**
     * @param {?} style
     * @return {?}
     */
    getDayOfWeekNames(style) {
        return this._dateAdapter.getDayOfWeekNames(style);
    }
    /**
     * @return {?}
     */
    getFirstDayOfWeek() {
        return this._dateAdapter.getFirstDayOfWeek();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getNumDaysInMonth(date) {
        return this._dateAdapter.getNumDaysInMonth(date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    clone(date) {
        return new Date(date.getTime());
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    createDate(year, month, date) {
        return this._dateAdapter.createDate(year, month, date);
    }
    /**
     * @param {?=} hour
     * @param {?=} minute
     * @param {?=} second
     * @return {?}
     */
    createTime(hour = 0, minute = 0, second = 0) {
        if (hour < 0 || hour > 23) {
            throw new Error(`Invalid hour ${hour}. Hour has to be between 0 and 23.`);
        }
        if (minute < 0 || minute > 59) {
            throw new Error(`Invalid minute ${minute}. Minute has to be between 0 and 59.`);
        }
        if (second < 0 || second > 59) {
            throw new Error(`Invalid second ${second}. Second has to be between 0 and 59.`);
        }
        /** @type {?} */
        const date = new Date();
        date.setHours(hour, minute, second);
        return date;
    }
    /**
     * @return {?}
     */
    today() {
        return this.now();
    }
    /**
     * @return {?}
     */
    now() {
        return new Date(Date.now());
    }
    /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    parse(value, parseFormat) {
        return this._dateAdapter.parse(value, parseFormat);
    }
    /**
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    format(date, displayFormat) {
        return this._dateAdapter.format(date, displayFormat);
    }
    /**
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    addCalendarYears(date, years) {
        return this._dateAdapter.addCalendarYears(date, years);
    }
    /**
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    addCalendarMonths(date, months) {
        return this._dateAdapter.addCalendarMonths(date, months);
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    addCalendarDays(date, days) {
        return this._dateAdapter.addCalendarDays(date, days);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    toIso8601(date) {
        /** @type {?} */
        const dateString = this._dateAdapter.toIso8601(date);
        /** @type {?} */
        const timeString = [
            this._2digit(date.getUTCHours()),
            this._2digit(date.getUTCMinutes()),
            this._2digit(date.getUTCSeconds())
        ].join(':');
        return `${dateString}T${timeString}Z`;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    toMoment(date) {
        return moment(date).locale(this.locale);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    deserialize(value) {
        return this._dateAdapter.deserialize(value);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isDateInstance(obj) {
        return this._dateAdapter.isDateInstance(obj);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isValid(date) {
        return this._dateAdapter.isValid(date);
    }
    /**
     * @return {?}
     */
    invalid() {
        return this._dateAdapter.invalid();
    }
    /**
     * Pads a number to make it two digits.
     * @private
     * @param {?} n The number to pad.
     * @return {?} The padded number.
     */
    _2digit(n) {
        return ('00' + n).slice(-2);
    }
}
NativeTimeAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NativeTimeAdapter.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },
    { type: DateAdapter, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NativeTimeAdapter.prototype._dateAdapter;
}
//# sourceMappingURL=data:application/json;base64,