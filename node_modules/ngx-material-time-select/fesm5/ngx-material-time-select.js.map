{"version":3,"file":"ngx-material-time-select.js.map","sources":["ng://ngx-material-time-select/lib/time-adapter.service.ts","ng://ngx-material-time-select/lib/time-formats.ts","ng://ngx-material-time-select/lib/time-select-intl.service.ts","ng://ngx-material-time-select/lib/time-unit-select.component.ts","ng://ngx-material-time-select/lib/time-unit-option.component.ts","ng://ngx-material-time-select/lib/time-select-errors.ts","ng://ngx-material-time-select/lib/time-select.component.ts","ng://ngx-material-time-select/lib/time-select-input.directive.ts","ng://ngx-material-time-select/lib/time-select-toggle.component.ts","ng://ngx-material-time-select/lib/time-select.module.ts","ng://ngx-material-time-select/lib/native-time-adapter.service.ts","ng://ngx-material-time-select/lib/native-time-formats.ts","ng://ngx-material-time-select/lib/native-time.module.ts","ng://ngx-material-time-select/lib/moment-time-adapter.service.ts","ng://ngx-material-time-select/lib/moment-time-formats.ts","ng://ngx-material-time-select/lib/moment-time.module.ts"],"sourcesContent":["import {DateAdapter} from '@angular/material';\r\nimport {Moment} from 'moment';\r\n\r\n/** Adapts date object to be usable as a date time by cdk-based components that work with dates. */\r\nexport abstract class TimeAdapter<D> extends DateAdapter<D> {\r\n\r\n  /**\r\n   * Gets the hour component of the given date.\r\n   * @param date The date to extract the hour from.\r\n   * @returns The hour component (0-indexed, 0 = midnight).\r\n   */\r\n  abstract getHour(date: D): number;\r\n\r\n  /**\r\n   * Gets the minute component of the given date.\r\n   * @param date The date to extract the minute from.\r\n   * @returns The minute component (0-indexed, 0 = start of hour).\r\n   */\r\n  abstract getMinute(date: D): number;\r\n\r\n  /**\r\n   * Gets the second component of the given date.\r\n   * @param date The date to extract the second from.\r\n   * @returns The second component (0-indexed, 0 = start of minute).\r\n   */\r\n  abstract getSecond(date: D): number;\r\n\r\n  /**\r\n   * Create a date with the given hour, minute and second. Does not allow over/under-flow of the\r\n   * hour, minute and second.\r\n   * @param hour The hour of the date. Must be an integer 0 - 23.\r\n   * @param minute The minute of the date. Must be an integer 0 - 59.\r\n   * @param second The second of the date. Must be an integer 0 - 59.\r\n   * @returns The new date.\r\n   */\r\n  abstract createTime(hour?: number, minute?: number, second?: number): D;\r\n\r\n  /**\r\n   * Gets the current date.\r\n   * @returns The current date.\r\n   */\r\n  abstract now(): D;\r\n\r\n  /**\r\n   * Convert the given date to a Moment object.\r\n   * @param date the date object to convert.\r\n   */\r\n  abstract toMoment(date: D): Moment;\r\n\r\n  /**\r\n   * Compares two date times.\r\n   * @param first The first date to compare.\r\n   * @param second The second date to compare.\r\n   * @returns 0 if the date times are equal, a number less than 0 if the first date time is earlier,\r\n   *     a number greater than 0 if the first date time is later.\r\n   */\r\n  compareTime(first: D, second: D): number {\r\n    return this.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      this.getMinute(first) - this.getMinute(second) ||\r\n      this.getSecond(first) - this.getSecond(second);\r\n  }\r\n\r\n  /**\r\n   * Checks if two date times are equal.\r\n   * @param first The first date to check.\r\n   * @param second The second date to check.\r\n   * @returns Whether the two date times are equal.\r\n   *     Null dates are considered equal to other null dates.\r\n   */\r\n  sameTime(first: D | null, second: D | null): boolean {\r\n    if (first && second) {\r\n      const firstValid = this.isValid(first);\r\n      const secondValid = this.isValid(second);\r\n      if (firstValid && secondValid) {\r\n        return !this.compareTime(first, second);\r\n      }\r\n      return firstValid === secondValid;\r\n    }\r\n    return first === second;\r\n  }\r\n\r\n  /**\r\n   * Clamp the given date between min and max date times.\r\n   * @param date The date to clamp.\r\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\r\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\r\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r\n   *     otherwise `date`.\r\n   */\r\n  clampTime(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareTime(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareTime(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n\r\n}\r\n","import {InjectionToken} from '@angular/core';\r\n\r\nexport interface MatTimeFormats {\r\n  parse: {\r\n    timeInput: any\r\n  };\r\n  display: {\r\n    timeInput: any\r\n    timeA11yLabel: any\r\n  };\r\n}\r\n\r\nexport const MAT_TIME_FORMATS = new InjectionToken<MatTimeFormats>('mat-time-formats');\r\n","import {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** TimeSelect data that requires internationalization. */\r\n@Injectable()\r\nexport class MatTimeSelectIntl {\r\n\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the button used to open the time select popup (used by screen readers). */\r\n  openTimeSelectLabel = 'Open time select';\r\n\r\n  /** A label for the a.m. button toggle (used by screen readers). */\r\n  amLabel = 'AM';\r\n\r\n  /** A label for the p.m. button toggle (used by screen readers). */\r\n  pmLabel = 'PM';\r\n\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {DurationInputArg1, DurationInputArg2, unitOfTime} from 'moment';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {MAT_TIME_FORMATS, MatTimeFormats} from './time-formats';\r\n\r\n/** Component used to select a value of a unit of time. */\r\n@Component({\r\n  selector: 'mat-time-unit-select',\r\n  templateUrl: './time-unit-select.component.html',\r\n  styleUrls: ['./time-unit-select.component.scss'],\r\n  exportAs: 'matTimeSelect',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeUnitSelectComponent<D> implements AfterViewInit, OnInit {\r\n\r\n  private _originTop: number;\r\n\r\n  /** The currently selected value. */\r\n  @Input() value: number;\r\n  /** The unit of time of the time select. */\r\n  @Input() unit: unitOfTime.All;\r\n  /** The minimum selectable value. */\r\n  @Input() min: number | null;\r\n  /** The maximum selectable value. */\r\n  @Input() max: number | null;\r\n\r\n  /** The list of all values of the time select. */\r\n  options: {value: number; label: string}[] = [];\r\n\r\n  /** Emits when selected value has been changed. Output to enable support for two-way binding on `[(value)]`. */\r\n  @Output() valueChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /** The panel element containing all time select options. */\r\n  @ViewChild('panel') panel: ElementRef<HTMLElement>;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\r\n              private _timeAdapter: TimeAdapter<D>,\r\n              @Inject(MAT_TIME_FORMATS) private _timeFormats: MatTimeFormats) { }\r\n\r\n  ngOnInit() {\r\n    const unit = this.unit;\r\n    const time = this._timeAdapter.createTime();\r\n    const moment = this._timeAdapter.toMoment(time);\r\n    const start = moment.clone().startOf('day');\r\n    const end = moment.clone().endOf('day');\r\n    const min = start.get(unit);\r\n    const max = end.get(unit);\r\n    const localeData = moment.localeData();\r\n    const displayFormat = localeData.longDateFormat('LTS');\r\n    const unitFormat = unit === 'hour' ?\r\n      displayFormat.match(/hh?|HH?/g)[0] : unit === 'minute' ?\r\n        displayFormat.match(/mm?/g)[0] : displayFormat.match(/ss?/g)[0];\r\n    moment.set(unit, this.value);\r\n    moment.subtract(1 as DurationInputArg1, unit as DurationInputArg2);\r\n    for (let value = min; value <= max; value++) {\r\n      moment.add(1 as DurationInputArg1, unit as DurationInputArg2);\r\n      this.options.push({value: moment.get(unit), label: moment.format(unitFormat)});\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const element = this.panel.nativeElement;\r\n    this._originTop = parseFloat(getComputedStyle(element).top);\r\n    element.addEventListener('transitionend', () => {\r\n      element.style.removeProperty('transition');\r\n    });\r\n    setTimeout(() => this.move(this.options.length / 2));\r\n  }\r\n\r\n  /** Select the previous option. */\r\n  prev() {\r\n    this.move(-1);\r\n  }\r\n\r\n  /** Select the next option. */\r\n  next() {\r\n    this.move(+1);\r\n  }\r\n\r\n  /**\r\n   * Select the option moving by the given amount of step.\r\n   * @param step The amount of step to move.\r\n   */\r\n  move(step: number) {\r\n    const element = this.panel.nativeElement;\r\n    const option = element.querySelector('mat-time-unit-option');\r\n    const optionHeight = parseFloat(getComputedStyle(option).height);\r\n    const currentTop = parseFloat(getComputedStyle(element).top);\r\n    const targetTop = currentTop + (step * optionHeight);\r\n    const y = this._originTop - targetTop;\r\n\r\n    element.style.top = `${targetTop}px`;\r\n\r\n    if (step < 0) {\r\n      // Move last option to the top\r\n      for (let i = 0; i > step; i--) {\r\n        this.options.unshift(this.options.pop());\r\n      }\r\n    } else if (step > 0) {\r\n      // Move first option to the bottom\r\n      for (let i = 0; i < step; i++) {\r\n        this.options.push(this.options.shift());\r\n      }\r\n    }\r\n\r\n    this.value = this.options[(this.options.length / 2)].value;\r\n    this.valueChange.emit(this.value);\r\n\r\n    element.style.transition = 'transform 0.5s';\r\n    element.style.transform = `translateY(${y}px)`;\r\n  }\r\n\r\n  /**\r\n   * Gets the previous option value.\r\n   */\r\n  getPrev(): number {\r\n    return this.options[(this.options.length / 2) - 1].value;\r\n  }\r\n\r\n  /**\r\n   * Gets the next option value.\r\n   */\r\n  getNext(): number {\r\n    return this.options[(this.options.length / 2) + 1].value;\r\n  }\r\n\r\n  /**\r\n   * Whether the given value is valid.\r\n   * @param value The value to check.\r\n   */\r\n  isValid(value: number): boolean {\r\n    return (this.min === null || value >= this.min) && (this.max === null || value <= this.max);\r\n  }\r\n\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CanDisableRippleCtor, mixinDisableRipple} from '@angular/material';\r\nimport {MatTimeUnitSelectComponent} from './time-unit-select.component';\r\n\r\nexport class MatTimeUnitOptionBase { }\r\nexport const _MatTimeUnitOptionMixinBase: CanDisableRippleCtor & typeof MatTimeUnitOptionBase =\r\n  mixinDisableRipple(MatTimeUnitOptionBase);\r\n\r\n/** Single time option inside a `<mat-time-unit-select>` element */\r\n@Component({\r\n  selector: 'mat-time-unit-option',\r\n  templateUrl: './time-unit-option.component.html',\r\n  styleUrls: ['./time-unit-option.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeUnitOptionComponent<D> extends _MatTimeUnitOptionMixinBase implements OnInit {\r\n\r\n  private _disabled = false;\r\n  private _selected = false;\r\n\r\n  /** The value of the option. */\r\n  @Input() value: number;\r\n  /** Whether ripples for the option are disabled. */\r\n  @Input() disableRipple: boolean;\r\n\r\n  /** The element containing the display text of the option. */\r\n  @ViewChild('text') _text: ElementRef<HTMLElement>;\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class') readonly class = 'mat-time-unit-option';\r\n  /** @docs-private */\r\n  @HostBinding('attr.role') readonly role = 'option';\r\n  /** @docs-private */\r\n  @HostBinding('attr.tabindex') readonly tabindex = -1;\r\n\r\n  /** Whether or not the option is currently selected. */\r\n  @Input()\r\n  @HostBinding('class.mat-time-unit-option-selected')\r\n  get selected(): boolean { return this._selected; }\r\n  set selected(value: boolean) {\r\n    const selected = coerceBooleanProperty(value);\r\n    if (this._selected !== selected) {\r\n      this._selected = selected;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** Whether the option is disabled. */\r\n  @Input()\r\n  @HostBinding('class.mat-time-unit-option-disabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const disabled = coerceBooleanProperty(value);\r\n    if (this._disabled !== disabled) {\r\n      this._disabled = disabled;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.aria-disabled')\r\n  get ariaDisabled(): string { return this.disabled.toString(); }\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Inject(forwardRef(() => MatTimeUnitSelectComponent)) public timeUnitSelect: MatTimeUnitSelectComponent<D>) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.timeUnitSelect.valueChange.subscribe(value => this.selected = this.value === value);\r\n  }\r\n\r\n  /** Gets the label to be used when determining whether the option should be focused. */\r\n  getLabel(): string {\r\n    return this._text ? (this._text.nativeElement.textContent || '').trim() : '';\r\n  }\r\n\r\n  /** Gets the host DOM element. */\r\n  _getHostElement(): HTMLElement {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  /** Whether ripples for the option are disabled. */\r\n  _isRippleDisabled(): boolean {\r\n    return this.disabled || this.disableRipple;\r\n  }\r\n\r\n  /** Handle click on the option. */\r\n  @HostListener('click')\r\n  _onClick() {\r\n    if (!this.disabled) {\r\n      this.timeUnitSelect.move(this.value - this.timeUnitSelect.value);\r\n    }\r\n  }\r\n\r\n}\r\n","/** @docs-private */\r\nexport function createMissingTimeImplError(provider: string) {\r\n  return Error(\r\n    `MatTimeSelectComponent: No provider found for ${provider}. You must import one of the following ` +\r\n    `modules at your application root: MatNativeTimeModule, MatMomentTimeModule, or provide a ` +\r\n    `custom implementation.`);\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  InjectionToken,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Provider,\r\n  QueryList,\r\n  ViewChildren,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {Overlay, OverlayConfig, OverlayRef, PositionStrategy, ScrollStrategy} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, PortalInjector} from '@angular/cdk/portal';\r\nimport {CanColor, CanColorCtor, mixinColor, ThemePalette} from '@angular/material';\r\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\r\nimport {filter, take} from 'rxjs/operators';\r\nimport {DurationInputArg1, DurationInputArg2, Moment, unitOfTime} from 'moment';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {createMissingTimeImplError} from './time-select-errors';\r\nimport {MatTimeSelectIntl} from './time-select-intl.service';\r\nimport {MatTimeSelectInputDirective} from './time-select-input.directive';\r\nimport {MatTimeUnitSelectComponent} from './time-unit-select.component';\r\n\r\n/** Used to generate a unique ID for each time select instance. */\r\nlet timeSelectUid = 0;\r\n\r\n/** Injection token used to initialize the time select data. */\r\nexport const MAT_TIME_SELECT_DATA = new InjectionToken<Moment>('mat-time-select-data');\r\n\r\n/** Injection token that determines the scroll handling while the time select is opened. */\r\nexport const MAT_TIME_SELECT_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>('mat-time-select-scroll-strategy');\r\n\r\n/** @docs-private */\r\nexport function MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER: Provider = {\r\n  provide: MAT_TIME_SELECT_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY\r\n};\r\n\r\nexport interface MatTimeSelectData<D> {\r\n  units?: unitOfTime.All[];\r\n  value?: D;\r\n  minTime?: D;\r\n  maxTime?: D;\r\n}\r\n\r\n/** @docs-private */\r\nexport class MatTimeSelectContentBase {\r\n\r\n  constructor(public _elementRef: ElementRef) { }\r\n\r\n}\r\n\r\nexport const _MatTimeSelectContentMixinBase: CanColorCtor & typeof MatTimeSelectContentBase =\r\n  mixinColor(MatTimeSelectContentBase);\r\n\r\n/**\r\n * Component used as the content for the time select popup.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-time-select-content',\r\n  templateUrl: './time-select-content.component.html',\r\n  styleUrls: ['./time-select-content.component.scss'],\r\n  exportAs: 'matTimeSelectContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeSelectContentComponent<D> extends _MatTimeSelectContentMixinBase implements CanColor {\r\n\r\n  /** @docs-private */\r\n  @Input() color: ThemePalette;\r\n  /** The array of unit of time selectable in the time select content. */\r\n  @Input() units: unitOfTime.All[];\r\n  /** The currently selected time of the time select content. */\r\n  @Input() value: Moment;\r\n  /** The minimum selectable time. */\r\n  @Input() minTime: Moment;\r\n  /** The minimum selectable time. */\r\n  @Input() maxTime: Moment;\r\n\r\n  /** Emits when the time select content selected time has been changed. */\r\n  @Output() valueChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  /** Reference to the internal time unit select components. */\r\n  @ViewChildren(MatTimeUnitSelectComponent) timeUnitSelectComponents: QueryList<MatTimeUnitSelectComponent<D>>;\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class') readonly class = 'mat-time-select-content';\r\n\r\n  /** The hour clock type. Possible values: 12: 12 hour clock; 24: 24 hour clock */\r\n  hourClock: number;\r\n\r\n  /**\r\n   * The time period of the currently selected time of the time select content. Possible values: `am` when selected time hour is less\r\n   * than 12; `pm` when selected time hour is greater than or equal to 12.\r\n   */\r\n  get amPm(): string { return this.value ? (this.value.hour() < 12 ? 'am' : 'pm') : null; }\r\n  set amPm(value: string) {\r\n    if (this.timeUnitSelectComponents) {\r\n      this.timeUnitSelectComponents.toArray()\r\n        .filter(timeSelect => timeSelect.unit === 'hour')\r\n        .forEach(timeSelect => timeSelect.move(value === 'am' ? -12 : 12));\r\n    }\r\n  }\r\n\r\n  constructor(elementRef: ElementRef,\r\n              public _intl: MatTimeSelectIntl,\r\n              @Optional() private _timeAdapter: TimeAdapter<D>,\r\n              @Optional() @Inject(MAT_TIME_SELECT_DATA) data: MatTimeSelectData<D>) {\r\n    super(elementRef);\r\n\r\n    if (!this._timeAdapter) {\r\n      throw createMissingTimeImplError('TimeAdapter');\r\n    }\r\n\r\n    const time = this._timeAdapter.isDateInstance(data.value) && this._timeAdapter.isValid(data.value) ?\r\n      this._timeAdapter.clone(data.value) : this._timeAdapter.now();\r\n    const value = this._timeAdapter.toMoment(this._timeAdapter.clampTime(time, data.minTime, data.maxTime));\r\n    const localeData = value.localeData();\r\n    const displayFormat = localeData.longDateFormat('LTS');\r\n    this.hourClock = /hh?/g.test(displayFormat) ? 12 : 24;\r\n    this.value = value;\r\n    this.units = data.units || ['hour', 'minute'];\r\n    this.minTime = data.minTime ? this._timeAdapter.toMoment(data.minTime) : null;\r\n    this.maxTime = data.maxTime ? this._timeAdapter.toMoment(data.maxTime) : null;\r\n  }\r\n\r\n  /**\r\n   * Gets the value of the given unit of time.\r\n   * @param unit The unit of time to query.\r\n   * @returns The retrieved value.\r\n   */\r\n  get(unit: unitOfTime.All): number {\r\n    return this.value.get(unit);\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the given unit of time.\r\n   * @param unit The unit of time to update.\r\n   * @param value The value to set.\r\n   */\r\n  set(unit: unitOfTime.All, value: number) {\r\n    this.value.set(unit, value);\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  /**\r\n   * Gets the minimum allowed value of the given unit of time.\r\n   * @param unit The unit of time to query.\r\n   * @returns The minimum value.\r\n   */\r\n  getMin(unit: unitOfTime.All): number | null {\r\n    let min = null;\r\n    if (this.minTime && this.value.isSame(this.minTime, 'day')) {\r\n      if (this.getPrev(unit).isBefore(this.minTime)) {\r\n        min = this.value.get(unit);\r\n      }\r\n      if (this.getNext(unit).isBefore(this.minTime)) {\r\n        min = this.minTime.get(unit);\r\n      }\r\n    }\r\n    return min;\r\n  }\r\n\r\n  /**\r\n   * Gets the maximum allowed value of the given unit of time.\r\n   * @param unit The unit of time to query.\r\n   * @returns The maximum value.\r\n   */\r\n  getMax(unit: unitOfTime.All): number | null {\r\n    let max = null;\r\n    if (this.maxTime && this.value.isSame(this.maxTime, 'day')) {\r\n      if (this.getNext(unit).isAfter(this.maxTime)) {\r\n        max = this.value.get(unit);\r\n      }\r\n      if (this.getPrev(unit).isAfter(this.maxTime)) {\r\n        max = this.maxTime.get(unit);\r\n      }\r\n    }\r\n    return max;\r\n  }\r\n\r\n  /**\r\n   * Gets the value after moving up the given unit of time.\r\n   * @param unit The unit of time to move.\r\n   * @returns The new value.\r\n   */\r\n  getPrev(unit: unitOfTime.All): Moment {\r\n    const prev = this.value.clone().subtract(1 as DurationInputArg1, unit as DurationInputArg2);\r\n    return this.value.clone().set(unit, prev.get(unit));\r\n  }\r\n\r\n  /**\r\n   * Gets the value after moving down the given unit of time.\r\n   * @param unit The unit of time to move.\r\n   * @returns The new value.\r\n   */\r\n  getNext(unit: unitOfTime.All): Moment {\r\n    const next = this.value.clone().add(1 as DurationInputArg1, unit as DurationInputArg2);\r\n    return this.value.clone().set(unit, next.get(unit));\r\n  }\r\n\r\n  /**\r\n   * Gets the value before midday.\r\n   */\r\n  getAM(): Moment {\r\n    if (this.value.hour() >= 12) {\r\n      return this.value.clone().subtract(12, 'hour');\r\n    }\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Gets the value after midday.\r\n   */\r\n  getPM(): Moment {\r\n    if (this.value.hour() < 12) {\r\n      return this.value.clone().add(12, 'hour');\r\n    }\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Whether the given value is selectable.\r\n   * @param value The value to check.\r\n   * @returns `true` if the value is valid. Otherwise `false`.\r\n   */\r\n  isValid(value: Moment): boolean {\r\n    const beforeMin = this.minTime && value.isBefore(this.minTime);\r\n    const afterMax = this.maxTime && value.isAfter(this.maxTime);\r\n    return !(beforeMin || afterMax);\r\n  }\r\n\r\n}\r\n\r\n/** Component responsible for managing the time select popup. */\r\n@Component({\r\n  selector: 'mat-time-select',\r\n  template: '',\r\n  exportAs: 'matTimeSelect',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeSelectComponent<D> implements OnDestroy, CanColor {\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  private _startAt: D | null;\r\n  private _color: ThemePalette;\r\n  private _disabled: boolean;\r\n  private _selected: D;\r\n  private _opened = false;\r\n\r\n  private _disabledChange: Subject<boolean> = new Subject<boolean>();\r\n  private _selectedChange: Subject<D> = new Subject<D>();\r\n\r\n  /** A reference to the overlay when the time select is opened as a popup. */\r\n  private _popupRef: OverlayRef;\r\n  /** A portal containing the popup for this time select. */\r\n  private _popupComponentPortal: ComponentPortal<MatTimeSelectContentComponent<D>>;\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<MatTimeSelectContentComponent<D>>;\r\n  /** The element that was focused before the time select was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  private readonly _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** The input element this time select is associated with. */\r\n  _timeSelectInput: MatTimeSelectInputDirective<D>;\r\n\r\n  /** Emits when the time select has been opened. */\r\n  @Output('open') openStream: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Emits when the time select has been closed. */\r\n  @Output('close') closeStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** The id for the time select popup. */\r\n  id = `mat-time-select-${timeSelectUid++}`;\r\n\r\n  /** The initial time of the time select. */\r\n  @Input()\r\n  get startAt(): D | null { return this._startAt || (this._timeSelectInput ? this._timeSelectInput.value : null); }\r\n  set startAt(value: D | null) { this._startAt = this._getValidDateOrNull(this._timeAdapter.deserialize(value)); }\r\n\r\n  /** The color palette to use on the time select popup. */\r\n  @Input()\r\n  get color(): ThemePalette { return this._color || (this._timeSelectInput ? this._timeSelectInput.getThemePalette() : undefined); }\r\n  set color(value: ThemePalette) { this._color = value; }\r\n\r\n  /** Whether the time select pop-up should disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled !== undefined ? this._disabled : (this._timeSelectInput ? this._timeSelectInput.disabled : false);\r\n  }\r\n  set disabled(value: boolean) {\r\n    const disabled = coerceBooleanProperty(value);\r\n    if (this._disabled !== disabled) {\r\n      this._disabled = disabled;\r\n      this._disabledChange.next(disabled);\r\n    }\r\n  }\r\n\r\n  /** The currently selected time. */\r\n  @Input()\r\n  get selected(): D { return this._selected; }\r\n  set selected(value: D) { this._selected = value; }\r\n\r\n  /** Whether the time select is opened. */\r\n  @Input()\r\n  get opened(): boolean { return this._opened; }\r\n  set opened(value: boolean) { value ? this.open() : close(); }\r\n\r\n  /** Emits when the time select disabled state has been changed. */\r\n  get disabledChange(): Observable<boolean> { return this._disabledChange.asObservable(); }\r\n  /** Emits when the time select selected time has been changed. */\r\n  get selectedChange(): Observable<D> { return this._selectedChange.asObservable(); }\r\n\r\n  constructor(private _overlay: Overlay,\r\n              private _injector: Injector,\r\n              private _ngZone: NgZone,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_TIME_SELECT_SCROLL_STRATEGY) scrollStrategy: any,\r\n              @Optional() private _timeAdapter: TimeAdapter<D>,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._timeAdapter) {\r\n      throw createMissingTimeImplError('TimeAdapter');\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the given time.\r\n   * @param time The date time to select.\r\n   */\r\n  select(time: D) {\r\n    const oldValue = this.selected;\r\n    const value = this._timeAdapter.clone(time);\r\n    this.selected = value;\r\n    if (!this._timeAdapter.sameTime(oldValue, value)) {\r\n      this._selectedChange.next(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register an input with this time select.\r\n   * @param input The time select input to register with this time select.\r\n   */\r\n  registerInput(input: MatTimeSelectInputDirective<D>) {\r\n    if (this._timeSelectInput) {\r\n      throw Error('A MatTimeSelect can only be associated with a single input.');\r\n    }\r\n    this._timeSelectInput = input;\r\n    this._inputSubscription = this._timeSelectInput.valueChange.subscribe((value: D | null) => this.selected = value);\r\n  }\r\n\r\n  /** Open the time select. */\r\n  open() {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._timeSelectInput) {\r\n      throw Error('Attempted to open an MatTimeSelect with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this._openAsPopup();\r\n    this._opened = true;\r\n    this.openStream.emit();\r\n  }\r\n\r\n  /** Close the time select. */\r\n  close() {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._popupComponentPortal && this._popupComponentPortal.isAttached) {\r\n      this._popupComponentPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closeStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the time select as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the time select on focus, the user could be stuck with not being\r\n      // able to close the select panel at all. We work around it by making the logic, that marks\r\n      // the time select as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the time select as a popup. */\r\n  private _openAsPopup(): void {\r\n    this._popupComponentPortal = new ComponentPortal<MatTimeSelectContentComponent<D>>(\r\n      MatTimeSelectContentComponent,\r\n      this._viewContainerRef,\r\n      this._createInjector()\r\n    );\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._popupComponentPortal);\r\n      this._popupComponentRef.instance.valueChange.subscribe(\r\n        (value: Moment) => this.select(this._timeAdapter.deserialize(value.toISOString()))\r\n      );\r\n      this._setColor();\r\n\r\n      // Update the position once the select panel has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Create a portal injector to inject time select initial data. */\r\n  private _createInjector(): PortalInjector {\r\n    const data: MatTimeSelectData<D> = {\r\n      value: this.startAt,\r\n      minTime: this._timeSelectInput && this._timeSelectInput.min,\r\n      maxTime: this._timeSelectInput && this._timeSelectInput.max\r\n    };\r\n    const injectorTokens = new WeakMap<any, any>([\r\n      [MAT_TIME_SELECT_DATA, data]\r\n    ]);\r\n    return new PortalInjector(this._injector, injectorTokens);\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-time-select-popup',\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(filter(event => {\r\n        // Closing on alt + up is only valid when there's an input associated with the time select.\r\n        return event.keyCode === ESCAPE ||\r\n          (this._timeSelectInput && event.altKey && event.keyCode === UP_ARROW);\r\n      }))\r\n    ).subscribe(() => this.close());\r\n  }\r\n\r\n  /** Create the popup position strategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .flexibleConnectedTo(this._timeSelectInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-time-select-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition()\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._timeAdapter.isDateInstance(obj) && this._timeAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  /** Passes the current theme color along to the time select overlay. */\r\n  private _setColor(): void {\r\n    if (this._popupComponentRef) {\r\n      this._popupComponentRef.instance.color = this.color;\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {MAT_INPUT_VALUE_ACCESSOR, MatFormField, ThemePalette} from '@angular/material';\r\nimport {Observable, Subject, Subscription} from 'rxjs';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {MAT_TIME_FORMATS, MatTimeFormats} from './time-formats';\r\nimport {MatTimeSelectComponent} from './time-select.component';\r\n\r\n/**\r\n * An event used for time select input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatTimeSelectInputEvent instead.\r\n */\r\nexport class MatTimeSelectInputEvent<D> {\r\n\r\n  /** The new value for the target time select input. */\r\n  value: D;\r\n\r\n  constructor(\r\n    /** Reference to the time select input component that emitted the event. */\r\n    public target: MatTimeSelectInputDirective<D>,\r\n    /** Reference to the native input element associated with the time select input. */\r\n    public targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n\r\n}\r\n\r\n/** Directive used to connect an input to a MatTimeSelectComponent. */\r\n@Directive({\r\n  selector: 'input[matTimeSelect]',\r\n  providers: [\r\n    {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MatTimeSelectInputDirective), multi: true},\r\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatTimeSelectInputDirective), multi: true},\r\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatTimeSelectInputDirective}\r\n  ],\r\n  exportAs: 'matTimeSelectInput'\r\n})\r\nexport class MatTimeSelectInputDirective<D> implements OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private _timeSelectSubscription = Subscription.EMPTY;\r\n  private _localeSubscription: Subscription = Subscription.EMPTY;\r\n\r\n  private _timeSelect: MatTimeSelectComponent<D>;\r\n\r\n  private _value: D;\r\n  private _min: D;\r\n  private _max: D;\r\n  private _disabled: boolean;\r\n\r\n  private _valueChange: Subject<D | null> = new Subject<D | null>();\r\n  private _disabledChange: Subject<boolean> = new Subject<boolean>();\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private readonly _parseValidator: ValidatorFn;\r\n  /** The form control validator for the min date time. */\r\n  private readonly _minValidator: ValidatorFn;\r\n  /** The form control validator for the max date time. */\r\n  private readonly _maxValidator: ValidatorFn;\r\n  /** The combined form control validator for this input. */\r\n  private readonly _validator: ValidatorFn | null;\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly timeChange: EventEmitter<MatTimeSelectInputEvent<D>> = new EventEmitter<MatTimeSelectInputEvent<D>>();\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly timeInput: EventEmitter<MatTimeSelectInputEvent<D>> = new EventEmitter<MatTimeSelectInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  valueChange: Observable<D | null> = this._valueChange.asObservable();\r\n  /** Emits when the disabled state has changed. */\r\n  disabledChange: Observable<boolean> = this._disabledChange.asObservable();\r\n\r\n  private _onChange: (value: any) => void = () => {};\r\n  private _onTouched: () => void = () => {};\r\n  private _onValidatorChange: () => void = () => {};\r\n\r\n  /** The time select that this input is associated with. */\r\n  @Input()\r\n  set matTimeSelect(value: MatTimeSelectComponent<D>) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this._timeSelect = value;\r\n    this._timeSelect.registerInput(this);\r\n    this._timeSelectSubscription.unsubscribe();\r\n\r\n    this._timeSelectSubscription = this._timeSelect.selectedChange.subscribe((selected: D) => {\r\n      this.value = selected;\r\n      this._onChange(selected);\r\n      this._onTouched();\r\n      this.timeInput.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));\r\n      this.timeChange.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));\r\n    });\r\n  }\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null { return this._value; }\r\n  set value(value: D | null) {\r\n    value = this._timeAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._timeAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n    const oldValue = this._value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    if (!this._timeAdapter.sameTime(oldValue, value)) {\r\n      this._valueChange.next(value);\r\n    }\r\n  }\r\n\r\n  /** The minimum valid date time. */\r\n  @Input()\r\n  get min(): D | null { return this._min; }\r\n  set min(value: D | null) {\r\n    this._min = this._getValidDateOrNull(this._timeAdapter.deserialize(value));\r\n    this._onValidatorChange();\r\n  }\r\n\r\n  /** The maximum valid date time. */\r\n  @Input()\r\n  get max(): D | null { return this._max; }\r\n  set max(value: D | null) {\r\n    this._max = this._getValidDateOrNull(this._timeAdapter.deserialize(value));\r\n    this._onValidatorChange();\r\n  }\r\n\r\n  /** Whether the time select input is disabled. */\r\n  @HostBinding()\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const disabled = coerceBooleanProperty(value);\r\n    const element = this._elementRef.nativeElement;\r\n    if (this.disabled !== disabled) {\r\n      this._disabled = disabled;\r\n      this._disabledChange.next(disabled);\r\n    }\r\n    if (disabled && element.blur) {\r\n      element.blur();\r\n    }\r\n  }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.aria-haspopup')\r\n  get _ariaHasPopup(): boolean { return true; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.aria-owns')\r\n  get _ariaOwns(): boolean { return (this._timeSelect && this._timeSelect.opened && !!this._timeSelect.id) || null; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.min')\r\n  get _minTime(): string | null { return this.min ? this._timeAdapter.toIso8601(this.min) : null; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.max')\r\n  get _maxTime(): string | null { return this.max ? this._timeAdapter.toIso8601(this.max) : null; }\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLInputElement>,\r\n              @Optional() private _timeAdapter: TimeAdapter<D>,\r\n              @Optional() @Inject(MAT_TIME_FORMATS) private _timeFormats: MatTimeFormats,\r\n              @Optional() private _formField: MatFormField) {\r\n    this._parseValidator = (): ValidationErrors | null => {\r\n      return this._lastValueValid ? null : {'matTimeSelectParse': {'text': this._elementRef.nativeElement.value}};\r\n    };\r\n\r\n    this._minValidator = (control: AbstractControl): ValidationErrors | null => {\r\n      const value = this._getValidDateOrNull(this._timeAdapter.deserialize(control.value));\r\n      return !this.min || !value || this._timeAdapter.compareTime(this.min, value) <= 0 ?\r\n        null : {'matTimeSelectMin': {'min': this.min, 'actual': value}};\r\n    };\r\n\r\n    this._maxValidator = (control: AbstractControl): ValidationErrors | null => {\r\n      const value = this._getValidDateOrNull(this._timeAdapter.deserialize(control.value));\r\n      return !this.max || !value || this._timeAdapter.compareTime(this.max, value) >= 0 ?\r\n        null : {'matTimeSelectMax': {'max': this.max, 'actual': value}};\r\n    };\r\n\r\n    this._validator = Validators.compose([\r\n      this._parseValidator,\r\n      this._minValidator,\r\n      this._maxValidator\r\n    ]);\r\n\r\n    this._localeSubscription = this._timeAdapter.localeChanges.subscribe(\r\n      () => this.value = this.value\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._timeSelectSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: any): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: any): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: any): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** @docs-private */\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(control) : null;\r\n  }\r\n\r\n  /** @docs-private */\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._onValidatorChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Handle keydown event.\r\n   * @param event The event object.\r\n   */\r\n  @HostListener('keydown', ['$event'])\r\n  onKeydown(event: KeyboardEvent) {\r\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n\r\n    if (this._timeSelect && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n      this._timeSelect.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle input event.\r\n   * @param value The current value of the input.\r\n   */\r\n  @HostListener('input', ['$event.target.value'])\r\n  onInput(value: string) {\r\n    let time = this._timeAdapter.parse(value, this._timeFormats.parse.timeInput);\r\n    this._lastValueValid = !time || this._timeAdapter.isValid(time);\r\n    time = this._getValidDateOrNull(time);\r\n\r\n    if (!this._timeAdapter.sameTime(this._value, time)) {\r\n      this._value = time;\r\n      this._onChange(time);\r\n      this._valueChange.next(time);\r\n      this.timeInput.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle change event.\r\n   */\r\n  @HostListener('change')\r\n  onChange() {\r\n    this.timeChange.emit(new MatTimeSelectInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /**\r\n   * Handle blur event.\r\n   */\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n    this._onTouched();\r\n  }\r\n\r\n  /** Returns the palette used by the input's form field, if any. */\r\n  getThemePalette(): ThemePalette {\r\n    return this._formField ? this._formField.color : undefined;\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the time select popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  private _formatValue(value: D | null) {\r\n    this._elementRef.nativeElement.value = value ? this._timeAdapter.format(value, this._timeFormats.display.timeInput) : '';\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._timeAdapter.isDateInstance(obj) && this._timeAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {MatButton} from '@angular/material';\r\nimport {merge, of, Subscription} from 'rxjs';\r\nimport {MatTimeSelectIntl} from './time-select-intl.service';\r\nimport {MatTimeSelectComponent} from './time-select.component';\r\n\r\n/** Can be used to override the icon of a `matTimeSelectToggle`. */\r\n@Directive({\r\n  selector: '[matTimeSelectToggleIcon]'\r\n})\r\nexport class MatTimeSelectToggleIconDirective {}\r\n\r\n@Component({\r\n  selector: 'mat-time-select-toggle',\r\n  templateUrl: './time-select-toggle.component.html',\r\n  styleUrls: ['./time-select-toggle.component.scss'],\r\n  exportAs: 'matTimeSelectToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatTimeSelectToggleComponent<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  private _disabled: boolean;\r\n  private _disableRipple: boolean;\r\n\r\n  /** Time select instance that the button will toggle. */\r\n  @Input('for') timeSelect: MatTimeSelectComponent<D>;\r\n  /** Tabindex for the toggle. */\r\n  @Input() tabIndex: number | null;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(MatTimeSelectToggleIconDirective) customIcon: MatTimeSelectToggleIconDirective;\r\n  /** Underlying button element. */\r\n  @ViewChild('button') button: MatButton;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined ? this.timeSelect.disabled : this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether ripples on the toggle should be disabled. */\r\n  @Input()\r\n  get disableRipple(): boolean {\r\n    return this._disableRipple;\r\n  }\r\n  set disableRipple(value: boolean) {\r\n    this._disableRipple = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class')\r\n  get class(): string { return 'mat-time-select-toggle'; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): string { return '-1'; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class.mat-time-select-toggle-active')\r\n  get active(): boolean { return this.timeSelect && this.timeSelect.opened; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class.mat-accent')\r\n  get accent(): boolean { return this.timeSelect && this.timeSelect.color === 'accent'; }\r\n\r\n  /** @docs-private */\r\n  @HostBinding('class.mat-warn')\r\n  get warn(): boolean { return this.timeSelect && this.timeSelect.color === 'warn'; }\r\n\r\n  constructor(public _intl: MatTimeSelectIntl,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              @Attribute('tabindex') defaultTabIndex: string) {\r\n    const parsedTabIndex = parseInt(defaultTabIndex, 10);\r\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.timeSelect) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  /** Handle focus event. */\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    this.button.focus();\r\n  }\r\n\r\n  /**\r\n   * Open the time select.\r\n   * @param event The triggered event to open the time select.\r\n   */\r\n  open(event: Event): void {\r\n    if (this.timeSelect && !this.disabled) {\r\n      this.timeSelect.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const timeSelectDisabled = this.timeSelect ? this.timeSelect.disabledChange : of();\r\n    const inputDisabled = this.timeSelect && this.timeSelect._timeSelectInput ?\r\n      this.timeSelect._timeSelectInput.disabledChange : of();\r\n    const timeSelectToggled = this.timeSelect ?\r\n      merge(this.timeSelect.openStream, this.timeSelect.closeStream) :\r\n      of();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      timeSelectDisabled,\r\n      inputDisabled,\r\n      timeSelectToggled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {MatButtonModule, MatButtonToggleModule, MatIconModule, MatRippleModule} from '@angular/material';\r\n\r\nimport {MatTimeSelectIntl} from './time-select-intl.service';\r\n\r\nimport {\r\n  MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  MatTimeSelectComponent,\r\n  MatTimeSelectContentComponent\r\n} from './time-select.component';\r\nimport {MatTimeSelectInputDirective} from './time-select-input.directive';\r\nimport {MatTimeSelectToggleComponent, MatTimeSelectToggleIconDirective} from './time-select-toggle.component';\r\nimport {MatTimeUnitOptionComponent} from './time-unit-option.component';\r\nimport {MatTimeUnitSelectComponent} from './time-unit-select.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n    PortalModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n    MatRippleModule\r\n  ],\r\n  declarations: [\r\n    MatTimeSelectComponent,\r\n    MatTimeSelectContentComponent,\r\n    MatTimeSelectInputDirective,\r\n    MatTimeSelectToggleComponent,\r\n    MatTimeSelectToggleIconDirective,\r\n    MatTimeUnitOptionComponent,\r\n    MatTimeUnitSelectComponent\r\n  ],\r\n  exports: [\r\n    MatTimeSelectComponent,\r\n    MatTimeSelectContentComponent,\r\n    MatTimeSelectInputDirective,\r\n    MatTimeSelectToggleComponent,\r\n    MatTimeSelectToggleIconDirective,\r\n    MatTimeUnitOptionComponent,\r\n    MatTimeUnitSelectComponent\r\n  ],\r\n  entryComponents: [\r\n    MatTimeSelectContentComponent\r\n  ],\r\n  providers: [\r\n    MatTimeSelectIntl,\r\n    MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER\r\n  ]\r\n})\r\nexport class MatTimeSelectModule { }\r\n","import {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {Moment} from 'moment';\r\n\r\nimport * as _moment from 'moment';\r\n\r\nconst moment = _moment;\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with times. */\r\n@Injectable()\r\nexport class NativeTimeAdapter extends TimeAdapter<Date> {\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) locale: string,\r\n              @Optional() private _dateAdapter: DateAdapter<Date>) {\r\n    super();\r\n    this.setLocale(locale);\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return this._dateAdapter.getYear(date);\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return this._dateAdapter.getMonth(date);\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return this._dateAdapter.getDate(date);\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return this._dateAdapter.getDayOfWeek(date);\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n\r\n  getSecond(date: Date): number {\r\n    return date.getSeconds();\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    return this._dateAdapter.getYearName(date);\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return this._dateAdapter.getMonthNames(style);\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return this._dateAdapter.getDateNames();\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return this._dateAdapter.getDayOfWeekNames(style);\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return this._dateAdapter.getFirstDayOfWeek();\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this._dateAdapter.getNumDaysInMonth(date);\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return new Date(date.getTime());\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    return this._dateAdapter.createDate(year, month, date);\r\n  }\r\n\r\n  createTime(hour: number = 0, minute: number = 0, second: number = 0): Date {\r\n    if (hour < 0 || hour > 23) {\r\n      throw new Error(`Invalid hour ${hour}. Hour has to be between 0 and 23.`);\r\n    }\r\n\r\n    if (minute < 0 || minute > 59) {\r\n      throw new Error(`Invalid minute ${minute}. Minute has to be between 0 and 59.`);\r\n    }\r\n\r\n    if (second < 0 || second > 59) {\r\n      throw new Error(`Invalid second ${second}. Second has to be between 0 and 59.`);\r\n    }\r\n\r\n    const date = new Date();\r\n    date.setHours(hour,  minute, second);\r\n    return date;\r\n  }\r\n\r\n  today(): Date {\r\n    return this.now();\r\n  }\r\n\r\n  now(): Date {\r\n    return new Date(Date.now());\r\n  }\r\n\r\n  parse(value: any, parseFormat: any): Date | null {\r\n    return this._dateAdapter.parse(value, parseFormat);\r\n  }\r\n\r\n  format(date: Date, displayFormat: any): string {\r\n    return this._dateAdapter.format(date, displayFormat);\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this._dateAdapter.addCalendarYears(date, years);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    return this._dateAdapter.addCalendarMonths(date, months);\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._dateAdapter.addCalendarDays(date, days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    const dateString = this._dateAdapter.toIso8601(date);\r\n    const timeString = [\r\n      this._2digit(date.getUTCHours()),\r\n      this._2digit(date.getUTCMinutes()),\r\n      this._2digit(date.getUTCSeconds())\r\n    ].join(':');\r\n    return `${dateString}T${timeString}Z`;\r\n  }\r\n\r\n  toMoment(date: Date): Moment {\r\n    return moment(date).locale(this.locale);\r\n  }\r\n\r\n  deserialize(value: any): Date | null {\r\n    return this._dateAdapter.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return this._dateAdapter.isDateInstance(obj);\r\n  }\r\n\r\n  isValid(date: Date): boolean {\r\n    return this._dateAdapter.isValid(date);\r\n  }\r\n\r\n  invalid(): Date {\r\n    return this._dateAdapter.invalid();\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n}\r\n","import {MatTimeFormats} from './time-formats';\r\n\r\nexport const MAT_NATIVE_TIME_FORMATS: MatTimeFormats = {\r\n  parse: {\r\n    timeInput: null\r\n  },\r\n  display: {\r\n    timeInput: {hour: 'numeric', minute: 'numeric'},\r\n    timeA11yLabel: {hour: 'numeric', minute: '2-digit'}\r\n  }\r\n};\r\n","import {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {MAT_TIME_FORMATS} from './time-formats';\r\nimport {NativeTimeAdapter} from './native-time-adapter.service';\r\nimport {MAT_NATIVE_TIME_FORMATS} from './native-time-formats';\r\n\r\n@NgModule({\r\n  providers: [\r\n    {provide: TimeAdapter, useClass: NativeTimeAdapter, deps: [MAT_DATE_LOCALE, DateAdapter]},\r\n    {provide: MAT_TIME_FORMATS, useValue: MAT_NATIVE_TIME_FORMATS}\r\n  ]\r\n})\r\nexport class MatNativeTimeModule { }\r\n","import {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {Moment} from 'moment';\r\n\r\nimport * as _moment from 'moment';\r\n\r\nconst moment = _moment;\r\n\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\n@Injectable()\r\nexport class MomentTimeAdapter extends TimeAdapter<Moment> {\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) locale: string,\r\n              @Optional() private _dateAdapter: DateAdapter<Moment>) {\r\n    super();\r\n    this.setLocale(locale || moment.locale());\r\n  }\r\n\r\n  getYear(date: Moment): number {\r\n    return this.clone(date).year();\r\n  }\r\n\r\n  getMonth(date: Moment): number {\r\n    return this.clone(date).month();\r\n  }\r\n\r\n  getDate(date: Moment): number {\r\n    return this.clone(date).date();\r\n  }\r\n\r\n  getDayOfWeek(date: Moment): number {\r\n    return this.clone(date).day();\r\n  }\r\n\r\n  getHour(date: Moment): number {\r\n    return this.clone(date).hour();\r\n  }\r\n\r\n  getMinute(date: Moment): number {\r\n    return this.clone(date).minute();\r\n  }\r\n\r\n  getSecond(date: Moment): number {\r\n    return this.clone(date).second();\r\n  }\r\n\r\n  clone(date: Moment): Moment {\r\n    return date.clone().locale(this.locale);\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Moment {\r\n    return this.clone(this._dateAdapter.createDate(year, month, date));\r\n  }\r\n\r\n  createTime(hour: number = 0, minute: number = 0, second: number = 0): Moment {\r\n    if (hour < 0 || hour > 23) {\r\n      throw new Error(`Invalid hour ${hour}. Hour has to be between 0 and 23.`);\r\n    }\r\n\r\n    if (minute < 0 || minute > 59) {\r\n      throw new Error(`Invalid minute ${minute}. Minute has to be between 0 and 59.`);\r\n    }\r\n\r\n    if (second < 0 || second > 59) {\r\n      throw new Error(`Invalid second ${second}. Second has to be between 0 and 59.`);\r\n    }\r\n\r\n    return moment({hour, minute, second}).locale(this.locale);\r\n  }\r\n\r\n  today(): Moment {\r\n    return this.now();\r\n  }\r\n\r\n  now(): Moment {\r\n    return moment().locale(this.locale);\r\n  }\r\n\r\n  parse(value: any, parseFormat: string): Moment | null {\r\n    if (value && typeof value === 'string') {\r\n      return moment(value, parseFormat, this.locale);\r\n    }\r\n    return value ? moment(value).locale(this.locale) : null;\r\n  }\r\n\r\n  format(date: Moment, displayFormat: string): string {\r\n    date = this.clone(date);\r\n    if (!this.isValid(date)) {\r\n      throw new Error('MomentTimeAdapter: Cannot format invalid date.');\r\n    }\r\n    return date.format(displayFormat);\r\n  }\r\n\r\n  addCalendarYears(date: Moment, years: number): Moment {\r\n    return this.clone(date).add({years});\r\n  }\r\n\r\n  addCalendarMonths(date: Moment, months: number): Moment {\r\n    return this.clone(date).add({months});\r\n  }\r\n\r\n  addCalendarDays(date: Moment, days: number): Moment {\r\n    return this.clone(date).add({days});\r\n  }\r\n\r\n  toIso8601(date: Moment): string {\r\n    return this.clone(date).format();\r\n  }\r\n\r\n  toMoment(date: Moment): Moment {\r\n    return this.clone(date);\r\n  }\r\n\r\n  deserialize(value: any): Moment | null {\r\n    let date: Moment;\r\n    if (value instanceof Date) {\r\n      date = moment(value);\r\n    }\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      date = moment(value, moment.ISO_8601);\r\n    }\r\n    if (date && this.isValid(date)) {\r\n      return date;\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return moment.isMoment(obj);\r\n  }\r\n\r\n  isValid(date: Moment): boolean {\r\n    return this.clone(date).isValid();\r\n  }\r\n\r\n  invalid(): Moment {\r\n    return moment.invalid();\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return [];\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return [];\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return 0;\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    return [];\r\n  }\r\n\r\n  getNumDaysInMonth(date: Moment): number {\r\n    return 0;\r\n  }\r\n\r\n  getYearName(date: Moment): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {MatTimeFormats} from './time-formats';\r\n\r\nexport const MAT_MOMENT_TIME_FORMATS: MatTimeFormats = {\r\n  parse: {\r\n    timeInput: 'LT'\r\n  },\r\n  display: {\r\n    timeInput: 'LT',\r\n    timeA11yLabel: 'LT'\r\n  }\r\n};\r\n","import {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material';\r\nimport {TimeAdapter} from './time-adapter.service';\r\nimport {MAT_TIME_FORMATS} from './time-formats';\r\nimport {MomentTimeAdapter} from './moment-time-adapter.service';\r\nimport {MAT_MOMENT_TIME_FORMATS} from './moment-time-formats';\r\n\r\n@NgModule({\r\n  providers: [\r\n    {provide: TimeAdapter, useClass: MomentTimeAdapter, deps: [MAT_DATE_LOCALE, DateAdapter]},\r\n    {provide: MAT_TIME_FORMATS, useValue: MAT_MOMENT_TIME_FORMATS}\r\n  ]\r\n})\r\nexport class MatMomentTimeModule { }\r\n"],"names":["tslib_1.__extends","moment"],"mappings":"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"}
