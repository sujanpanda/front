import { ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { MatFormField, ThemePalette } from '@angular/material';
import { Observable } from 'rxjs';
import { TimeAdapter } from './time-adapter.service';
import { MatTimeFormats } from './time-formats';
import { MatTimeSelectComponent } from './time-select.component';
/**
 * An event used for time select input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use MatTimeSelectInputEvent instead.
 */
export declare class MatTimeSelectInputEvent<D> {
    /** Reference to the time select input component that emitted the event. */
    target: MatTimeSelectInputDirective<D>;
    /** Reference to the native input element associated with the time select input. */
    targetElement: HTMLElement;
    /** The new value for the target time select input. */
    value: D;
    constructor(
    /** Reference to the time select input component that emitted the event. */
    target: MatTimeSelectInputDirective<D>, 
    /** Reference to the native input element associated with the time select input. */
    targetElement: HTMLElement);
}
/** Directive used to connect an input to a MatTimeSelectComponent. */
export declare class MatTimeSelectInputDirective<D> implements OnDestroy, ControlValueAccessor, Validator {
    private _elementRef;
    private _timeAdapter;
    private _timeFormats;
    private _formField;
    private _timeSelectSubscription;
    private _localeSubscription;
    private _timeSelect;
    private _value;
    private _min;
    private _max;
    private _disabled;
    private _valueChange;
    private _disabledChange;
    /** The form control validator for whether the input parses. */
    private readonly _parseValidator;
    /** The form control validator for the min date time. */
    private readonly _minValidator;
    /** The form control validator for the max date time. */
    private readonly _maxValidator;
    /** The combined form control validator for this input. */
    private readonly _validator;
    /** Whether the last value set on the input was valid. */
    private _lastValueValid;
    /** Emits when a `change` event is fired on this `<input>`. */
    readonly timeChange: EventEmitter<MatTimeSelectInputEvent<D>>;
    /** Emits when an `input` event is fired on this `<input>`. */
    readonly timeInput: EventEmitter<MatTimeSelectInputEvent<D>>;
    /** Emits when the value changes (either due to user input or programmatic change). */
    valueChange: Observable<D | null>;
    /** Emits when the disabled state has changed. */
    disabledChange: Observable<boolean>;
    private _onChange;
    private _onTouched;
    private _onValidatorChange;
    /** The time select that this input is associated with. */
    matTimeSelect: MatTimeSelectComponent<D>;
    /** The value of the input. */
    value: D | null;
    /** The minimum valid date time. */
    min: D | null;
    /** The maximum valid date time. */
    max: D | null;
    /** Whether the time select input is disabled. */
    disabled: boolean;
    /** @docs-private */
    readonly _ariaHasPopup: boolean;
    /** @docs-private */
    readonly _ariaOwns: boolean;
    /** @docs-private */
    readonly _minTime: string | null;
    /** @docs-private */
    readonly _maxTime: string | null;
    constructor(_elementRef: ElementRef<HTMLInputElement>, _timeAdapter: TimeAdapter<D>, _timeFormats: MatTimeFormats, _formField: MatFormField);
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    /** @docs-private */
    validate(control: AbstractControl): ValidationErrors | null;
    /** @docs-private */
    registerOnValidatorChange(fn: () => void): void;
    /**
     * Handle keydown event.
     * @param event The event object.
     */
    onKeydown(event: KeyboardEvent): void;
    /**
     * Handle input event.
     * @param value The current value of the input.
     */
    onInput(value: string): void;
    /**
     * Handle change event.
     */
    onChange(): void;
    /**
     * Handle blur event.
     */
    onBlur(): void;
    /** Returns the palette used by the input's form field, if any. */
    getThemePalette(): ThemePalette;
    /**
     * Gets the element that the time select popup should be connected to.
     * @return The element to connect the popup to.
     */
    getConnectedOverlayOrigin(): ElementRef;
    /** Formats a value and sets it on the input element. */
    private _formatValue;
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    private _getValidDateOrNull;
}
