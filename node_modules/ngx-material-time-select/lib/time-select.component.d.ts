import { ElementRef, EventEmitter, InjectionToken, Injector, NgZone, OnDestroy, Provider, QueryList, ViewContainerRef } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { CanColor, CanColorCtor, ThemePalette } from '@angular/material';
import { Observable } from 'rxjs';
import { Moment, unitOfTime } from 'moment';
import { TimeAdapter } from './time-adapter.service';
import { MatTimeSelectIntl } from './time-select-intl.service';
import { MatTimeSelectInputDirective } from './time-select-input.directive';
import { MatTimeUnitSelectComponent } from './time-unit-select.component';
/** Injection token used to initialize the time select data. */
export declare const MAT_TIME_SELECT_DATA: InjectionToken<Moment>;
/** Injection token that determines the scroll handling while the time select is opened. */
export declare const MAT_TIME_SELECT_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;
/** @docs-private */
export declare const MAT_TIME_SELECT_SCROLL_STRATEGY_FACTORY_PROVIDER: Provider;
export interface MatTimeSelectData<D> {
    units?: unitOfTime.All[];
    value?: D;
    minTime?: D;
    maxTime?: D;
}
/** @docs-private */
export declare class MatTimeSelectContentBase {
    _elementRef: ElementRef;
    constructor(_elementRef: ElementRef);
}
export declare const _MatTimeSelectContentMixinBase: CanColorCtor & typeof MatTimeSelectContentBase;
/**
 * Component used as the content for the time select popup.
 * @docs-private
 */
export declare class MatTimeSelectContentComponent<D> extends _MatTimeSelectContentMixinBase implements CanColor {
    _intl: MatTimeSelectIntl;
    private _timeAdapter;
    /** @docs-private */
    color: ThemePalette;
    /** The array of unit of time selectable in the time select content. */
    units: unitOfTime.All[];
    /** The currently selected time of the time select content. */
    value: Moment;
    /** The minimum selectable time. */
    minTime: Moment;
    /** The minimum selectable time. */
    maxTime: Moment;
    /** Emits when the time select content selected time has been changed. */
    valueChange: EventEmitter<Moment>;
    /** Reference to the internal time unit select components. */
    timeUnitSelectComponents: QueryList<MatTimeUnitSelectComponent<D>>;
    /** @docs-private */
    readonly class = "mat-time-select-content";
    /** The hour clock type. Possible values: 12: 12 hour clock; 24: 24 hour clock */
    hourClock: number;
    /**
     * The time period of the currently selected time of the time select content. Possible values: `am` when selected time hour is less
     * than 12; `pm` when selected time hour is greater than or equal to 12.
     */
    amPm: string;
    constructor(elementRef: ElementRef, _intl: MatTimeSelectIntl, _timeAdapter: TimeAdapter<D>, data: MatTimeSelectData<D>);
    /**
     * Gets the value of the given unit of time.
     * @param unit The unit of time to query.
     * @returns The retrieved value.
     */
    get(unit: unitOfTime.All): number;
    /**
     * Sets the value of the given unit of time.
     * @param unit The unit of time to update.
     * @param value The value to set.
     */
    set(unit: unitOfTime.All, value: number): void;
    /**
     * Gets the minimum allowed value of the given unit of time.
     * @param unit The unit of time to query.
     * @returns The minimum value.
     */
    getMin(unit: unitOfTime.All): number | null;
    /**
     * Gets the maximum allowed value of the given unit of time.
     * @param unit The unit of time to query.
     * @returns The maximum value.
     */
    getMax(unit: unitOfTime.All): number | null;
    /**
     * Gets the value after moving up the given unit of time.
     * @param unit The unit of time to move.
     * @returns The new value.
     */
    getPrev(unit: unitOfTime.All): Moment;
    /**
     * Gets the value after moving down the given unit of time.
     * @param unit The unit of time to move.
     * @returns The new value.
     */
    getNext(unit: unitOfTime.All): Moment;
    /**
     * Gets the value before midday.
     */
    getAM(): Moment;
    /**
     * Gets the value after midday.
     */
    getPM(): Moment;
    /**
     * Whether the given value is selectable.
     * @param value The value to check.
     * @returns `true` if the value is valid. Otherwise `false`.
     */
    isValid(value: Moment): boolean;
}
/** Component responsible for managing the time select popup. */
export declare class MatTimeSelectComponent<D> implements OnDestroy, CanColor {
    private _overlay;
    private _injector;
    private _ngZone;
    private _viewContainerRef;
    private _timeAdapter;
    private _dir;
    private _document;
    /** Subscription to value changes in the associated input element. */
    private _inputSubscription;
    private _startAt;
    private _color;
    private _disabled;
    private _selected;
    private _opened;
    private _disabledChange;
    private _selectedChange;
    /** A reference to the overlay when the time select is opened as a popup. */
    private _popupRef;
    /** A portal containing the popup for this time select. */
    private _popupComponentPortal;
    /** Reference to the component instantiated in popup mode. */
    private _popupComponentRef;
    /** The element that was focused before the time select was opened. */
    private _focusedElementBeforeOpen;
    private readonly _scrollStrategy;
    /** The input element this time select is associated with. */
    _timeSelectInput: MatTimeSelectInputDirective<D>;
    /** Emits when the time select has been opened. */
    openStream: EventEmitter<void>;
    /** Emits when the time select has been closed. */
    closeStream: EventEmitter<void>;
    /** The id for the time select popup. */
    id: string;
    /** The initial time of the time select. */
    startAt: D | null;
    /** The color palette to use on the time select popup. */
    color: ThemePalette;
    /** Whether the time select pop-up should disabled. */
    disabled: boolean;
    /** The currently selected time. */
    selected: D;
    /** Whether the time select is opened. */
    opened: boolean;
    /** Emits when the time select disabled state has been changed. */
    readonly disabledChange: Observable<boolean>;
    /** Emits when the time select selected time has been changed. */
    readonly selectedChange: Observable<D>;
    constructor(_overlay: Overlay, _injector: Injector, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _timeAdapter: TimeAdapter<D>, _dir: Directionality, _document: any);
    ngOnDestroy(): void;
    /**
     * Selects the given time.
     * @param time The date time to select.
     */
    select(time: D): void;
    /**
     * Register an input with this time select.
     * @param input The time select input to register with this time select.
     */
    registerInput(input: MatTimeSelectInputDirective<D>): void;
    /** Open the time select. */
    open(): void;
    /** Close the time select. */
    close(): void;
    /** Open the time select as a popup. */
    private _openAsPopup;
    /** Create a portal injector to inject time select initial data. */
    private _createInjector;
    /** Create the popup. */
    private _createPopup;
    /** Create the popup position strategy. */
    private _createPopupPositionStrategy;
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    private _getValidDateOrNull;
    /** Passes the current theme color along to the time select overlay. */
    private _setColor;
}
