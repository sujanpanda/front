import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { unitOfTime } from 'moment';
import { TimeAdapter } from './time-adapter.service';
import { MatTimeFormats } from './time-formats';
/** Component used to select a value of a unit of time. */
export declare class MatTimeUnitSelectComponent<D> implements AfterViewInit, OnInit {
    private _changeDetectorRef;
    private _timeAdapter;
    private _timeFormats;
    private _originTop;
    /** The currently selected value. */
    value: number;
    /** The unit of time of the time select. */
    unit: unitOfTime.All;
    /** The minimum selectable value. */
    min: number | null;
    /** The maximum selectable value. */
    max: number | null;
    /** The list of all values of the time select. */
    options: {
        value: number;
        label: string;
    }[];
    /** Emits when selected value has been changed. Output to enable support for two-way binding on `[(value)]`. */
    valueChange: EventEmitter<number>;
    /** The panel element containing all time select options. */
    panel: ElementRef<HTMLElement>;
    constructor(_changeDetectorRef: ChangeDetectorRef, _timeAdapter: TimeAdapter<D>, _timeFormats: MatTimeFormats);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    /** Select the previous option. */
    prev(): void;
    /** Select the next option. */
    next(): void;
    /**
     * Select the option moving by the given amount of step.
     * @param step The amount of step to move.
     */
    move(step: number): void;
    /**
     * Gets the previous option value.
     */
    getPrev(): number;
    /**
     * Gets the next option value.
     */
    getNext(): number;
    /**
     * Whether the given value is valid.
     * @param value The value to check.
     */
    isValid(value: number): boolean;
}
